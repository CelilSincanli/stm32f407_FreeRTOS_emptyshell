
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ec  080079ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080079ec  080079ec  000179ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f4  080079f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080079fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014498  20000080  08007a7c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014518  08007a7c  00024518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018367  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003017  00000000  00000000  00038417  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  0003c730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023bbe  00000000  00000000  0003d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010215  00000000  00000000  00061466  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6ba7  00000000  00000000  0007167b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  001482a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800783c 	.word	0x0800783c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800783c 	.word	0x0800783c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001446c 	.word	0x2001446c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb51 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f851 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8b9 	bl	8000794 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable th CYCCNT(Cycle counting) counter.
  DWT_CTRL |= (1<<0); // it sets the 0th bit to 1 on the register.
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x90>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <main+0x90>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  // Initialize Segger uart recorder.
  SEGGER_UART_init(500000);// to obtain high baudrate must be sure system clock is set to max value.
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <main+0x94>)
 8000630:	f004 fac4 	bl	8004bbc <SEGGER_UART_init>

  //SEGGER APIs to start the recordings of FreeRTOS application.
  SEGGER_SYSVIEW_Conf();
 8000634:	f004 f8f4 	bl	8004820 <SEGGER_SYSVIEW_Conf>
  // If segger_uart.c has integrated to project this code must be comment line.(It is already called in segger_uart.c)
//  SEGGER_SYSVIEW_Start(); //This function calls before scheduler that is why priority grouping initialization is required!
  	  	  	  	  	  	  //Check out the HAL_MspInit function.

  // Create Tasks
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world form Task-1", 2, &task1_handle);
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0x98>)
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4919      	ldr	r1, [pc, #100]	; (80006ac <main+0x9c>)
 8000648:	4819      	ldr	r0, [pc, #100]	; (80006b0 <main+0xa0>)
 800064a:	f002 faa1 	bl	8002b90 <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d009      	beq.n	800066a <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	e7fe      	b.n	8000668 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world form Task-2", 2, &task2_handle);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0xa4>)
 8000674:	22c8      	movs	r2, #200	; 0xc8
 8000676:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xa8>)
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <main+0xac>)
 800067a:	f002 fa89 	bl	8002b90 <xTaskCreate>
 800067e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d009      	beq.n	800069a <main+0x8a>
 8000686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	e7fe      	b.n	8000698 <main+0x88>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800069a:	f002 fbcd 	bl	8002e38 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x8e>
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0007a120 	.word	0x0007a120
 80006a8:	08007854 	.word	0x08007854
 80006ac:	0800786c 	.word	0x0800786c
 80006b0:	08000a55 	.word	0x08000a55
 80006b4:	08007874 	.word	0x08007874
 80006b8:	0800788c 	.word	0x0800788c
 80006bc:	08000a91 	.word	0x08000a91

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fca2 	bl	8007018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fd91 	bl	800126c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9ce 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ffea 	bl	800174c <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9b7 	bl	8000af0 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4ba1      	ldr	r3, [pc, #644]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4aa0      	ldr	r2, [pc, #640]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b9e      	ldr	r3, [pc, #632]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b9a      	ldr	r3, [pc, #616]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a99      	ldr	r2, [pc, #612]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b97      	ldr	r3, [pc, #604]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b93      	ldr	r3, [pc, #588]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a92      	ldr	r2, [pc, #584]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b90      	ldr	r3, [pc, #576]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b8c      	ldr	r3, [pc, #560]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a8b      	ldr	r2, [pc, #556]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b85      	ldr	r3, [pc, #532]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a84      	ldr	r2, [pc, #528]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b7e      	ldr	r3, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a7d      	ldr	r2, [pc, #500]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b7b      	ldr	r3, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4878      	ldr	r0, [pc, #480]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000858:	f000 fcee 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4876      	ldr	r0, [pc, #472]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fce9 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086c:	4874      	ldr	r0, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 800086e:	f000 fce3 	bl	8001238 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486b      	ldr	r0, [pc, #428]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 800088a:	f000 fb3b 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4865      	ldr	r0, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 80008a6:	f000 fb2d 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	485d      	ldr	r0, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb1d 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2b0>)
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	485a      	ldr	r0, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80008de:	f000 fb11 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e2:	2310      	movs	r3, #16
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f2:	2306      	movs	r3, #6
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4852      	ldr	r0, [pc, #328]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80008fe:	f000 fb01 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000902:	23e0      	movs	r3, #224	; 0xe0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	484a      	ldr	r0, [pc, #296]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 faf1 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000922:	2304      	movs	r3, #4
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4845      	ldr	r0, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000936:	f000 fae5 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094c:	2305      	movs	r3, #5
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	483d      	ldr	r0, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fad4 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000960:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4832      	ldr	r0, [pc, #200]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 8000976:	f000 fac5 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800097a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000998:	f000 fab4 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009b2:	f000 faa7 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009d4:	f000 fa96 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 80009ec:	f000 fa8a 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f6:	2312      	movs	r3, #18
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a02:	2304      	movs	r3, #4
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000a0e:	f000 fa79 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_GPIO_Init+0x2bc>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000a26:	f000 fa6d 	bl	8000f04 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	10120000 	.word	0x10120000

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		sprintf(msg,100,"%s\n",(char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f006 fadf 	bl	8007028 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 f9f6 	bl	8006e60 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD(); // it release the processor when task-1 done for one time
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		sprintf(msg,100,"%s\n",(char*)parameters);
 8000a84:	e7ea      	b.n	8000a5c <task1_handler+0x8>
 8000a86:	bf00      	nop
 8000a88:	08007894 	.word	0x08007894
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		sprintf(msg,100,"%s\n",(char*)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <task2_handler+0x34>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	f006 fac1 	bl	8007028 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f006 f9d8 	bl	8006e60 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD(); // it release the processor when task-2 done for one time
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <task2_handler+0x38>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
		sprintf(msg,100,"%s\n",(char*)parameters);
 8000ac0:	e7ea      	b.n	8000a98 <task2_handler+0x8>
 8000ac2:	bf00      	nop
 8000ac4:	08007894 	.word	0x08007894
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f90f 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40001000 	.word	0x40001000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0x6>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue(); // Initializes a variable which is related to priority grouping.
 8000b36:	f003 fad3 	bl	80040e0 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	; 0x36
 8000b5e:	f000 f9a7 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f000 f9c0 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xa4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <HAL_InitTick+0xa4>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xa4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 0210 	add.w	r2, r7, #16
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 ffba 	bl	8001b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b94:	f000 ffa4 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_InitTick+0xb0>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bce:	f000 ffcd 	bl	8001b6c <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_InitTick+0xac>)
 8000bda:	f000 fffc 	bl	8001bd6 <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	200143e8 	.word	0x200143e8
 8000bf8:	40001000 	.word	0x40001000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f000 fff6 	bl	8001c1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200143e8 	.word	0x200143e8

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SystemInit+0x28>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <SystemInit+0x28>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SystemInit+0x28>)
 8000c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c56:	609a      	str	r2, [r3, #8]
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	e003      	b.n	8000c78 <LoopCopyDataInit>

08000c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c76:	3104      	adds	r1, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c80:	d3f6      	bcc.n	8000c70 <CopyDataInit>
  ldr  r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c84:	e002      	b.n	8000c8c <LoopFillZerobss>

08000c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c88:	f842 3b04 	str.w	r3, [r2], #4

08000c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c90:	d3f9      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c92:	f7ff ffd3 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f006 f981 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fcb9 	bl	8000610 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ca4:	080079fc 	.word	0x080079fc
  ldr  r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cac:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000cb0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000cb4:	20014518 	.word	0x20014518

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff2c 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff ff02 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20014428 	.word	0x20014428

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20014428 	.word	0x20014428

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00b      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0xfc>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_GPIO_Init+0x308>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5e      	ldr	r2, [pc, #376]	; (800120c <HAL_GPIO_Init+0x308>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <HAL_GPIO_Init+0x308>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x30c>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a50      	ldr	r2, [pc, #320]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <HAL_GPIO_Init+0x328>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_GPIO_Init+0x32c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4934      	ldr	r1, [pc, #208]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_GPIO_Init+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x330>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_GPIO_Init+0x330>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_GPIO_Init+0x330>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x330>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_GPIO_Init+0x330>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e25b      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d00c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e236      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b91      	ldr	r3, [pc, #580]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fd00 	bl	8000d28 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fcfc 	bl	8000d28 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1fb      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcec 	bl	8000d28 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fce8 	bl	8000d28 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1e7      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1bb      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4952      	ldr	r1, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fca1 	bl	8000d28 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc9d 	bl	8000d28 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e19c      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4940      	ldr	r1, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc80 	bl	8000d28 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc7c 	bl	8000d28 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e17b      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fc60 	bl	8000d28 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fc5c 	bl	8000d28 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e15b      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fc49 	bl	8000d28 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fc45 	bl	8000d28 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e144      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc0b 	bl	8000d28 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e011      	b.n	800153a <HAL_RCC_OscConfig+0x2ce>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fbfe 	bl	8000d28 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0fd      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x4d4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x2f0>
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a7c      	ldr	r2, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a76      	ldr	r2, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800157e:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a70      	ldr	r2, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a6d      	ldr	r2, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fbc3 	bl	8000d28 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fbbf 	bl	8000d28 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0bc      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x33a>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbad 	bl	8000d28 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fba9 	bl	8000d28 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0a6      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b52      	ldr	r3, [pc, #328]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a51      	ldr	r2, [pc, #324]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8092 	beq.w	8001734 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d05c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d141      	bne.n	80016a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b48      	ldr	r3, [pc, #288]	; (8001748 <HAL_RCC_OscConfig+0x4dc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb7d 	bl	8000d28 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb79 	bl	8000d28 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e078      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4933      	ldr	r1, [pc, #204]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_OscConfig+0x4dc>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb52 	bl	8000d28 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb4e 	bl	8000d28 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04d      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x41c>
 80016a6:	e045      	b.n	8001734 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb3b 	bl	8000d28 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb37 	bl	8000d28 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e036      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x44a>
 80016d4:	e02e      	b.n	8001734 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e029      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x4d8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11c      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d115      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d10d      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000
 8001744:	40023800 	.word	0x40023800
 8001748:	42470060 	.word	0x42470060

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fa74 	bl	8000d28 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fa70 	bl	8000d28 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f928 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	08007978 	.word	0x08007978
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d007      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x32>
 800193a:	2b08      	cmp	r3, #8
 800193c:	d008      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x38>
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80b4 	bne.w	8001aac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b5e      	ldr	r3, [pc, #376]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001946:	60bb      	str	r3, [r7, #8]
       break;
 8001948:	e0b3      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800194c:	60bb      	str	r3, [r7, #8]
      break;
 800194e:	e0b0      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d04a      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b55      	ldr	r3, [pc, #340]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	f04f 0400 	mov.w	r4, #0
 8001970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	ea03 0501 	and.w	r5, r3, r1
 800197c:	ea04 0602 	and.w	r6, r4, r2
 8001980:	4629      	mov	r1, r5
 8001982:	4632      	mov	r2, r6
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	f04f 0400 	mov.w	r4, #0
 800198c:	0154      	lsls	r4, r2, #5
 800198e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001992:	014b      	lsls	r3, r1, #5
 8001994:	4619      	mov	r1, r3
 8001996:	4622      	mov	r2, r4
 8001998:	1b49      	subs	r1, r1, r5
 800199a:	eb62 0206 	sbc.w	r2, r2, r6
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	f04f 0400 	mov.w	r4, #0
 80019a6:	0194      	lsls	r4, r2, #6
 80019a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ac:	018b      	lsls	r3, r1, #6
 80019ae:	1a5b      	subs	r3, r3, r1
 80019b0:	eb64 0402 	sbc.w	r4, r4, r2
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	00e2      	lsls	r2, r4, #3
 80019be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019c2:	00d9      	lsls	r1, r3, #3
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	195b      	adds	r3, r3, r5
 80019ca:	eb44 0406 	adc.w	r4, r4, r6
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	0262      	lsls	r2, r4, #9
 80019d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019dc:	0259      	lsls	r1, r3, #9
 80019de:	460b      	mov	r3, r1
 80019e0:	4614      	mov	r4, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	4621      	mov	r1, r4
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	f7fe fc8e 	bl	8000310 <__aeabi_uldivmod>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e049      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	ea03 0501 	and.w	r5, r3, r1
 8001a12:	ea04 0602 	and.w	r6, r4, r2
 8001a16:	4629      	mov	r1, r5
 8001a18:	4632      	mov	r2, r6
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	f04f 0400 	mov.w	r4, #0
 8001a22:	0154      	lsls	r4, r2, #5
 8001a24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a28:	014b      	lsls	r3, r1, #5
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	1b49      	subs	r1, r1, r5
 8001a30:	eb62 0206 	sbc.w	r2, r2, r6
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f04f 0400 	mov.w	r4, #0
 8001a3c:	0194      	lsls	r4, r2, #6
 8001a3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a42:	018b      	lsls	r3, r1, #6
 8001a44:	1a5b      	subs	r3, r3, r1
 8001a46:	eb64 0402 	sbc.w	r4, r4, r2
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	00e2      	lsls	r2, r4, #3
 8001a54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a58:	00d9      	lsls	r1, r3, #3
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	195b      	adds	r3, r3, r5
 8001a60:	eb44 0406 	adc.w	r4, r4, r6
 8001a64:	f04f 0100 	mov.w	r1, #0
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	02a2      	lsls	r2, r4, #10
 8001a6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a72:	0299      	lsls	r1, r3, #10
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f04f 0400 	mov.w	r4, #0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4623      	mov	r3, r4
 8001a86:	f7fe fc43 	bl	8000310 <__aeabi_uldivmod>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	60bb      	str	r3, [r7, #8]
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001aae:	60bb      	str	r3, [r7, #8]
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08007988 	.word	0x08007988

08001b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	220f      	movs	r2, #15
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCC_GetClockConfig+0x60>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01d      	b.n	8001bba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f815 	bl	8001bc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f000 f968 	bl	8001e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	d007      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d122      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d11b      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f06f 0202 	mvn.w	r2, #2
 8001c4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8ee 	bl	8001e42 <HAL_TIM_IC_CaptureCallback>
 8001c66:	e005      	b.n	8001c74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8e0 	bl	8001e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8f1 	bl	8001e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d122      	bne.n	8001cce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d11b      	bne.n	8001cce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0204 	mvn.w	r2, #4
 8001c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f8c4 	bl	8001e42 <HAL_TIM_IC_CaptureCallback>
 8001cba:	e005      	b.n	8001cc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8b6 	bl	8001e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8c7 	bl	8001e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d122      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11b      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0208 	mvn.w	r2, #8
 8001cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f89a 	bl	8001e42 <HAL_TIM_IC_CaptureCallback>
 8001d0e:	e005      	b.n	8001d1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f88c 	bl	8001e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f89d 	bl	8001e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d122      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d11b      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0210 	mvn.w	r2, #16
 8001d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f870 	bl	8001e42 <HAL_TIM_IC_CaptureCallback>
 8001d62:	e005      	b.n	8001d70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f862 	bl	8001e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f873 	bl	8001e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10e      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0201 	mvn.w	r2, #1
 8001d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7fe fe95 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d10e      	bne.n	8001dce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b80      	cmp	r3, #128	; 0x80
 8001dbc:	d107      	bne.n	8001dce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f903 	bl	8001fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d10e      	bne.n	8001dfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d107      	bne.n	8001dfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f838 	bl	8001e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d10e      	bne.n	8001e26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d107      	bne.n	8001e26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f06f 0220 	mvn.w	r2, #32
 8001e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8cd 	bl	8001fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <TIM_Base_SetConfig+0x114>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9e:	d00f      	beq.n	8001ec0 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3d      	ldr	r2, [pc, #244]	; (8001f98 <TIM_Base_SetConfig+0x118>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3c      	ldr	r2, [pc, #240]	; (8001f9c <TIM_Base_SetConfig+0x11c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <TIM_Base_SetConfig+0x120>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3a      	ldr	r2, [pc, #232]	; (8001fa4 <TIM_Base_SetConfig+0x124>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <TIM_Base_SetConfig+0x114>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02b      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d027      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <TIM_Base_SetConfig+0x118>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d023      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <TIM_Base_SetConfig+0x11c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <TIM_Base_SetConfig+0x120>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01b      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <TIM_Base_SetConfig+0x124>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d017      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <TIM_Base_SetConfig+0x128>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <TIM_Base_SetConfig+0x12c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00f      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <TIM_Base_SetConfig+0x130>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00b      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <TIM_Base_SetConfig+0x134>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a24      	ldr	r2, [pc, #144]	; (8001fb8 <TIM_Base_SetConfig+0x138>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <TIM_Base_SetConfig+0x13c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <TIM_Base_SetConfig+0x114>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <TIM_Base_SetConfig+0xf8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <TIM_Base_SetConfig+0x124>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d103      	bne.n	8001f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	615a      	str	r2, [r3, #20]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40010400 	.word	0x40010400
 8001fa8:	40014000 	.word	0x40014000
 8001fac:	40014400 	.word	0x40014400
 8001fb0:	40014800 	.word	0x40014800
 8001fb4:	40001800 	.word	0x40001800
 8001fb8:	40001c00 	.word	0x40001c00
 8001fbc:	40002000 	.word	0x40002000

08001fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 0208 	add.w	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002000:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 0208 	add.w	r2, r3, #8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f103 0208 	add.w	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a0:	d103      	bne.n	80020aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00c      	b.n	80020c4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3308      	adds	r3, #8
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e002      	b.n	80020b8 <vListInsert+0x2e>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d2f6      	bcs.n	80020b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6892      	ldr	r2, [r2, #8]
 8002112:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6852      	ldr	r2, [r2, #4]
 800211c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d103      	bne.n	8002130 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <xQueueGenericReset+0x28>
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	e7fe      	b.n	8002176 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002178:	f002 f82c 	bl	80041d4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	441a      	add	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	3b01      	subs	r3, #1
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	441a      	add	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <xQueueGenericReset+0x92>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00f      	beq.n	80021f6 <xQueueGenericReset+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3310      	adds	r3, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 f8a0 	bl	8003320 <xTaskRemoveFromEventList>
 80021e0:	e009      	b.n	80021f6 <xQueueGenericReset+0xa6>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3310      	adds	r3, #16
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fefe 	bl	8001fe8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fef9 	bl	8001fe8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80021f6:	f002 f81b 	bl	8004230 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <xQueueGenericCreate+0x28>
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	e7fe      	b.n	800222a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <xQueueGenericCreate+0x46>
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d101      	bne.n	800224e <xQueueGenericCreate+0x4a>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <xQueueGenericCreate+0x4c>
 800224e:	2300      	movs	r3, #0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <xQueueGenericCreate+0x64>
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e7fe      	b.n	8002266 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800226e:	d909      	bls.n	8002284 <xQueueGenericCreate+0x80>
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e7fe      	b.n	8002282 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3350      	adds	r3, #80	; 0x50
 8002288:	4618      	mov	r0, r3
 800228a:	f002 f8c3 	bl	8004414 <pvPortMalloc>
 800228e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3350      	adds	r3, #80	; 0x50
 800229e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022a0:	79fa      	ldrb	r2, [r7, #7]
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f805 	bl	80022bc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
    }
 80022b4:	4618      	mov	r0, r3
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e002      	b.n	80022de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022ea:	2101      	movs	r1, #1
 80022ec:	69b8      	ldr	r0, [r7, #24]
 80022ee:	f7ff ff2f 	bl	8002150 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	2073      	movs	r0, #115	; 0x73
 8002302:	f003 ff35 	bl	8006170 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b090      	sub	sp, #64	; 0x40
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <xQueueGenericSend+0x30>
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	e7fe      	b.n	800233e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <xQueueGenericSend+0x3e>
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <xQueueGenericSend+0x42>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <xQueueGenericSend+0x44>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <xQueueGenericSend+0x5c>
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e7fe      	b.n	800236a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d103      	bne.n	800237a <xQueueGenericSend+0x6a>
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <xQueueGenericSend+0x6e>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericSend+0x70>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <xQueueGenericSend+0x88>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	e7fe      	b.n	8002396 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002398:	f001 f958 	bl	800364c <xTaskGetSchedulerState>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <xQueueGenericSend+0x98>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <xQueueGenericSend+0x9c>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <xQueueGenericSend+0x9e>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <xQueueGenericSend+0xb6>
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023c6:	f001 ff05 	bl	80041d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <xQueueGenericSend+0xcc>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11f      	bne.n	800241c <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 fc52 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	460b      	mov	r3, r1
 80023ee:	4601      	mov	r1, r0
 80023f0:	205a      	movs	r0, #90	; 0x5a
 80023f2:	f003 ff33 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023fc:	f000 fa54 	bl	80028a8 <prvCopyDataToQueue>
 8002400:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <xQueueGenericSend+0x104>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	3324      	adds	r3, #36	; 0x24
 800240e:	4618      	mov	r0, r3
 8002410:	f000 ff86 	bl	8003320 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002414:	f001 ff0c 	bl	8004230 <vPortExitCritical>
                return pdPASS;
 8002418:	2301      	movs	r3, #1
 800241a:	e07d      	b.n	8002518 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d110      	bne.n	8002444 <xQueueGenericSend+0x134>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002422:	f001 ff05 	bl	8004230 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fc2d 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	4601      	mov	r1, r0
 800243a:	205a      	movs	r0, #90	; 0x5a
 800243c:	f003 ff0e 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002440:	2300      	movs	r3, #0
 8002442:	e069      	b.n	8002518 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <xQueueGenericSend+0x148>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4618      	mov	r0, r3
 8002450:	f000 ffcc 	bl	80033ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002458:	f001 feea 	bl	8004230 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800245c:	f000 fd4c 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002460:	f001 feb8 	bl	80041d4 <vPortEnterCritical>
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800246a:	b25b      	sxtb	r3, r3
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002470:	d103      	bne.n	800247a <xQueueGenericSend+0x16a>
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002480:	b25b      	sxtb	r3, r3
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002486:	d103      	bne.n	8002490 <xQueueGenericSend+0x180>
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002490:	f001 fece 	bl	8004230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002494:	1d3a      	adds	r2, r7, #4
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f000 ffbb 	bl	8003418 <xTaskCheckForTimeOut>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d124      	bne.n	80024f2 <xQueueGenericSend+0x1e2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024aa:	f000 faf5 	bl	8002a98 <prvIsQueueFull>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <xQueueGenericSend+0x1d6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	3310      	adds	r3, #16
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fedd 	bl	800327c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80024c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c4:	f000 fa80 	bl	80029c8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80024c8:	f000 fd24 	bl	8002f14 <xTaskResumeAll>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f47f af79 	bne.w	80023c6 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <xQueueGenericSend+0x210>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	e76f      	b.n	80023c6 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80024e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e8:	f000 fa6e 	bl	80029c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024ec:	f000 fd12 	bl	8002f14 <xTaskResumeAll>
 80024f0:	e769      	b.n	80023c6 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80024f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f4:	f000 fa68 	bl	80029c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024f8:	f000 fd0c 	bl	8002f14 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 fbc2 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	460b      	mov	r3, r1
 800250e:	4601      	mov	r1, r0
 8002510:	205a      	movs	r0, #90	; 0x5a
 8002512:	f003 fea3 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002516:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002518:	4618      	mov	r0, r3
 800251a:	3738      	adds	r7, #56	; 0x38
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	; 0x40
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	2b00      	cmp	r3, #0
 800253a:	d109      	bne.n	8002550 <xQueueGenericSendFromISR+0x2c>
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
 800254e:	e7fe      	b.n	800254e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <xQueueGenericSendFromISR+0x3a>
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <xQueueGenericSendFromISR+0x3e>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xQueueGenericSendFromISR+0x40>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <xQueueGenericSendFromISR+0x58>
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	e7fe      	b.n	800257a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d103      	bne.n	800258a <xQueueGenericSendFromISR+0x66>
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <xQueueGenericSendFromISR+0x6a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <xQueueGenericSendFromISR+0x6c>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <xQueueGenericSendFromISR+0x84>
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	e7fe      	b.n	80025a6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025a8:	f001 fef6 	bl	8004398 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80025ac:	f3ef 8211 	mrs	r2, BASEPRI
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61fa      	str	r2, [r7, #28]
 80025c2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80025c4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <xQueueGenericSendFromISR+0xb6>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d147      	bne.n	800266a <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fb4b 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 80025f2:	4601      	mov	r1, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	2060      	movs	r0, #96	; 0x60
 80025fa:	f003 fd5f 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002604:	f000 f950 	bl	80028a8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002608:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002610:	d112      	bne.n	8002638 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	3324      	adds	r3, #36	; 0x24
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe7e 	bl	8003320 <xTaskRemoveFromEventList>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01c      	beq.n	8002664 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e015      	b.n	8002664 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002638:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800263c:	2b7f      	cmp	r3, #127	; 0x7f
 800263e:	d109      	bne.n	8002654 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e7fe      	b.n	8002652 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002658:	3301      	adds	r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	b25a      	sxtb	r2, r3
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002664:	2301      	movs	r3, #1
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002668:	e00b      	b.n	8002682 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	4618      	mov	r0, r3
 800266e:	f004 fb0b 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002672:	4601      	mov	r1, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	2060      	movs	r0, #96	; 0x60
 800267a:	f003 fd1f 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800267e:	2300      	movs	r3, #0
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800268e:	4618      	mov	r0, r3
 8002690:	3740      	adds	r7, #64	; 0x40
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b08f      	sub	sp, #60	; 0x3c
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <xQueueReceive+0x2e>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	e7fe      	b.n	80026c4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <xQueueReceive+0x3c>
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <xQueueReceive+0x40>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueReceive+0x42>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <xQueueReceive+0x5a>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e7fe      	b.n	80026f0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026f2:	f000 ffab 	bl	800364c <xTaskGetSchedulerState>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <xQueueReceive+0x6a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <xQueueReceive+0x6e>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <xQueueReceive+0x70>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <xQueueReceive+0x88>
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e7fe      	b.n	800271e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002720:	f001 fd58 	bl	80041d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d026      	beq.n	800277e <xQueueReceive+0xe6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002734:	f000 f922 	bl	800297c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	4618      	mov	r0, r3
 800273c:	f004 faa4 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002740:	4604      	mov	r4, r0
 8002742:	2000      	movs	r0, #0
 8002744:	f004 faa0 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002748:	4601      	mov	r1, r0
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	2301      	movs	r3, #1
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	460a      	mov	r2, r1
 8002754:	4621      	mov	r1, r4
 8002756:	205c      	movs	r0, #92	; 0x5c
 8002758:	f003 fd80 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <xQueueReceive+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fdd5 	bl	8003320 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002776:	f001 fd5b 	bl	8004230 <vPortExitCritical>
                return pdPASS;
 800277a:	2301      	movs	r3, #1
 800277c:	e08e      	b.n	800289c <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d115      	bne.n	80027b0 <xQueueReceive+0x118>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002784:	f001 fd54 	bl	8004230 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fa7c 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002790:	4604      	mov	r4, r0
 8002792:	2000      	movs	r0, #0
 8002794:	f004 fa78 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002798:	4601      	mov	r1, r0
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	2301      	movs	r3, #1
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	460a      	mov	r2, r1
 80027a4:	4621      	mov	r1, r4
 80027a6:	205c      	movs	r0, #92	; 0x5c
 80027a8:	f003 fd58 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e075      	b.n	800289c <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fe16 	bl	80033ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027c4:	f001 fd34 	bl	8004230 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027c8:	f000 fb96 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027cc:	f001 fd02 	bl	80041d4 <vPortEnterCritical>
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027dc:	d103      	bne.n	80027e6 <xQueueReceive+0x14e>
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f2:	d103      	bne.n	80027fc <xQueueReceive+0x164>
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027fc:	f001 fd18 	bl	8004230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002800:	1d3a      	adds	r2, r7, #4
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fe05 	bl	8003418 <xTaskCheckForTimeOut>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d124      	bne.n	800285e <xQueueReceive+0x1c6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002816:	f000 f929 	bl	8002a6c <prvIsQueueEmpty>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <xQueueReceive+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	3324      	adds	r3, #36	; 0x24
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd27 	bl	800327c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002830:	f000 f8ca 	bl	80029c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002834:	f000 fb6e 	bl	8002f14 <xTaskResumeAll>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f af70 	bne.w	8002720 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <xQueueReceive+0x20c>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	e766      	b.n	8002720 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002854:	f000 f8b8 	bl	80029c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002858:	f000 fb5c 	bl	8002f14 <xTaskResumeAll>
 800285c:	e760      	b.n	8002720 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800285e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002860:	f000 f8b2 	bl	80029c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002864:	f000 fb56 	bl	8002f14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286a:	f000 f8ff 	bl	8002a6c <prvIsQueueEmpty>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f43f af55 	beq.w	8002720 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fa05 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 800287e:	4604      	mov	r4, r0
 8002880:	2000      	movs	r0, #0
 8002882:	f004 fa01 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002886:	4601      	mov	r1, r0
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2301      	movs	r3, #1
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	460a      	mov	r2, r1
 8002892:	4621      	mov	r1, r4
 8002894:	205c      	movs	r0, #92	; 0x5c
 8002896:	f003 fce1 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800289a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800289c:	4618      	mov	r0, r3
 800289e:	3734      	adds	r7, #52	; 0x34
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d14d      	bne.n	800296a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fed8 	bl	8003688 <xTaskPriorityDisinherit>
 80028d8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	e043      	b.n	800296a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d119      	bne.n	800291c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6858      	ldr	r0, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	461a      	mov	r2, r3
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	f004 fb85 	bl	8007002 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	441a      	add	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d32b      	bcc.n	800296a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e026      	b.n	800296a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68d8      	ldr	r0, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	461a      	mov	r2, r3
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	f004 fb6b 	bl	8007002 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	425b      	negs	r3, r3
 8002936:	441a      	add	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d207      	bcs.n	8002958 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	425b      	negs	r3, r3
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d105      	bne.n	800296a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3b01      	subs	r3, #1
 8002968:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002972:	697b      	ldr	r3, [r7, #20]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	441a      	add	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d303      	bcc.n	80029b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68d9      	ldr	r1, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	461a      	mov	r2, r3
 80029ba:	6838      	ldr	r0, [r7, #0]
 80029bc:	f004 fb21 	bl	8007002 <memcpy>
    }
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029d0:	f001 fc00 	bl	80041d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029dc:	e011      	b.n	8002a02 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3324      	adds	r3, #36	; 0x24
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fc98 	bl	8003320 <xTaskRemoveFromEventList>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80029f6:	f000 fd73 	bl	80034e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	dce9      	bgt.n	80029de <prvUnlockQueue+0x16>
 8002a0a:	e000      	b.n	8002a0e <prvUnlockQueue+0x46>
                        break;
 8002a0c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a16:	f001 fc0b 	bl	8004230 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a1a:	f001 fbdb 	bl	80041d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a24:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a26:	e011      	b.n	8002a4c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3310      	adds	r3, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fc73 	bl	8003320 <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a40:	f000 fd4e 	bl	80034e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	dce9      	bgt.n	8002a28 <prvUnlockQueue+0x60>
 8002a54:	e000      	b.n	8002a58 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a56:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a60:	f001 fbe6 	bl	8004230 <vPortExitCritical>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a74:	f001 fbae 	bl	80041d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e001      	b.n	8002a8a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a8a:	f001 fbd1 	bl	8004230 <vPortExitCritical>

    return xReturn;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aa0:	f001 fb98 	bl	80041d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d102      	bne.n	8002ab6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e001      	b.n	8002aba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002aba:	f001 fbb9 	bl	8004230 <vPortExitCritical>

    return xReturn;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e01e      	b.n	8002b16 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <vQueueAddToRegistry+0x5c>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d115      	bne.n	8002b10 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ae4:	490f      	ldr	r1, [pc, #60]	; (8002b24 <vQueueAddToRegistry+0x5c>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <vQueueAddToRegistry+0x5c>)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 f8c3 	bl	8006c88 <SEGGER_SYSVIEW_ShrinkId>
 8002b02:	4601      	mov	r1, r0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	2071      	movs	r0, #113	; 0x71
 8002b0a:	f003 fad7 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002b0e:	e005      	b.n	8002b1c <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3301      	adds	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b07      	cmp	r3, #7
 8002b1a:	d9dd      	bls.n	8002ad8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2001442c 	.word	0x2001442c

08002b28 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b38:	f001 fb4c 	bl	80041d4 <vPortEnterCritical>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b48:	d103      	bne.n	8002b52 <vQueueWaitForMessageRestricted+0x2a>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5e:	d103      	bne.n	8002b68 <vQueueWaitForMessageRestricted+0x40>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b68:	f001 fb62 	bl	8004230 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3324      	adds	r3, #36	; 0x24
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fba1 	bl	80032c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff20 	bl	80029c8 <prvUnlockQueue>
    }
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	; 0x30
 8002b94:	af04      	add	r7, sp, #16
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fc35 	bl	8004414 <pvPortMalloc>
 8002baa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00e      	beq.n	8002bd0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bb2:	2058      	movs	r0, #88	; 0x58
 8002bb4:	f001 fc2e 	bl	8004414 <pvPortMalloc>
 8002bb8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc6:	e005      	b.n	8002bd4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f001 fcff 	bl	80045cc <vPortFree>
 8002bce:	e001      	b.n	8002bd4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d013      	beq.n	8002c02 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f80e 	bl	8002c12 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bf6:	69f8      	ldr	r0, [r7, #28]
 8002bf8:	f000 f8a0 	bl	8002d3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e002      	b.n	8002c08 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c06:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c08:	69bb      	ldr	r3, [r7, #24]
    }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	21a5      	movs	r1, #165	; 0xa5
 8002c2c:	f004 f9f4 	bl	8007018 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f023 0307 	bic.w	r3, r3, #7
 8002c48:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <prvInitialiseNewTask+0x56>
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e7fe      	b.n	8002c66 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01f      	beq.n	8002cae <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e012      	b.n	8002c9a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	7819      	ldrb	r1, [r3, #0]
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	3334      	adds	r3, #52	; 0x34
 8002c84:	460a      	mov	r2, r1
 8002c86:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d9e9      	bls.n	8002c74 <prvInitialiseNewTask+0x62>
 8002ca0:	e000      	b.n	8002ca4 <prvInitialiseNewTask+0x92>
            {
                break;
 8002ca2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cac:	e003      	b.n	8002cb6 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d901      	bls.n	8002cc0 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2200      	movs	r2, #0
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f9a6 	bl	8002028 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	3318      	adds	r3, #24
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f9a1 	bl	8002028 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	f1c3 0205 	rsb	r2, r3, #5
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	3350      	adds	r3, #80	; 0x50
 8002d00:	2204      	movs	r2, #4
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 f987 	bl	8007018 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	3354      	adds	r3, #84	; 0x54
 8002d0e:	2201      	movs	r2, #1
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 f980 	bl	8007018 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	69b8      	ldr	r0, [r7, #24]
 8002d1e:	f001 f8b7 	bl	8003e90 <pxPortInitialiseStack>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d44:	f001 fa46 	bl	80041d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <prvAddNewTaskToReadyList+0xe4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <prvAddNewTaskToReadyList+0xe4>)
 8002d50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <prvAddNewTaskToReadyList+0xe8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d5a:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <prvAddNewTaskToReadyList+0xe8>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <prvAddNewTaskToReadyList+0xe4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d68:	f000 fbd8 	bl	800351c <prvInitialiseTaskLists>
 8002d6c:	e00d      	b.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <prvAddNewTaskToReadyList+0xec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <prvAddNewTaskToReadyList+0xe8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d802      	bhi.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <prvAddNewTaskToReadyList+0xe8>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <prvAddNewTaskToReadyList+0xf0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <prvAddNewTaskToReadyList+0xf0>)
 8002d92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <prvAddNewTaskToReadyList+0xf0>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <prvAddNewTaskToReadyList+0x94>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fe49 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskCreate>
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	461d      	mov	r5, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	1ae3      	subs	r3, r4, r3
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	462b      	mov	r3, r5
 8002dcc:	f001 fdc2 	bl	8004954 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 feb6 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <prvAddNewTaskToReadyList+0xf4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <prvAddNewTaskToReadyList+0xf4>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <prvAddNewTaskToReadyList+0xf8>)
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7ff f91e 	bl	8002042 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e06:	f001 fa13 	bl	8004230 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <prvAddNewTaskToReadyList+0xec>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <prvAddNewTaskToReadyList+0xe8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000174 	.word	0x20000174
 8002e24:	2000009c 	.word	0x2000009c
 8002e28:	20000180 	.word	0x20000180
 8002e2c:	20000190 	.word	0x20000190
 8002e30:	2000017c 	.word	0x2000017c
 8002e34:	200000a0 	.word	0x200000a0

08002e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <vTaskStartScheduler+0xa0>)
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	2282      	movs	r2, #130	; 0x82
 8002e4a:	4924      	ldr	r1, [pc, #144]	; (8002edc <vTaskStartScheduler+0xa4>)
 8002e4c:	4824      	ldr	r0, [pc, #144]	; (8002ee0 <vTaskStartScheduler+0xa8>)
 8002e4e:	f7ff fe9f 	bl	8002b90 <xTaskCreate>
 8002e52:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e5a:	f000 fd0b 	bl	8003874 <xTimerCreateTimerTask>
 8002e5e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d123      	bne.n	8002eae <vTaskStartScheduler+0x76>
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <vTaskStartScheduler+0xac>)
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e7e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <vTaskStartScheduler+0xb0>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e86:	4b19      	ldr	r3, [pc, #100]	; (8002eec <vTaskStartScheduler+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <vTaskStartScheduler+0xb8>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <vTaskStartScheduler+0xa0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d102      	bne.n	8002e9e <vTaskStartScheduler+0x66>
 8002e98:	f003 fdb4 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
 8002e9c:	e004      	b.n	8002ea8 <vTaskStartScheduler+0x70>
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <vTaskStartScheduler+0xb8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fe0c 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ea8:	f001 f87c 	bl	8003fa4 <xPortStartScheduler>
 8002eac:	e00d      	b.n	8002eca <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb4:	d109      	bne.n	8002eca <vTaskStartScheduler+0x92>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e7fe      	b.n	8002ec8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <vTaskStartScheduler+0xbc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000198 	.word	0x20000198
 8002edc:	08007898 	.word	0x08007898
 8002ee0:	080034f9 	.word	0x080034f9
 8002ee4:	20000194 	.word	0x20000194
 8002ee8:	20000180 	.word	0x20000180
 8002eec:	20000178 	.word	0x20000178
 8002ef0:	2000009c 	.word	0x2000009c
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002f04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	2000019c 	.word	0x2000019c

08002f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <xTaskResumeAll+0x104>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <xTaskResumeAll+0x2a>
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	e7fe      	b.n	8002f3c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f3e:	f001 f949 	bl	80041d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f42:	4b35      	ldr	r3, [pc, #212]	; (8003018 <xTaskResumeAll+0x104>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a33      	ldr	r2, [pc, #204]	; (8003018 <xTaskResumeAll+0x104>)
 8002f4a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <xTaskResumeAll+0x104>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d159      	bne.n	8003008 <xTaskResumeAll+0xf4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <xTaskResumeAll+0x108>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d055      	beq.n	8003008 <xTaskResumeAll+0xf4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f5c:	e032      	b.n	8002fc4 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f5e:	4b30      	ldr	r3, [pc, #192]	; (8003020 <xTaskResumeAll+0x10c>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f8c6 	bl	80020fc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f8c1 	bl	80020fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fde1 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <xTaskResumeAll+0x110>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <xTaskResumeAll+0x110>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <xTaskResumeAll+0x114>)
 8002fa2:	441a      	add	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7ff f849 	bl	8002042 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <xTaskResumeAll+0x118>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <xTaskResumeAll+0x11c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <xTaskResumeAll+0x10c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1c8      	bne.n	8002f5e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fd2:	f000 fb1f 	bl	8003614 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <xTaskResumeAll+0x120>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fe2:	f000 f84b 	bl	800307c <xTaskIncrementTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <xTaskResumeAll+0x11c>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f1      	bne.n	8002fe2 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <xTaskResumeAll+0x120>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <xTaskResumeAll+0x11c>)
 8003006:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003008:	f001 f912 	bl	8004230 <vPortExitCritical>

    return xAlreadyYielded;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000019c 	.word	0x2000019c
 800301c:	20000174 	.word	0x20000174
 8003020:	20000134 	.word	0x20000134
 8003024:	2000017c 	.word	0x2000017c
 8003028:	200000a0 	.word	0x200000a0
 800302c:	2000009c 	.word	0x2000009c
 8003030:	20000188 	.word	0x20000188
 8003034:	20000184 	.word	0x20000184

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <xTaskGetTickCount+0x1c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000178 	.word	0x20000178

08003058 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800305e:	f001 f99b 	bl	8004398 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <xTaskGetTickCountFromISR+0x20>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800306c:	683b      	ldr	r3, [r7, #0]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000178 	.word	0x20000178

0800307c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003086:	4b40      	ldr	r3, [pc, #256]	; (8003188 <xTaskIncrementTick+0x10c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d172      	bne.n	8003174 <xTaskIncrementTick+0xf8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <xTaskIncrementTick+0x110>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003096:	4a3d      	ldr	r2, [pc, #244]	; (800318c <xTaskIncrementTick+0x110>)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <xTaskIncrementTick+0x66>
        {
            taskSWITCH_DELAYED_LISTS();
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <xTaskIncrementTick+0x114>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <xTaskIncrementTick+0x44>
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	e7fe      	b.n	80030be <xTaskIncrementTick+0x42>
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <xTaskIncrementTick+0x114>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <xTaskIncrementTick+0x118>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <xTaskIncrementTick+0x114>)
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4a31      	ldr	r2, [pc, #196]	; (8003194 <xTaskIncrementTick+0x118>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <xTaskIncrementTick+0x11c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <xTaskIncrementTick+0x11c>)
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	f000 fa99 	bl	8003614 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <xTaskIncrementTick+0x120>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d348      	bcc.n	800317e <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <xTaskIncrementTick+0x114>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <xTaskIncrementTick+0x84>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <xTaskIncrementTick+0x120>)
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030fc:	601a      	str	r2, [r3, #0]
                    break;
 80030fe:	e03e      	b.n	800317e <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <xTaskIncrementTick+0x114>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d203      	bcs.n	8003120 <xTaskIncrementTick+0xa4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <xTaskIncrementTick+0x120>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800311e:	e02e      	b.n	800317e <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ffe9 	bl	80020fc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <xTaskIncrementTick+0xc0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3318      	adds	r3, #24
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe ffe0 	bl	80020fc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fd00 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <xTaskIncrementTick+0x124>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <xTaskIncrementTick+0x124>)
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <xTaskIncrementTick+0x128>)
 8003164:	441a      	add	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f7fe ff68 	bl	8002042 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003172:	e7bb      	b.n	80030ec <xTaskIncrementTick+0x70>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <xTaskIncrementTick+0x12c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <xTaskIncrementTick+0x12c>)
 800317c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800317e:	697b      	ldr	r3, [r7, #20]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	2000019c 	.word	0x2000019c
 800318c:	20000178 	.word	0x20000178
 8003190:	2000012c 	.word	0x2000012c
 8003194:	20000130 	.word	0x20000130
 8003198:	2000018c 	.word	0x2000018c
 800319c:	20000194 	.word	0x20000194
 80031a0:	2000017c 	.word	0x2000017c
 80031a4:	200000a0 	.word	0x200000a0
 80031a8:	20000184 	.word	0x20000184

080031ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <vTaskSwitchContext+0xb8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <vTaskSwitchContext+0xbc>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031c0:	e04c      	b.n	800325c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80031c2:	4b29      	ldr	r3, [pc, #164]	; (8003268 <vTaskSwitchContext+0xbc>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <vTaskSwitchContext+0xc0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f1c3 031f 	rsb	r3, r3, #31
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	4924      	ldr	r1, [pc, #144]	; (8003270 <vTaskSwitchContext+0xc4>)
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <vTaskSwitchContext+0x5a>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e7fe      	b.n	8003204 <vTaskSwitchContext+0x58>
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <vTaskSwitchContext+0xc4>)
 8003212:	4413      	add	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3308      	adds	r3, #8
 8003228:	429a      	cmp	r2, r3
 800322a:	d104      	bne.n	8003236 <vTaskSwitchContext+0x8a>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <vTaskSwitchContext+0xc8>)
 800323e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <vTaskSwitchContext+0xc8>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <vTaskSwitchContext+0xcc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d102      	bne.n	8003252 <vTaskSwitchContext+0xa6>
 800324c:	f003 fbda 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
}
 8003250:	e004      	b.n	800325c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <vTaskSwitchContext+0xc8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fc32 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000019c 	.word	0x2000019c
 8003268:	20000188 	.word	0x20000188
 800326c:	2000017c 	.word	0x2000017c
 8003270:	200000a0 	.word	0x200000a0
 8003274:	2000009c 	.word	0x2000009c
 8003278:	20000198 	.word	0x20000198

0800327c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <vTaskPlaceOnEventList+0x24>
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e7fe      	b.n	800329e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <vTaskPlaceOnEventList+0x44>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3318      	adds	r3, #24
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fe feee 	bl	800208a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032ae:	2101      	movs	r1, #1
 80032b0:	6838      	ldr	r0, [r7, #0]
 80032b2:	f000 fa67 	bl	8003784 <prvAddCurrentTaskToDelayedList>
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000009c 	.word	0x2000009c

080032c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <vTaskPlaceOnEventListRestricted+0x26>
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e7fe      	b.n	80032e8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <vTaskPlaceOnEventListRestricted+0x58>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3318      	adds	r3, #24
 80032f0:	4619      	mov	r1, r3
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7fe fea5 	bl	8002042 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003302:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003304:	2024      	movs	r0, #36	; 0x24
 8003306:	f002 fe7f 	bl	8006008 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f000 fa39 	bl	8003784 <prvAddCurrentTaskToDelayedList>
    }
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2000009c 	.word	0x2000009c

08003320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <xTaskRemoveFromEventList+0x2a>
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e7fe      	b.n	8003348 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3318      	adds	r3, #24
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fed4 	bl	80020fc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <xTaskRemoveFromEventList+0xb4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d120      	bne.n	800339e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3304      	adds	r3, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fecb 	bl	80020fc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fbeb 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <xTaskRemoveFromEventList+0xb8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <xTaskRemoveFromEventList+0xb8>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <xTaskRemoveFromEventList+0xbc>)
 800338e:	441a      	add	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fe53 	bl	8002042 <vListInsertEnd>
 800339c:	e005      	b.n	80033aa <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	3318      	adds	r3, #24
 80033a2:	4619      	mov	r1, r3
 80033a4:	480e      	ldr	r0, [pc, #56]	; (80033e0 <xTaskRemoveFromEventList+0xc0>)
 80033a6:	f7fe fe4c 	bl	8002042 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <xTaskRemoveFromEventList+0xc4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d905      	bls.n	80033c4 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <xTaskRemoveFromEventList+0xc8>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e001      	b.n	80033c8 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80033c8:	697b      	ldr	r3, [r7, #20]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000019c 	.word	0x2000019c
 80033d8:	2000017c 	.word	0x2000017c
 80033dc:	200000a0 	.word	0x200000a0
 80033e0:	20000134 	.word	0x20000134
 80033e4:	2000009c 	.word	0x2000009c
 80033e8:	20000188 	.word	0x20000188

080033ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <vTaskInternalSetTimeOutState+0x24>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <vTaskInternalSetTimeOutState+0x28>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	2000018c 	.word	0x2000018c
 8003414:	20000178 	.word	0x20000178

08003418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <xTaskCheckForTimeOut+0x24>
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e7fe      	b.n	800343a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <xTaskCheckForTimeOut+0x3e>
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e7fe      	b.n	8003454 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003456:	f000 febd 	bl	80041d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <xTaskCheckForTimeOut+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003472:	d102      	bne.n	800347a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e026      	b.n	80034c8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <xTaskCheckForTimeOut+0xc4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d00a      	beq.n	800349c <xTaskCheckForTimeOut+0x84>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	429a      	cmp	r2, r3
 800348e:	d305      	bcc.n	800349c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e015      	b.n	80034c8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20b      	bcs.n	80034be <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ff9a 	bl	80033ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e004      	b.n	80034c8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034c8:	f000 feb2 	bl	8004230 <vPortExitCritical>

    return xReturn;
 80034cc:	69fb      	ldr	r3, [r7, #28]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000178 	.word	0x20000178
 80034dc:	2000018c 	.word	0x2000018c

080034e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <vTaskMissedYield+0x14>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	20000188 	.word	0x20000188

080034f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003500:	f000 f84c 	bl	800359c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <prvIdleTask+0x20>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003514:	e7f4      	b.n	8003500 <prvIdleTask+0x8>
 8003516:	bf00      	nop
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	e00c      	b.n	8003542 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <prvInitialiseTaskLists+0x60>)
 8003534:	4413      	add	r3, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fd56 	bl	8001fe8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3301      	adds	r3, #1
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d9ef      	bls.n	8003528 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003548:	480d      	ldr	r0, [pc, #52]	; (8003580 <prvInitialiseTaskLists+0x64>)
 800354a:	f7fe fd4d 	bl	8001fe8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <prvInitialiseTaskLists+0x68>)
 8003550:	f7fe fd4a 	bl	8001fe8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003554:	480c      	ldr	r0, [pc, #48]	; (8003588 <prvInitialiseTaskLists+0x6c>)
 8003556:	f7fe fd47 	bl	8001fe8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800355a:	480c      	ldr	r0, [pc, #48]	; (800358c <prvInitialiseTaskLists+0x70>)
 800355c:	f7fe fd44 	bl	8001fe8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003560:	480b      	ldr	r0, [pc, #44]	; (8003590 <prvInitialiseTaskLists+0x74>)
 8003562:	f7fe fd41 	bl	8001fe8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <prvInitialiseTaskLists+0x78>)
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <prvInitialiseTaskLists+0x64>)
 800356a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <prvInitialiseTaskLists+0x7c>)
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <prvInitialiseTaskLists+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200000a0 	.word	0x200000a0
 8003580:	20000104 	.word	0x20000104
 8003584:	20000118 	.word	0x20000118
 8003588:	20000134 	.word	0x20000134
 800358c:	20000148 	.word	0x20000148
 8003590:	20000160 	.word	0x20000160
 8003594:	2000012c 	.word	0x2000012c
 8003598:	20000130 	.word	0x20000130

0800359c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035a2:	e019      	b.n	80035d8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035a4:	f000 fe16 	bl	80041d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <prvCheckTasksWaitingTermination+0x4c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fda1 	bl	80020fc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <prvCheckTasksWaitingTermination+0x50>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <prvCheckTasksWaitingTermination+0x50>)
 80035c2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035cc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80035ce:	f000 fe2f 	bl	8004230 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f80e 	bl	80035f4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <prvCheckTasksWaitingTermination+0x54>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e1      	bne.n	80035a4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000148 	.word	0x20000148
 80035ec:	20000174 	.word	0x20000174
 80035f0:	2000015c 	.word	0x2000015c

080035f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4618      	mov	r0, r3
 8003602:	f000 ffe3 	bl	80045cc <vPortFree>
                vPortFree( pxTCB );
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 ffe0 	bl	80045cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvResetNextTaskUnblockTime+0x30>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <prvResetNextTaskUnblockTime+0x34>)
 8003624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003628:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800362a:	e005      	b.n	8003638 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <prvResetNextTaskUnblockTime+0x30>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <prvResetNextTaskUnblockTime+0x34>)
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000012c 	.word	0x2000012c
 8003648:	20000194 	.word	0x20000194

0800364c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <xTaskGetSchedulerState+0x34>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800365a:	2301      	movs	r3, #1
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e008      	b.n	8003672 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <xTaskGetSchedulerState+0x38>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003668:	2302      	movs	r3, #2
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e001      	b.n	8003672 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003672:	687b      	ldr	r3, [r7, #4]
    }
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000180 	.word	0x20000180
 8003684:	2000019c 	.word	0x2000019c

08003688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d066      	beq.n	800376c <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800369e:	4b36      	ldr	r3, [pc, #216]	; (8003778 <xTaskPriorityDisinherit+0xf0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d009      	beq.n	80036bc <xTaskPriorityDisinherit+0x34>
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e7fe      	b.n	80036ba <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <xTaskPriorityDisinherit+0x50>
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	e7fe      	b.n	80036d6 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d03e      	beq.n	800376c <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13a      	bne.n	800376c <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fcfe 	bl	80020fc <uxListRemove>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <xTaskPriorityDisinherit+0xf4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4013      	ands	r3, r2
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <xTaskPriorityDisinherit+0xf4>)
 800371a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4619      	mov	r1, r3
 8003720:	204a      	movs	r0, #74	; 0x4a
 8003722:	f002 fc8f 	bl	8006044 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f1c3 0205 	rsb	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	2201      	movs	r2, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <xTaskPriorityDisinherit+0xf4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	4a0c      	ldr	r2, [pc, #48]	; (800377c <xTaskPriorityDisinherit+0xf4>)
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4a09      	ldr	r2, [pc, #36]	; (8003780 <xTaskPriorityDisinherit+0xf8>)
 800375a:	441a      	add	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7fe fc6d 	bl	8002042 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800376c:	697b      	ldr	r3, [r7, #20]
    }
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000009c 	.word	0x2000009c
 800377c:	2000017c 	.word	0x2000017c
 8003780:	200000a0 	.word	0x200000a0

08003784 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800378e:	4b32      	ldr	r3, [pc, #200]	; (8003858 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fcae 	bl	80020fc <uxListRemove>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <prvAddCurrentTaskToDelayedList+0xdc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4013      	ands	r3, r2
 80037ba:	4a29      	ldr	r2, [pc, #164]	; (8003860 <prvAddCurrentTaskToDelayedList+0xdc>)
 80037bc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c4:	d110      	bne.n	80037e8 <prvAddCurrentTaskToDelayedList+0x64>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80037cc:	4b23      	ldr	r3, [pc, #140]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	211b      	movs	r1, #27
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 f9f8 	bl	8006bc8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4820      	ldr	r0, [pc, #128]	; (8003864 <prvAddCurrentTaskToDelayedList+0xe0>)
 80037e2:	f7fe fc2e 	bl	8002042 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037e6:	e032      	b.n	800384e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d20f      	bcs.n	8003820 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2104      	movs	r1, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f003 f9de 	bl	8006bc8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe4>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7fe fc36 	bl	800208a <vListInsert>
}
 800381e:	e016      	b.n	800384e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2104      	movs	r1, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f003 f9ce 	bl	8006bc8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <prvAddCurrentTaskToDelayedList+0xe8>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe fc26 	bl	800208a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <prvAddCurrentTaskToDelayedList+0xec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d202      	bcs.n	800384e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <prvAddCurrentTaskToDelayedList+0xec>)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000178 	.word	0x20000178
 800385c:	2000009c 	.word	0x2000009c
 8003860:	2000017c 	.word	0x2000017c
 8003864:	20000160 	.word	0x20000160
 8003868:	20000130 	.word	0x20000130
 800386c:	2000012c 	.word	0x2000012c
 8003870:	20000194 	.word	0x20000194

08003874 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800387e:	f000 fad1 	bl	8003e24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <xTimerCreateTimerTask+0x54>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <xTimerCreateTimerTask+0x58>)
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003898:	490d      	ldr	r1, [pc, #52]	; (80038d0 <xTimerCreateTimerTask+0x5c>)
 800389a:	480e      	ldr	r0, [pc, #56]	; (80038d4 <xTimerCreateTimerTask+0x60>)
 800389c:	f7ff f978 	bl	8002b90 <xTaskCreate>
 80038a0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <xTimerCreateTimerTask+0x48>
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	e7fe      	b.n	80038ba <xTimerCreateTimerTask+0x46>
        return xReturn;
 80038bc:	687b      	ldr	r3, [r7, #4]
    }
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200001d0 	.word	0x200001d0
 80038cc:	200001d4 	.word	0x200001d4
 80038d0:	080078a0 	.word	0x080078a0
 80038d4:	08003a09 	.word	0x08003a09

080038d8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <xTimerGenericCommand+0x2c>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	e7fe      	b.n	8003902 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <xTimerGenericCommand+0x94>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02a      	beq.n	8003962 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	dc18      	bgt.n	8003950 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800391e:	f7ff fe95 	bl	800364c <xTaskGetSchedulerState>
 8003922:	4603      	mov	r3, r0
 8003924:	2b02      	cmp	r3, #2
 8003926:	d109      	bne.n	800393c <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <xTimerGenericCommand+0x94>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	f107 0114 	add.w	r1, r7, #20
 8003930:	2300      	movs	r3, #0
 8003932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003934:	f7fe fcec 	bl	8002310 <xQueueGenericSend>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24
 800393a:	e012      	b.n	8003962 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <xTimerGenericCommand+0x94>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	f107 0114 	add.w	r1, r7, #20
 8003944:	2300      	movs	r3, #0
 8003946:	2200      	movs	r2, #0
 8003948:	f7fe fce2 	bl	8002310 <xQueueGenericSend>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24
 800394e:	e008      	b.n	8003962 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <xTimerGenericCommand+0x94>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	f107 0114 	add.w	r1, r7, #20
 8003958:	2300      	movs	r3, #0
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	f7fe fde2 	bl	8002524 <xQueueGenericSendFromISR>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200001d0 	.word	0x200001d0

08003970 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <prvProcessExpiredTimer+0x94>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fbb7 	bl	80020fc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d021      	beq.n	80039e0 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	18d1      	adds	r1, r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f000 f8d1 	bl	8003b50 <prvInsertTimerInActiveList>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01e      	beq.n	80039f2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039b4:	2300      	movs	r3, #0
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2300      	movs	r3, #0
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	2100      	movs	r1, #0
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f7ff ff8a 	bl	80038d8 <xTimerGenericCommand>
 80039c4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d112      	bne.n	80039f2 <prvProcessExpiredTimer+0x82>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e7fe      	b.n	80039de <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	4798      	blx	r3
    }
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200001c8 	.word	0x200001c8

08003a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f857 	bl	8003ac8 <prvGetNextExpireTime>
 8003a1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f803 	bl	8003a2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a26:	f000 f8d5 	bl	8003bd4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a2a:	e7f1      	b.n	8003a10 <prvTimerTask+0x8>

08003a2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a36:	f7ff fa5f 	bl	8002ef8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f866 	bl	8003b10 <prvSampleTimeNow>
 8003a44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d130      	bne.n	8003aae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <prvProcessTimerOrBlockTask+0x3c>
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d806      	bhi.n	8003a68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a5a:	f7ff fa5b 	bl	8002f14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff85 	bl	8003970 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a66:	e024      	b.n	8003ab2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <prvProcessTimerOrBlockTask+0x90>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <prvProcessTimerOrBlockTask+0x50>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <prvProcessTimerOrBlockTask+0x52>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <prvProcessTimerOrBlockTask+0x94>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f7ff f84b 	bl	8002b28 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a92:	f7ff fa3f 	bl	8002f14 <xTaskResumeAll>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <prvProcessTimerOrBlockTask+0x98>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
    }
 8003aac:	e001      	b.n	8003ab2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003aae:	f7ff fa31 	bl	8002f14 <xTaskResumeAll>
    }
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200001cc 	.word	0x200001cc
 8003ac0:	200001d0 	.word	0x200001d0
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <prvGetNextExpireTime+0x44>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <prvGetNextExpireTime+0x16>
 8003ada:	2201      	movs	r2, #1
 8003adc:	e000      	b.n	8003ae0 <prvGetNextExpireTime+0x18>
 8003ade:	2200      	movs	r2, #0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <prvGetNextExpireTime+0x44>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e001      	b.n	8003afc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003afc:	68fb      	ldr	r3, [r7, #12]
    }
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200001c8 	.word	0x200001c8

08003b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b18:	f7ff fa8e 	bl	8003038 <xTaskGetTickCount>
 8003b1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <prvSampleTimeNow+0x3c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d205      	bcs.n	8003b34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b28:	f000 f918 	bl	8003d5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e002      	b.n	8003b3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <prvSampleTimeNow+0x3c>)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b40:	68fb      	ldr	r3, [r7, #12]
    }
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200001d8 	.word	0x200001d8

08003b50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d812      	bhi.n	8003b9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	1ad2      	subs	r2, r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e01b      	b.n	8003bc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <prvInsertTimerInActiveList+0x7c>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f7fe fa78 	bl	800208a <vListInsert>
 8003b9a:	e012      	b.n	8003bc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d206      	bcs.n	8003bb2 <prvInsertTimerInActiveList+0x62>
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e007      	b.n	8003bc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <prvInsertTimerInActiveList+0x80>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fe fa64 	bl	800208a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003bc2:	697b      	ldr	r3, [r7, #20]
    }
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200001cc 	.word	0x200001cc
 8003bd0:	200001c8 	.word	0x200001c8

08003bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bda:	e0ac      	b.n	8003d36 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f2c0 80a8 	blt.w	8003d34 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fa81 	bl	80020fc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff87 	bl	8003b10 <prvSampleTimeNow>
 8003c02:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	f200 8095 	bhi.w	8003d36 <prvProcessReceivedCommands+0x162>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <prvProcessReceivedCommands+0x40>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c3d 	.word	0x08003c3d
 8003c20:	08003caf 	.word	0x08003caf
 8003c24:	08003cc3 	.word	0x08003cc3
 8003c28:	08003d0b 	.word	0x08003d0b
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c3d 	.word	0x08003c3d
 8003c34:	08003caf 	.word	0x08003caf
 8003c38:	08003cc3 	.word	0x08003cc3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	18d1      	adds	r1, r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c5c:	f7ff ff78 	bl	8003b50 <prvInsertTimerInActiveList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d067      	beq.n	8003d36 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	441a      	add	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c8e:	f7ff fe23 	bl	80038d8 <xTimerGenericCommand>
 8003c92:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d14d      	bne.n	8003d36 <prvProcessReceivedCommands+0x162>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e7fe      	b.n	8003cac <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003cc0:	e039      	b.n	8003d36 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <prvProcessReceivedCommands+0x122>
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e7fe      	b.n	8003cf4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	18d1      	adds	r1, r2, r3
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d04:	f7ff ff24 	bl	8003b50 <prvInsertTimerInActiveList>
                        break;
 8003d08:	e015      	b.n	8003d36 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1a:	f000 fc57 	bl	80045cc <vPortFree>
 8003d1e:	e00a      	b.n	8003d36 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d32:	e000      	b.n	8003d36 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <prvProcessReceivedCommands+0x184>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f107 0108 	add.w	r1, r7, #8
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fca9 	bl	8002698 <xQueueReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f47f af47 	bne.w	8003bdc <prvProcessReceivedCommands+0x8>
        }
    }
 8003d4e:	bf00      	nop
 8003d50:	3728      	adds	r7, #40	; 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200001d0 	.word	0x200001d0

08003d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d62:	e047      	b.n	8003df4 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe f9bd 	bl	80020fc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02d      	beq.n	8003df4 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d90e      	bls.n	8003dc8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f7fe f962 	bl	800208a <vListInsert>
 8003dc6:	e015      	b.n	8003df4 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fd80 	bl	80038d8 <xTimerGenericCommand>
 8003dd8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <prvSwitchTimerLists+0x98>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	e7fe      	b.n	8003df2 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1b2      	bne.n	8003d64 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <prvSwitchTimerLists+0xc4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <prvSwitchTimerLists+0xc0>)
 8003e0a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <prvSwitchTimerLists+0xc4>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	6013      	str	r3, [r2, #0]
    }
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200001c8 	.word	0x200001c8
 8003e20:	200001cc 	.word	0x200001cc

08003e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e28:	f000 f9d4 	bl	80041d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <prvCheckForValidListAndQueue+0x54>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11d      	bne.n	8003e70 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e34:	4811      	ldr	r0, [pc, #68]	; (8003e7c <prvCheckForValidListAndQueue+0x58>)
 8003e36:	f7fe f8d7 	bl	8001fe8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e3a:	4811      	ldr	r0, [pc, #68]	; (8003e80 <prvCheckForValidListAndQueue+0x5c>)
 8003e3c:	f7fe f8d4 	bl	8001fe8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <prvCheckForValidListAndQueue+0x60>)
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <prvCheckForValidListAndQueue+0x58>)
 8003e44:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <prvCheckForValidListAndQueue+0x64>)
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <prvCheckForValidListAndQueue+0x5c>)
 8003e4a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	210c      	movs	r1, #12
 8003e50:	200a      	movs	r0, #10
 8003e52:	f7fe f9d7 	bl	8002204 <xQueueGenericCreate>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <prvCheckForValidListAndQueue+0x54>)
 8003e5a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <prvCheckForValidListAndQueue+0x54>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <prvCheckForValidListAndQueue+0x54>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4908      	ldr	r1, [pc, #32]	; (8003e8c <prvCheckForValidListAndQueue+0x68>)
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fe2c 	bl	8002ac8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e70:	f000 f9de 	bl	8004230 <vPortExitCritical>
    }
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200001d0 	.word	0x200001d0
 8003e7c:	200001a0 	.word	0x200001a0
 8003e80:	200001b4 	.word	0x200001b4
 8003e84:	200001c8 	.word	0x200001c8
 8003e88:	200001cc 	.word	0x200001cc
 8003e8c:	080078a8 	.word	0x080078a8

08003e90 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b04      	subs	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <pxPortInitialiseStack+0x64>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b14      	subs	r3, #20
 8003eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b04      	subs	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f06f 0202 	mvn.w	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b20      	subs	r3, #32
 8003ee4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	08003ef9 	.word	0x08003ef9

08003ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <prvTaskExitError+0x50>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0a:	d009      	beq.n	8003f20 <prvTaskExitError+0x28>
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e7fe      	b.n	8003f1e <prvTaskExitError+0x26>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f32:	bf00      	nop
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0fc      	beq.n	8003f34 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000010 	.word	0x20000010
 8003f4c:	00000000 	.word	0x00000000

08003f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst2>:
 8003f70:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <prvPortStartFirstTask+0x24>)
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f380 8808 	msr	MSP, r0
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8814 	msr	CONTROL, r0
 8003f8a:	b662      	cpsie	i
 8003f8c:	b661      	cpsie	f
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	df00      	svc	0
 8003f98:	bf00      	nop
 8003f9a:	0000      	.short	0x0000
 8003f9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop

08003fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003faa:	4b44      	ldr	r3, [pc, #272]	; (80040bc <xPortStartScheduler+0x118>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a44      	ldr	r2, [pc, #272]	; (80040c0 <xPortStartScheduler+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d109      	bne.n	8003fc8 <xPortStartScheduler+0x24>
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e7fe      	b.n	8003fc6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <xPortStartScheduler+0x118>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3d      	ldr	r2, [pc, #244]	; (80040c4 <xPortStartScheduler+0x120>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d109      	bne.n	8003fe6 <xPortStartScheduler+0x42>
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e7fe      	b.n	8003fe4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fe6:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <xPortStartScheduler+0x124>)
 8003fe8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4b30      	ldr	r3, [pc, #192]	; (80040cc <xPortStartScheduler+0x128>)
 800400c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <xPortStartScheduler+0x12c>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004014:	e009      	b.n	800402a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <xPortStartScheduler+0x12c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <xPortStartScheduler+0x12c>)
 800401e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d0ef      	beq.n	8004016 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <xPortStartScheduler+0x12c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	d009      	beq.n	8004056 <xPortStartScheduler+0xb2>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	e7fe      	b.n	8004054 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <xPortStartScheduler+0x12c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <xPortStartScheduler+0x12c>)
 800405e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <xPortStartScheduler+0x12c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <xPortStartScheduler+0x12c>)
 800406a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <xPortStartScheduler+0x130>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <xPortStartScheduler+0x130>)
 800407a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800407e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <xPortStartScheduler+0x130>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <xPortStartScheduler+0x130>)
 8004086:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800408c:	f000 f954 	bl	8004338 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <xPortStartScheduler+0x134>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004096:	f000 f973 	bl	8004380 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <xPortStartScheduler+0x138>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a0f      	ldr	r2, [pc, #60]	; (80040dc <xPortStartScheduler+0x138>)
 80040a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040a6:	f7ff ff67 	bl	8003f78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040aa:	f7ff f87f 	bl	80031ac <vTaskSwitchContext>
    prvTaskExitError();
 80040ae:	f7ff ff23 	bl	8003ef8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	410fc271 	.word	0x410fc271
 80040c4:	410fc270 	.word	0x410fc270
 80040c8:	e000e400 	.word	0xe000e400
 80040cc:	200001dc 	.word	0x200001dc
 80040d0:	200001e0 	.word	0x200001e0
 80040d4:	e000ed20 	.word	0xe000ed20
 80040d8:	20000010 	.word	0x20000010
 80040dc:	e000ef34 	.word	0xe000ef34

080040e0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <vInitPrioGroupValue+0xdc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a35      	ldr	r2, [pc, #212]	; (80041c0 <vInitPrioGroupValue+0xe0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d109      	bne.n	8004104 <vInitPrioGroupValue+0x24>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e7fe      	b.n	8004102 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <vInitPrioGroupValue+0xdc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2e      	ldr	r2, [pc, #184]	; (80041c4 <vInitPrioGroupValue+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d109      	bne.n	8004122 <vInitPrioGroupValue+0x42>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e7fe      	b.n	8004120 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <vInitPrioGroupValue+0xe8>)
 8004124:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <vInitPrioGroupValue+0xec>)
 8004148:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 800414c:	2207      	movs	r2, #7
 800414e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004150:	e009      	b.n	8004166 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 800415a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d0ef      	beq.n	8004152 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1c3 0307 	rsb	r3, r3, #7
 800417a:	2b04      	cmp	r3, #4
 800417c:	d009      	beq.n	8004192 <vInitPrioGroupValue+0xb2>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	e7fe      	b.n	8004190 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 800419a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <vInitPrioGroupValue+0xf0>)
 80041a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	410fc271 	.word	0x410fc271
 80041c4:	410fc270 	.word	0x410fc270
 80041c8:	e000e400 	.word	0xe000e400
 80041cc:	200001dc 	.word	0x200001dc
 80041d0:	200001e0 	.word	0x200001e0

080041d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <vPortEnterCritical+0x54>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <vPortEnterCritical+0x54>)
 80041f4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <vPortEnterCritical+0x54>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10e      	bne.n	800421c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <vPortEnterCritical+0x58>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <vPortEnterCritical+0x48>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	e7fe      	b.n	800421a <vPortEnterCritical+0x46>
    }
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000010 	.word	0x20000010
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <vPortExitCritical+0x4c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <vPortExitCritical+0x22>
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	e7fe      	b.n	8004250 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <vPortExitCritical+0x4c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <vPortExitCritical+0x4c>)
 800425a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <vPortExitCritical+0x4c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <vPortExitCritical+0x3e>
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000010 	.word	0x20000010

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f01e 0f10 	tst.w	lr, #16
 8004290:	bf08      	it	eq
 8004292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	6010      	str	r0, [r2, #0]
 800429c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042a4:	f380 8811 	msr	BASEPRI, r0
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f7fe ff7c 	bl	80031ac <vTaskSwitchContext>
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f380 8811 	msr	BASEPRI, r0
 80042bc:	bc09      	pop	{r0, r3}
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c6:	f01e 0f10 	tst.w	lr, #16
 80042ca:	bf08      	it	eq
 80042cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042d0:	f380 8809 	msr	PSP, r0
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst>:
 80042e0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
        __asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004300:	f002 fb06 	bl	8006910 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004304:	f7fe feba 	bl	800307c <xTaskIncrementTick>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800430e:	f002 fb5d 	bl	80069cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <SysTick_Handler+0x4c>)
 8004314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e001      	b.n	8004320 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800431c:	f002 fb3a 	bl	8006994 <SEGGER_SYSVIEW_RecordExitISR>
 8004320:	2300      	movs	r3, #0
 8004322:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <vPortSetupTimerInterrupt+0x34>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortSetupTimerInterrupt+0x38>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <vPortSetupTimerInterrupt+0x3c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <vPortSetupTimerInterrupt+0x40>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <vPortSetupTimerInterrupt+0x44>)
 8004356:	3b01      	subs	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <vPortSetupTimerInterrupt+0x34>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e010 	.word	0xe000e010
 8004370:	e000e018 	.word	0xe000e018
 8004374:	20000000 	.word	0x20000000
 8004378:	10624dd3 	.word	0x10624dd3
 800437c:	e000e014 	.word	0xe000e014

08004380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004390 <vPortEnableVFP+0x10>
 8004384:	6801      	ldr	r1, [r0, #0]
 8004386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800438a:	6001      	str	r1, [r0, #0]
 800438c:	4770      	bx	lr
 800438e:	0000      	.short	0x0000
 8004390:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800439e:	f3ef 8305 	mrs	r3, IPSR
 80043a2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	d913      	bls.n	80043d2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <vPortValidateInterruptPriority+0x6c>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <vPortValidateInterruptPriority+0x70>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	7afa      	ldrb	r2, [r7, #11]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d209      	bcs.n	80043d2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e7fe      	b.n	80043d0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <vPortValidateInterruptPriority+0x74>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <vPortValidateInterruptPriority+0x78>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d909      	bls.n	80043f6 <vPortValidateInterruptPriority+0x5e>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	e7fe      	b.n	80043f4 <vPortValidateInterruptPriority+0x5c>
    }
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e000e3f0 	.word	0xe000e3f0
 8004408:	200001dc 	.word	0x200001dc
 800440c:	e000ed0c 	.word	0xe000ed0c
 8004410:	200001e0 	.word	0x200001e0

08004414 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004420:	f7fe fd6a 	bl	8002ef8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004424:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <pvPortMalloc+0x1a0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800442c:	f000 f92e 	bl	800468c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <pvPortMalloc+0x1a4>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	f040 80a5 	bne.w	8004588 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02c      	beq.n	800449e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004444:	2208      	movs	r2, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d226      	bcs.n	800449e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004450:	2208      	movs	r2, #8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d020      	beq.n	80044a4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f023 0307 	bic.w	r3, r3, #7
 8004468:	3308      	adds	r3, #8
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d213      	bcs.n	8004498 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f023 0307 	bic.w	r3, r3, #7
 8004476:	3308      	adds	r3, #8
 8004478:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <pvPortMalloc+0x90>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e7fe      	b.n	8004496 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800449c:	e002      	b.n	80044a4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e000      	b.n	80044a6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044a4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d06d      	beq.n	8004588 <pvPortMalloc+0x174>
 80044ac:	4b43      	ldr	r3, [pc, #268]	; (80045bc <pvPortMalloc+0x1a8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d868      	bhi.n	8004588 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80044b6:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <pvPortMalloc+0x1ac>)
 80044b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <pvPortMalloc+0x1ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c0:	e004      	b.n	80044cc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d903      	bls.n	80044de <pvPortMalloc+0xca>
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f1      	bne.n	80044c2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80044de:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <pvPortMalloc+0x1a0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d04f      	beq.n	8004588 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	4413      	add	r3, r2
 80044f0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	2308      	movs	r3, #8
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	429a      	cmp	r2, r3
 8004508:	d91e      	bls.n	8004548 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <pvPortMalloc+0x11c>
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e7fe      	b.n	800452e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f000 f904 	bl	8004750 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <pvPortMalloc+0x1a8>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <pvPortMalloc+0x1a8>)
 8004554:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <pvPortMalloc+0x1a8>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <pvPortMalloc+0x1b0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d203      	bcs.n	800456a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004562:	4b16      	ldr	r3, [pc, #88]	; (80045bc <pvPortMalloc+0x1a8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <pvPortMalloc+0x1b0>)
 8004568:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <pvPortMalloc+0x1a4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	431a      	orrs	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <pvPortMalloc+0x1b4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <pvPortMalloc+0x1b4>)
 8004586:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004588:	f7fe fcc4 	bl	8002f14 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <pvPortMalloc+0x196>
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e7fe      	b.n	80045a8 <pvPortMalloc+0x194>
    return pvReturn;
 80045aa:	69fb      	ldr	r3, [r7, #28]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20012dec 	.word	0x20012dec
 80045b8:	20012e00 	.word	0x20012e00
 80045bc:	20012df0 	.word	0x20012df0
 80045c0:	20012de4 	.word	0x20012de4
 80045c4:	20012df4 	.word	0x20012df4
 80045c8:	20012df8 	.word	0x20012df8

080045cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d04b      	beq.n	8004676 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80045de:	2308      	movs	r3, #8
 80045e0:	425b      	negs	r3, r3
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4413      	add	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <vPortFree+0xb4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <vPortFree+0x42>
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e7fe      	b.n	800460c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <vPortFree+0x5e>
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	e7fe      	b.n	8004628 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <vPortFree+0xb4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01e      	beq.n	8004676 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11a      	bne.n	8004676 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <vPortFree+0xb4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	43db      	mvns	r3, r3
 800464a:	401a      	ands	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004650:	f7fe fc52 	bl	8002ef8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <vPortFree+0xb8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4413      	add	r3, r2
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <vPortFree+0xb8>)
 8004660:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004662:	6938      	ldr	r0, [r7, #16]
 8004664:	f000 f874 	bl	8004750 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <vPortFree+0xbc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a06      	ldr	r2, [pc, #24]	; (8004688 <vPortFree+0xbc>)
 8004670:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004672:	f7fe fc4f 	bl	8002f14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20012e00 	.word	0x20012e00
 8004684:	20012df0 	.word	0x20012df0
 8004688:	20012dfc 	.word	0x20012dfc

0800468c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004692:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004696:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <prvHeapInit+0xac>)
 800469a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3307      	adds	r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <prvHeapInit+0xac>)
 80046bc:	4413      	add	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <prvHeapInit+0xb0>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <prvHeapInit+0xb0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4413      	add	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80046d8:	2208      	movs	r2, #8
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <prvHeapInit+0xb4>)
 80046ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <prvHeapInit+0xb4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <prvHeapInit+0xb4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <prvHeapInit+0xb4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <prvHeapInit+0xb8>)
 800471a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <prvHeapInit+0xbc>)
 8004722:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <prvHeapInit+0xc0>)
 8004726:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	200001e4 	.word	0x200001e4
 800473c:	20012de4 	.word	0x20012de4
 8004740:	20012dec 	.word	0x20012dec
 8004744:	20012df4 	.word	0x20012df4
 8004748:	20012df0 	.word	0x20012df0
 800474c:	20012e00 	.word	0x20012e00

08004750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <prvInsertBlockIntoFreeList+0xac>)
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e002      	b.n	8004764 <prvInsertBlockIntoFreeList+0x14>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d8f7      	bhi.n	800475e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d108      	bne.n	8004792 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	441a      	add	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d118      	bne.n	80047d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d00d      	beq.n	80047ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e008      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e003      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d002      	beq.n	80047ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20012de4 	.word	0x20012de4
 8004800:	20012dec 	.word	0x20012dec

08004804 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004808:	4803      	ldr	r0, [pc, #12]	; (8004818 <_cbSendSystemDesc+0x14>)
 800480a:	f002 f82d 	bl	8006868 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800480e:	4803      	ldr	r0, [pc, #12]	; (800481c <_cbSendSystemDesc+0x18>)
 8004810:	f002 f82a 	bl	8006868 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	080078b0 	.word	0x080078b0
 800481c:	080078f0 	.word	0x080078f0

08004820 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <SEGGER_SYSVIEW_Conf+0x20>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <SEGGER_SYSVIEW_Conf+0x20>)
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <SEGGER_SYSVIEW_Conf+0x24>)
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <SEGGER_SYSVIEW_Conf+0x28>)
 8004830:	f001 fb96 	bl	8005f60 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004834:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004838:	f001 fbd6 	bl	8005fe8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000000 	.word	0x20000000
 8004844:	08004805 	.word	0x08004805
 8004848:	08007990 	.word	0x08007990

0800484c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800484e:	b085      	sub	sp, #20
 8004850:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e034      	b.n	80048c2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004858:	491e      	ldr	r1, [pc, #120]	; (80048d4 <_cbSendTaskList+0x88>)
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	491a      	ldr	r1, [pc, #104]	; (80048d4 <_cbSendTaskList+0x88>)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3304      	adds	r3, #4
 8004878:	681c      	ldr	r4, [r3, #0]
 800487a:	4916      	ldr	r1, [pc, #88]	; (80048d4 <_cbSendTaskList+0x88>)
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3308      	adds	r3, #8
 800488a:	681d      	ldr	r5, [r3, #0]
 800488c:	4911      	ldr	r1, [pc, #68]	; (80048d4 <_cbSendTaskList+0x88>)
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	330c      	adds	r3, #12
 800489c:	681e      	ldr	r6, [r3, #0]
 800489e:	490d      	ldr	r1, [pc, #52]	; (80048d4 <_cbSendTaskList+0x88>)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3310      	adds	r3, #16
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	4633      	mov	r3, r6
 80048b4:	462a      	mov	r2, r5
 80048b6:	4621      	mov	r1, r4
 80048b8:	f000 f8b4 	bl	8004a24 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_cbSendTaskList+0x8c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3c5      	bcc.n	8004858 <_cbSendTaskList+0xc>
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	20012e04 	.word	0x20012e04
 80048d8:	20012ea4 	.word	0x20012ea4

080048dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80048e2:	f7fe fbb9 	bl	8003058 <xTaskGetTickCountFromISR>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f04f 0400 	mov.w	r4, #0
 80048ec:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80048f0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80048f4:	462b      	mov	r3, r5
 80048f6:	4634      	mov	r4, r6
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	0162      	lsls	r2, r4, #5
 8004902:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	460b      	mov	r3, r1
 800490a:	4614      	mov	r4, r2
 800490c:	1b5b      	subs	r3, r3, r5
 800490e:	eb64 0406 	sbc.w	r4, r4, r6
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	00a2      	lsls	r2, r4, #2
 800491c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004920:	0099      	lsls	r1, r3, #2
 8004922:	460b      	mov	r3, r1
 8004924:	4614      	mov	r4, r2
 8004926:	195b      	adds	r3, r3, r5
 8004928:	eb44 0406 	adc.w	r4, r4, r6
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	00e2      	lsls	r2, r4, #3
 8004936:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800493a:	00d9      	lsls	r1, r3, #3
 800493c:	460b      	mov	r3, r1
 800493e:	4614      	mov	r4, r2
 8004940:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004944:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004948:	4618      	mov	r0, r3
 800494a:	4621      	mov	r1, r4
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004954 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004962:	2205      	movs	r2, #5
 8004964:	492b      	ldr	r1, [pc, #172]	; (8004a14 <SYSVIEW_AddTask+0xc0>)
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	f002 fb3c 	bl	8006fe4 <memcmp>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04b      	beq.n	8004a0a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b07      	cmp	r3, #7
 8004978:	d903      	bls.n	8004982 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800497a:	4828      	ldr	r0, [pc, #160]	; (8004a1c <SYSVIEW_AddTask+0xc8>)
 800497c:	f002 fa84 	bl	8006e88 <SEGGER_SYSVIEW_Warn>
    return;
 8004980:	e044      	b.n	8004a0c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4926      	ldr	r1, [pc, #152]	; (8004a20 <SYSVIEW_AddTask+0xcc>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4921      	ldr	r1, [pc, #132]	; (8004a20 <SYSVIEW_AddTask+0xcc>)
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	3304      	adds	r3, #4
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	491b      	ldr	r1, [pc, #108]	; (8004a20 <SYSVIEW_AddTask+0xcc>)
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3308      	adds	r3, #8
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4916      	ldr	r1, [pc, #88]	; (8004a20 <SYSVIEW_AddTask+0xcc>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	330c      	adds	r3, #12
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4910      	ldr	r1, [pc, #64]	; (8004a20 <SYSVIEW_AddTask+0xcc>)
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3310      	adds	r3, #16
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <SYSVIEW_AddTask+0xc4>)
 80049f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f80e 	bl	8004a24 <SYSVIEW_SendTaskInfo>
 8004a08:	e000      	b.n	8004a0c <SYSVIEW_AddTask+0xb8>
    return;
 8004a0a:	bf00      	nop

}
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	08007900 	.word	0x08007900
 8004a18:	20012ea4 	.word	0x20012ea4
 8004a1c:	08007908 	.word	0x08007908
 8004a20:	20012e04 	.word	0x20012e04

08004a24 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	2214      	movs	r2, #20
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f002 faec 	bl	8007018 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fe0d 	bl	8006678 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <__NVIC_EnableIRQ>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db0b      	blt.n	8004a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4907      	ldr	r1, [pc, #28]	; (8004aa0 <__NVIC_EnableIRQ+0x38>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e100 	.word	0xe000e100

08004aa4 <__NVIC_SetPriority>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	; (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004afe:	f002 fa1f 	bl	8006f40 <SEGGER_SYSVIEW_IsStarted>
 8004b02:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004b0a:	f001 fc39 	bl	8006380 <SEGGER_SYSVIEW_Start>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <_cbOnUARTRx+0x3c>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d806      	bhi.n	8004b38 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <_cbOnUARTRx+0x3c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_cbOnUARTRx+0x3c>)
 8004b34:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004b36:	e009      	b.n	8004b4c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004b38:	f7ff ffde 	bl	8004af8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <_cbOnUARTRx+0x3c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	1dfb      	adds	r3, r7, #7
 8004b44:	2201      	movs	r2, #1
 8004b46:	4619      	mov	r1, r3
 8004b48:	f000 fb98 	bl	800527c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004b4c:	bf00      	nop
}
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000014 	.word	0x20000014

08004b58 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004b60:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <_cbOnUARTTx+0x5c>)
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d80f      	bhi.n	8004b88 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004b68:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <_cbOnUARTTx+0x5c>)
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <_cbOnUARTTx+0x60>)
 8004b70:	5c9a      	ldrb	r2, [r3, r2]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <_cbOnUARTTx+0x5c>)
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <_cbOnUARTTx+0x5c>)
 8004b80:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004b86:	e00f      	b.n	8004ba8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <_cbOnUARTTx+0x5c>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fa19 	bl	8004fc8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004b96:	4603      	mov	r3, r0
 8004b98:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da02      	bge.n	8004ba6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e000      	b.n	8004ba8 <_cbOnUARTTx+0x50>
  }
Done:
 8004ba6:	bf00      	nop
  return r;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000014 	.word	0x20000014
 8004bb8:	08007998 	.word	0x08007998

08004bbc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <SEGGER_UART_init+0x1c>)
 8004bc6:	4905      	ldr	r1, [pc, #20]	; (8004bdc <SEGGER_UART_init+0x20>)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f863 	bl	8004c94 <HIF_UART_Init>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08004b19 	.word	0x08004b19
 8004bdc:	08004b59 	.word	0x08004b59

08004be0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <USART2_IRQHandler+0x80>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <USART2_IRQHandler+0x84>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 030b 	and.w	r3, r3, #11
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <USART2_IRQHandler+0x88>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <USART2_IRQHandler+0x88>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	79fa      	ldrb	r2, [r7, #7]
 8004c16:	4610      	mov	r0, r2
 8004c18:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <USART2_IRQHandler+0x8c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <USART2_IRQHandler+0x8c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1dfa      	adds	r2, r7, #7
 8004c32:	4610      	mov	r0, r2
 8004c34:	4798      	blx	r3
 8004c36:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <USART2_IRQHandler+0x90>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <USART2_IRQHandler+0x90>)
 8004c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e006      	b.n	8004c5a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <USART2_IRQHandler+0x80>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004c50:	79fa      	ldrb	r2, [r7, #7]
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <USART2_IRQHandler+0x84>)
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e000      	b.n	8004c5a <USART2_IRQHandler+0x7a>
      return;
 8004c58:	bf00      	nop
    }
  }
}
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004404 	.word	0x40004404
 8004c68:	20012ea8 	.word	0x20012ea8
 8004c6c:	20012eac 	.word	0x20012eac
 8004c70:	4000440c 	.word	0x4000440c

08004c74 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	4000440c 	.word	0x4000440c

08004c94 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HIF_UART_Init+0xc8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HIF_UART_Init+0xc8>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004caa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HIF_UART_Init+0xcc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HIF_UART_Init+0xcc>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <HIF_UART_Init+0xd0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004ccc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004cce:	4a25      	ldr	r2, [pc, #148]	; (8004d64 <HIF_UART_Init+0xd0>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HIF_UART_Init+0xd4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004ce8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004cea:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <HIF_UART_Init+0xd4>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HIF_UART_Init+0xd8>)
 8004cf2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004cf6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HIF_UART_Init+0xdc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HIF_UART_Init+0xe0>)
 8004d00:	2280      	movs	r2, #128	; 0x80
 8004d02:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HIF_UART_Init+0xe4>)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	3301      	adds	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d302      	bcc.n	8004d2a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004d24:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004d28:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HIF_UART_Init+0xe8>)
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004d3a:	4a11      	ldr	r2, [pc, #68]	; (8004d80 <HIF_UART_Init+0xec>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004d40:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <HIF_UART_Init+0xf0>)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004d46:	2106      	movs	r1, #6
 8004d48:	2026      	movs	r0, #38	; 0x26
 8004d4a:	f7ff feab 	bl	8004aa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004d4e:	2026      	movs	r0, #38	; 0x26
 8004d50:	f7ff fe8a 	bl	8004a68 <__NVIC_EnableIRQ>
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023840 	.word	0x40023840
 8004d60:	40023830 	.word	0x40023830
 8004d64:	40020020 	.word	0x40020020
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	4000440c 	.word	0x4000440c
 8004d70:	40004410 	.word	0x40004410
 8004d74:	40004414 	.word	0x40004414
 8004d78:	0501bd00 	.word	0x0501bd00
 8004d7c:	40004408 	.word	0x40004408
 8004d80:	20012ea8 	.word	0x20012ea8
 8004d84:	20012eac 	.word	0x20012eac

08004d88 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <_DoInit+0x98>)
 8004d90:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <_DoInit+0x9c>)
 8004da2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <_DoInit+0xa0>)
 8004da8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004db0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <_DoInit+0x9c>)
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <_DoInit+0xa4>)
 8004dce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3307      	adds	r3, #7
 8004dec:	4a10      	ldr	r2, [pc, #64]	; (8004e30 <_DoInit+0xa8>)
 8004dee:	6810      	ldr	r0, [r2, #0]
 8004df0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004df2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <_DoInit+0xac>)
 8004dfa:	6810      	ldr	r0, [r2, #0]
 8004dfc:	6018      	str	r0, [r3, #0]
 8004dfe:	8891      	ldrh	r1, [r2, #4]
 8004e00:	7992      	ldrb	r2, [r2, #6]
 8004e02:	8099      	strh	r1, [r3, #4]
 8004e04:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e06:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e10:	f3bf 8f5f 	dmb	sy
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	2001446c 	.word	0x2001446c
 8004e24:	08007958 	.word	0x08007958
 8004e28:	20012eb0 	.word	0x20012eb0
 8004e2c:	200132b0 	.word	0x200132b0
 8004e30:	08007964 	.word	0x08007964
 8004e34:	08007968 	.word	0x08007968

08004e38 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e44:	2300      	movs	r3, #0
 8004e46:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d905      	bls.n	8004e68 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e007      	b.n	8004e78 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	69b9      	ldr	r1, [r7, #24]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	1acb      	subs	r3, r1, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3b01      	subs	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bf28      	it	cs
 8004e86:	4613      	movcs	r3, r2
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bf28      	it	cs
 8004e92:	4613      	movcs	r3, r2
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f002 f8ac 	bl	8007002 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	4413      	add	r3, r2
 8004eb0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	4413      	add	r3, r2
 8004ec8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d101      	bne.n	8004ed8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ed8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1b2      	bne.n	8004e4e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b088      	sub	sp, #32
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d911      	bls.n	8004f3a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	6938      	ldr	r0, [r7, #16]
 8004f26:	f002 f86c 	bl	8007002 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f38:	e01f      	b.n	8004f7a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	6938      	ldr	r0, [r7, #16]
 8004f4e:	f002 f858 	bl	8007002 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4413      	add	r3, r2
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f002 f849 	bl	8007002 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	60da      	str	r2, [r3, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d808      	bhi.n	8004fb0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad2      	subs	r2, r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3b01      	subs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e004      	b.n	8004fba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fe2:	f7ff fed1 	bl	8004d88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4a37      	ldr	r2, [pc, #220]	; (80050d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800500c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d92b      	bls.n	800506c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4293      	cmp	r3, r2
 8005024:	bf28      	it	cs
 8005026:	4613      	movcs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	4413      	add	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	6939      	ldr	r1, [r7, #16]
 8005038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800503a:	f001 ffe2 	bl	8007002 <memcpy>
    NumBytesRead += NumBytesRem;
 800503e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4413      	add	r3, r2
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005064:	429a      	cmp	r2, r3
 8005066:	d101      	bne.n	800506c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005068:	2300      	movs	r3, #0
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4293      	cmp	r3, r2
 800507a:	bf28      	it	cs
 800507c:	4613      	movcs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	4413      	add	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005096:	f001 ffb4 	bl	8007002 <memcpy>
    NumBytesRead += NumBytesRem;
 800509a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3730      	adds	r7, #48	; 0x30
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	2001446c 	.word	0x2001446c

080050d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	; 0x30
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050e0:	4b3e      	ldr	r3, [pc, #248]	; (80051dc <SEGGER_RTT_ReadNoLock+0x108>)
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80050ee:	f7ff fe4b 	bl	8004d88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4613      	mov	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	3360      	adds	r3, #96	; 0x60
 80050fe:	4a37      	ldr	r2, [pc, #220]	; (80051dc <SEGGER_RTT_ReadNoLock+0x108>)
 8005100:	4413      	add	r3, r2
 8005102:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d92b      	bls.n	8005178 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4293      	cmp	r3, r2
 8005130:	bf28      	it	cs
 8005132:	4613      	movcs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	4413      	add	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	6939      	ldr	r1, [r7, #16]
 8005144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005146:	f001 ff5c 	bl	8007002 <memcpy>
    NumBytesRead += NumBytesRem;
 800514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4413      	add	r3, r2
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	429a      	cmp	r2, r3
 8005172:	d101      	bne.n	8005178 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4293      	cmp	r3, r2
 8005186:	bf28      	it	cs
 8005188:	4613      	movcs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d019      	beq.n	80051c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	4413      	add	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a2:	f001 ff2e 	bl	8007002 <memcpy>
    NumBytesRead += NumBytesRem;
 80051a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4413      	add	r3, r2
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3730      	adds	r7, #48	; 0x30
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2001446c 	.word	0x2001446c

080051e0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	3360      	adds	r3, #96	; 0x60
 80051fc:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 80051fe:	4413      	add	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d017      	beq.n	800523a <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 800520a:	2b01      	cmp	r3, #1
 800520c:	d302      	bcc.n	8005214 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 800520e:	2b02      	cmp	r3, #2
 8005210:	d023      	beq.n	800525a <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8005212:	e029      	b.n	8005268 <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	f7ff feb4 	bl	8004f82 <_GetAvailWriteSpace>
 800521a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d202      	bcs.n	800522a <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005228:	e021      	b.n	800526e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff fe5d 	bl	8004ef2 <_WriteNoCheck>
    break;
 8005238:	e019      	b.n	800526e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800523a:	6978      	ldr	r0, [r7, #20]
 800523c:	f7ff fea1 	bl	8004f82 <_GetAvailWriteSpace>
 8005240:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4293      	cmp	r3, r2
 8005248:	bf28      	it	cs
 800524a:	4613      	movcs	r3, r2
 800524c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	69b9      	ldr	r1, [r7, #24]
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7ff fe4d 	bl	8004ef2 <_WriteNoCheck>
    break;
 8005258:	e009      	b.n	800526e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	69b9      	ldr	r1, [r7, #24]
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7ff fdea 	bl	8004e38 <_WriteBlocking>
 8005264:	61f8      	str	r0, [r7, #28]
    break;
 8005266:	e002      	b.n	800526e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
    break;
 800526c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	2001446c 	.word	0x2001446c

0800527c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005296:	f7ff fd77 	bl	8004d88 <_DoInit>
  SEGGER_RTT_LOCK();
 800529a:	f3ef 8311 	mrs	r3, BASEPRI
 800529e:	f04f 0120 	mov.w	r1, #32
 80052a2:	f381 8811 	msr	BASEPRI, r1
 80052a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ff97 	bl	80051e0 <SEGGER_RTT_WriteDownBufferNoLock>
 80052b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	2001446c 	.word	0x2001446c

080052c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052e4:	f7ff fd50 	bl	8004d88 <_DoInit>
  SEGGER_RTT_LOCK();
 80052e8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ec:	f04f 0120 	mov.w	r1, #32
 80052f0:	f381 8811 	msr	BASEPRI, r1
 80052f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f6:	4b35      	ldr	r3, [pc, #212]	; (80053cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3304      	adds	r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	429a      	cmp	r2, r3
 8005324:	dbeb      	blt.n	80052fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005326:	e000      	b.n	800532a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005328:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	da3f      	bge.n	80053b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005334:	6939      	ldr	r1, [r7, #16]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005348:	6939      	ldr	r1, [r7, #16]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	3304      	adds	r3, #4
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	440b      	add	r3, r1
 800536c:	3320      	adds	r3, #32
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005372:	6939      	ldr	r1, [r7, #16]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	440b      	add	r3, r1
 8005380:	3328      	adds	r3, #40	; 0x28
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005386:	6939      	ldr	r1, [r7, #16]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	3324      	adds	r3, #36	; 0x24
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800539a:	6939      	ldr	r1, [r7, #16]
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	332c      	adds	r3, #44	; 0x2c
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053ae:	f3bf 8f5f 	dmb	sy
 80053b2:	e002      	b.n	80053ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053c0:	69fb      	ldr	r3, [r7, #28]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2001446c 	.word	0x2001446c

080053d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	; 0x28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053ec:	f7ff fccc 	bl	8004d88 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d82c      	bhi.n	8005454 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053fa:	f3ef 8311 	mrs	r3, BASEPRI
 80053fe:	f04f 0120 	mov.w	r1, #32
 8005402:	f381 8811 	msr	BASEPRI, r1
 8005406:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	3360      	adds	r3, #96	; 0x60
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005444:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e002      	b.n	800545a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800545c:	4618      	mov	r0, r3
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	2001446c 	.word	0x2001446c

08005468 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800547e:	e002      	b.n	8005486 <_EncodeStr+0x1e>
      Len++;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	3301      	adds	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f6      	bne.n	8005480 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d901      	bls.n	800549e <_EncodeStr+0x36>
      Len = Limit;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2bfe      	cmp	r3, #254	; 0xfe
 80054a2:	d806      	bhi.n	80054b2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	60fa      	str	r2, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e011      	b.n	80054d6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	60fa      	str	r2, [r7, #12]
 80054b8:	22ff      	movs	r2, #255	; 0xff
 80054ba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	60fa      	str	r2, [r7, #12]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	0a19      	lsrs	r1, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	60fa      	str	r2, [r7, #12]
 80054d2:	b2ca      	uxtb	r2, r1
 80054d4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054da:	e00a      	b.n	80054f2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	1c53      	adds	r3, r2, #1
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	60f9      	str	r1, [r7, #12]
 80054e8:	7812      	ldrb	r2, [r2, #0]
 80054ea:	701a      	strb	r2, [r3, #0]
    n++;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3301      	adds	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3f0      	bcc.n	80054dc <_EncodeStr+0x74>
  }
  return pPayload;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005526:	4b33      	ldr	r3, [pc, #204]	; (80055f4 <_HandleIncomingPacket+0xd4>)
 8005528:	7e1b      	ldrb	r3, [r3, #24]
 800552a:	4618      	mov	r0, r3
 800552c:	1cfb      	adds	r3, r7, #3
 800552e:	2201      	movs	r2, #1
 8005530:	4619      	mov	r1, r3
 8005532:	f7ff fdcf 	bl	80050d4 <SEGGER_RTT_ReadNoLock>
 8005536:	4603      	mov	r3, r0
 8005538:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	dd4d      	ble.n	80055dc <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d022      	beq.n	800558c <_HandleIncomingPacket+0x6c>
 8005546:	2b05      	cmp	r3, #5
 8005548:	dc0b      	bgt.n	8005562 <_HandleIncomingPacket+0x42>
 800554a:	2b02      	cmp	r3, #2
 800554c:	d015      	beq.n	800557a <_HandleIncomingPacket+0x5a>
 800554e:	2b02      	cmp	r3, #2
 8005550:	dc02      	bgt.n	8005558 <_HandleIncomingPacket+0x38>
 8005552:	2b01      	cmp	r3, #1
 8005554:	d00e      	beq.n	8005574 <_HandleIncomingPacket+0x54>
 8005556:	e034      	b.n	80055c2 <_HandleIncomingPacket+0xa2>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d011      	beq.n	8005580 <_HandleIncomingPacket+0x60>
 800555c:	2b04      	cmp	r3, #4
 800555e:	d012      	beq.n	8005586 <_HandleIncomingPacket+0x66>
 8005560:	e02f      	b.n	80055c2 <_HandleIncomingPacket+0xa2>
 8005562:	2b07      	cmp	r3, #7
 8005564:	d018      	beq.n	8005598 <_HandleIncomingPacket+0x78>
 8005566:	2b07      	cmp	r3, #7
 8005568:	db13      	blt.n	8005592 <_HandleIncomingPacket+0x72>
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d038      	beq.n	80055e0 <_HandleIncomingPacket+0xc0>
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d015      	beq.n	800559e <_HandleIncomingPacket+0x7e>
 8005572:	e026      	b.n	80055c2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005574:	f000 ff04 	bl	8006380 <SEGGER_SYSVIEW_Start>
      break;
 8005578:	e037      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800557a:	f000 ffbd 	bl	80064f8 <SEGGER_SYSVIEW_Stop>
      break;
 800557e:	e034      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005580:	f001 f996 	bl	80068b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005584:	e031      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005586:	f001 f95b 	bl	8006840 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800558a:	e02e      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800558c:	f000 ffda 	bl	8006544 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005590:	e02b      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005592:	f001 fc27 	bl	8006de4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005596:	e028      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005598:	f001 fc06 	bl	8006da8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800559c:	e025      	b.n	80055ea <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <_HandleIncomingPacket+0xd4>)
 80055a0:	7e1b      	ldrb	r3, [r3, #24]
 80055a2:	4618      	mov	r0, r3
 80055a4:	1cfb      	adds	r3, r7, #3
 80055a6:	2201      	movs	r2, #1
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7ff fd93 	bl	80050d4 <SEGGER_RTT_ReadNoLock>
 80055ae:	4603      	mov	r3, r0
 80055b0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd15      	ble.n	80055e4 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fb74 	bl	8006ca8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80055c0:	e010      	b.n	80055e4 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da0e      	bge.n	80055e8 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <_HandleIncomingPacket+0xd4>)
 80055cc:	7e1b      	ldrb	r3, [r3, #24]
 80055ce:	4618      	mov	r0, r3
 80055d0:	1cfb      	adds	r3, r7, #3
 80055d2:	2201      	movs	r2, #1
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7ff fd7d 	bl	80050d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80055da:	e005      	b.n	80055e8 <_HandleIncomingPacket+0xc8>
    }
  }
 80055dc:	bf00      	nop
 80055de:	e004      	b.n	80055ea <_HandleIncomingPacket+0xca>
      break;
 80055e0:	bf00      	nop
 80055e2:	e002      	b.n	80055ea <_HandleIncomingPacket+0xca>
      break;
 80055e4:	bf00      	nop
 80055e6:	e000      	b.n	80055ea <_HandleIncomingPacket+0xca>
      break;
 80055e8:	bf00      	nop
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200142c8 	.word	0x200142c8

080055f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	; 0x30
 80055fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055fe:	2301      	movs	r3, #1
 8005600:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	e00b      	b.n	800562c <_TrySendOverflowPacket+0x34>
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800561e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	09db      	lsrs	r3, r3, #7
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	2b7f      	cmp	r3, #127	; 0x7f
 8005630:	d8f0      	bhi.n	8005614 <_TrySendOverflowPacket+0x1c>
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <_TrySendOverflowPacket+0xe4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005648:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	623b      	str	r3, [r7, #32]
 800565a:	e00b      	b.n	8005674 <_TrySendOverflowPacket+0x7c>
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	6279      	str	r1, [r7, #36]	; 0x24
 8005666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	09db      	lsrs	r3, r3, #7
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b7f      	cmp	r3, #127	; 0x7f
 8005678:	d8f0      	bhi.n	800565c <_TrySendOverflowPacket+0x64>
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	627a      	str	r2, [r7, #36]	; 0x24
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	4618      	mov	r0, r3
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	461a      	mov	r2, r3
 8005698:	1d3b      	adds	r3, r7, #4
 800569a:	4619      	mov	r1, r3
 800569c:	f7fa fd98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056a0:	4603      	mov	r3, r0
 80056a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80056a4:	f7ff fae6 	bl	8004c74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056ae:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e004      	b.n	80056cc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	3301      	adds	r3, #1
 80056c8:	4a03      	ldr	r2, [pc, #12]	; (80056d8 <_TrySendOverflowPacket+0xe0>)
 80056ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80056cc:	693b      	ldr	r3, [r7, #16]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3730      	adds	r7, #48	; 0x30
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200142c8 	.word	0x200142c8
 80056dc:	e0001004 	.word	0xe0001004

080056e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056ec:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <_SendPacket+0x1c4>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d010      	beq.n	8005716 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056f4:	4b6b      	ldr	r3, [pc, #428]	; (80058a4 <_SendPacket+0x1c4>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80a5 	beq.w	8005848 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056fe:	4b69      	ldr	r3, [pc, #420]	; (80058a4 <_SendPacket+0x1c4>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d109      	bne.n	800571a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005706:	f7ff ff77 	bl	80055f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800570a:	4b66      	ldr	r3, [pc, #408]	; (80058a4 <_SendPacket+0x1c4>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 809c 	bne.w	800584c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005714:	e001      	b.n	800571a <_SendPacket+0x3a>
    goto Send;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <_SendPacket+0x3c>
Send:
 800571a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b1f      	cmp	r3, #31
 8005720:	d809      	bhi.n	8005736 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005722:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <_SendPacket+0x1c4>)
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 808d 	bne.w	8005850 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b17      	cmp	r3, #23
 800573a:	d807      	bhi.n	800574c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e03d      	b.n	80057c8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b7f      	cmp	r3, #127	; 0x7f
 8005758:	d912      	bls.n	8005780 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	09da      	lsrs	r2, r3, #7
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b01      	subs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	3a01      	subs	r2, #1
 8005772:	60fa      	str	r2, [r7, #12]
 8005774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e006      	b.n	800578e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b7f      	cmp	r3, #127	; 0x7f
 8005792:	d912      	bls.n	80057ba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	09da      	lsrs	r2, r3, #7
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3b01      	subs	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	3a01      	subs	r2, #1
 80057ac:	60fa      	str	r2, [r7, #12]
 80057ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e006      	b.n	80057c8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b01      	subs	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057c8:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <_SendPacket+0x1c8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057ce:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <_SendPacket+0x1c4>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	e00b      	b.n	80057fa <_SendPacket+0x11a>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1c59      	adds	r1, r3, #1
 80057ea:	6279      	str	r1, [r7, #36]	; 0x24
 80057ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	09db      	lsrs	r3, r3, #7
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b7f      	cmp	r3, #127	; 0x7f
 80057fe:	d8f0      	bhi.n	80057e2 <_SendPacket+0x102>
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	627a      	str	r2, [r7, #36]	; 0x24
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005810:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <_SendPacket+0x1c4>)
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	4618      	mov	r0, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	461a      	mov	r2, r3
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	f7fa fcd6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005824:	4603      	mov	r3, r0
 8005826:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005828:	f7ff fa24 	bl	8004c74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005832:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <_SendPacket+0x1c4>)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	60d3      	str	r3, [r2, #12]
 8005838:	e00b      	b.n	8005852 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <_SendPacket+0x1c4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <_SendPacket+0x1c4>)
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e004      	b.n	8005852 <_SendPacket+0x172>
    goto SendDone;
 8005848:	bf00      	nop
 800584a:	e002      	b.n	8005852 <_SendPacket+0x172>
      goto SendDone;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <_SendPacket+0x172>
      goto SendDone;
 8005850:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <_SendPacket+0x1c4>)
 8005854:	7e1b      	ldrb	r3, [r3, #24]
 8005856:	4619      	mov	r1, r3
 8005858:	4a14      	ldr	r2, [pc, #80]	; (80058ac <_SendPacket+0x1cc>)
 800585a:	460b      	mov	r3, r1
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	440b      	add	r3, r1
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	336c      	adds	r3, #108	; 0x6c
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <_SendPacket+0x1c4>)
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	4618      	mov	r0, r3
 800586e:	490f      	ldr	r1, [pc, #60]	; (80058ac <_SendPacket+0x1cc>)
 8005870:	4603      	mov	r3, r0
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4403      	add	r3, r0
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	440b      	add	r3, r1
 800587a:	3370      	adds	r3, #112	; 0x70
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d00b      	beq.n	800589a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <_SendPacket+0x1c4>)
 8005884:	789b      	ldrb	r3, [r3, #2]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <_SendPacket+0x1c4>)
 800588c:	2201      	movs	r2, #1
 800588e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005890:	f7ff fe46 	bl	8005520 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <_SendPacket+0x1c4>)
 8005896:	2200      	movs	r2, #0
 8005898:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800589a:	bf00      	nop
 800589c:	3728      	adds	r7, #40	; 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	200142c8 	.word	0x200142c8
 80058a8:	e0001004 	.word	0xe0001004
 80058ac:	2001446c 	.word	0x2001446c

080058b0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	3301      	adds	r3, #1
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d80a      	bhi.n	80058e0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	1c59      	adds	r1, r3, #1
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6051      	str	r1, [r2, #4]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	d15a      	bne.n	800599e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	e00b      	b.n	8005922 <_StoreChar+0x72>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	6279      	str	r1, [r7, #36]	; 0x24
 8005914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2b7f      	cmp	r3, #127	; 0x7f
 8005926:	d8f0      	bhi.n	800590a <_StoreChar+0x5a>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	627a      	str	r2, [r7, #36]	; 0x24
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e00b      	b.n	800595a <_StoreChar+0xaa>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	61f9      	str	r1, [r7, #28]
 800594c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b7f      	cmp	r3, #127	; 0x7f
 800595e:	d8f0      	bhi.n	8005942 <_StoreChar+0x92>
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	61fa      	str	r2, [r7, #28]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	221a      	movs	r2, #26
 8005976:	6939      	ldr	r1, [r7, #16]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff feb1 	bl	80056e0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fdc0 	bl	8005508 <_PreparePacket>
 8005988:	4602      	mov	r2, r0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	611a      	str	r2, [r3, #16]
  }
}
 800599e:	bf00      	nop
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80059ba:	2301      	movs	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80059be:	2301      	movs	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059c2:	e007      	b.n	80059d4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	623b      	str	r3, [r7, #32]
    Width++;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d2f3      	bcs.n	80059c4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d901      	bls.n	80059e8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d11f      	bne.n	8005a32 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01c      	beq.n	8005a32 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <_PrintUnsigned+0x66>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <_PrintUnsigned+0x66>
        c = '0';
 8005a08:	2330      	movs	r3, #48	; 0x30
 8005a0a:	76fb      	strb	r3, [r7, #27]
 8005a0c:	e001      	b.n	8005a12 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005a0e:	2320      	movs	r3, #32
 8005a10:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a12:	e007      	b.n	8005a24 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	3b01      	subs	r3, #1
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005a1a:	7efb      	ldrb	r3, [r7, #27]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff ff46 	bl	80058b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <_PrintUnsigned+0x8a>
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3f0      	bcc.n	8005a14 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d903      	bls.n	8005a40 <_PrintUnsigned+0x98>
      NumDigits--;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	e009      	b.n	8005a54 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d200      	bcs.n	8005a54 <_PrintUnsigned+0xac>
        break;
 8005a52:	e005      	b.n	8005a60 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a5e:	e7e8      	b.n	8005a32 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <_PrintUnsigned+0x128>)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff14 	bl	80058b0 <_StoreChar>
    Digit /= Base;
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e3      	bne.n	8005a60 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aa8:	e006      	b.n	8005ab8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	3b01      	subs	r3, #1
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005ab0:	2120      	movs	r1, #32
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff fefc 	bl	80058b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <_PrintUnsigned+0x11e>
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3f1      	bcc.n	8005aaa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	080079a8 	.word	0x080079a8

08005ad4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bfb8      	it	lt
 8005ae8:	425b      	neglt	r3, r3
 8005aea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005aec:	2301      	movs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005af0:	e007      	b.n	8005b02 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005afa:	613b      	str	r3, [r7, #16]
    Width++;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3301      	adds	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	daf3      	bge.n	8005af2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d901      	bls.n	8005b16 <_PrintInt+0x42>
    Width = NumDigits;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <_PrintInt+0x5e>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	db04      	blt.n	8005b2c <_PrintInt+0x58>
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <_PrintInt+0x5e>
    FieldWidth--;
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <_PrintInt+0x6e>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <_PrintInt+0x9c>
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d111      	bne.n	8005b70 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b52:	e006      	b.n	8005b62 <_PrintInt+0x8e>
        FieldWidth--;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b5a:	2120      	movs	r1, #32
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff fea7 	bl	80058b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <_PrintInt+0x9c>
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d3f1      	bcc.n	8005b54 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da07      	bge.n	8005b86 <_PrintInt+0xb2>
    v = -v;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	425b      	negs	r3, r3
 8005b7a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b7c:	212d      	movs	r1, #45	; 0x2d
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fe96 	bl	80058b0 <_StoreChar>
 8005b84:	e008      	b.n	8005b98 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b90:	212b      	movs	r1, #43	; 0x2b
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fe8c 	bl	80058b0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d019      	beq.n	8005bd6 <_PrintInt+0x102>
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d114      	bne.n	8005bd6 <_PrintInt+0x102>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d111      	bne.n	8005bd6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bb8:	e006      	b.n	8005bc8 <_PrintInt+0xf4>
        FieldWidth--;
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005bc0:	2130      	movs	r1, #48	; 0x30
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff fe74 	bl	80058b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <_PrintInt+0x102>
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d3f1      	bcc.n	8005bba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff fedf 	bl	80059a8 <_PrintUnsigned>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b098      	sub	sp, #96	; 0x60
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	f04f 0120 	mov.w	r1, #32
 8005c08:	f381 8811 	msr	BASEPRI, r1
 8005c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0e:	48ac      	ldr	r0, [pc, #688]	; (8005ec0 <_VPrintTarget+0x2cc>)
 8005c10:	f7ff fc7a 	bl	8005508 <_PreparePacket>
 8005c14:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005c16:	4baa      	ldr	r3, [pc, #680]	; (8005ec0 <_VPrintTarget+0x2cc>)
 8005c18:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	3301      	adds	r3, #1
 8005c26:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8140 	beq.w	8005ec4 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8005c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c48:	2b25      	cmp	r3, #37	; 0x25
 8005c4a:	f040 812a 	bne.w	8005ea2 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c62:	3b23      	subs	r3, #35	; 0x23
 8005c64:	2b0d      	cmp	r3, #13
 8005c66:	d83f      	bhi.n	8005ce8 <_VPrintTarget+0xf4>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <_VPrintTarget+0x7c>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005ce9 	.word	0x08005ce9
 8005c78:	08005ce9 	.word	0x08005ce9
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005ce9 	.word	0x08005ce9
 8005c8c:	08005ce9 	.word	0x08005ce9
 8005c90:	08005cc9 	.word	0x08005cc9
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005ce9 	.word	0x08005ce9
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005cb9 	.word	0x08005cb9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e01a      	b.n	8005cee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	f043 0302 	orr.w	r3, r3, #2
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e012      	b.n	8005cee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	f043 0304 	orr.w	r3, r3, #4
 8005cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e00a      	b.n	8005cee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cda:	f043 0308 	orr.w	r3, r3, #8
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e002      	b.n	8005cee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	653b      	str	r3, [r7, #80]	; 0x50
 8005cec:	bf00      	nop
        }
      } while (v);
 8005cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1b0      	bne.n	8005c56 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d04:	2b2f      	cmp	r3, #47	; 0x2f
 8005d06:	d912      	bls.n	8005d2e <_VPrintTarget+0x13a>
 8005d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0c:	2b39      	cmp	r3, #57	; 0x39
 8005d0e:	d80e      	bhi.n	8005d2e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	461a      	mov	r2, r3
 8005d22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d26:	4413      	add	r3, r2
 8005d28:	3b30      	subs	r3, #48	; 0x30
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005d2c:	e7e4      	b.n	8005cf8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d40:	d11d      	bne.n	8005d7e <_VPrintTarget+0x18a>
        sFormat++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d54:	2b2f      	cmp	r3, #47	; 0x2f
 8005d56:	d912      	bls.n	8005d7e <_VPrintTarget+0x18a>
 8005d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d5c:	2b39      	cmp	r3, #57	; 0x39
 8005d5e:	d80e      	bhi.n	8005d7e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	461a      	mov	r2, r3
 8005d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d76:	4413      	add	r3, r2
 8005d78:	3b30      	subs	r3, #48	; 0x30
 8005d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005d7c:	e7e4      	b.n	8005d48 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d8a:	2b6c      	cmp	r3, #108	; 0x6c
 8005d8c:	d003      	beq.n	8005d96 <_VPrintTarget+0x1a2>
 8005d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d92:	2b68      	cmp	r3, #104	; 0x68
 8005d94:	d107      	bne.n	8005da6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005da4:	e7ef      	b.n	8005d86 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005daa:	2b64      	cmp	r3, #100	; 0x64
 8005dac:	d022      	beq.n	8005df4 <_VPrintTarget+0x200>
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	dc06      	bgt.n	8005dc0 <_VPrintTarget+0x1cc>
 8005db2:	2b58      	cmp	r3, #88	; 0x58
 8005db4:	d044      	beq.n	8005e40 <_VPrintTarget+0x24c>
 8005db6:	2b63      	cmp	r3, #99	; 0x63
 8005db8:	d009      	beq.n	8005dce <_VPrintTarget+0x1da>
 8005dba:	2b25      	cmp	r3, #37	; 0x25
 8005dbc:	d066      	beq.n	8005e8c <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8005dbe:	e06c      	b.n	8005e9a <_VPrintTarget+0x2a6>
      switch (c) {
 8005dc0:	2b75      	cmp	r3, #117	; 0x75
 8005dc2:	d02a      	beq.n	8005e1a <_VPrintTarget+0x226>
 8005dc4:	2b78      	cmp	r3, #120	; 0x78
 8005dc6:	d03b      	beq.n	8005e40 <_VPrintTarget+0x24c>
 8005dc8:	2b70      	cmp	r3, #112	; 0x70
 8005dca:	d04c      	beq.n	8005e66 <_VPrintTarget+0x272>
        break;
 8005dcc:	e065      	b.n	8005e9a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	1d19      	adds	r1, r3, #4
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6011      	str	r1, [r2, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005de2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005de6:	f107 0314 	add.w	r3, r7, #20
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fd5f 	bl	80058b0 <_StoreChar>
        break;
 8005df2:	e052      	b.n	8005e9a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1d19      	adds	r1, r3, #4
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e02:	f107 0014 	add.w	r0, r7, #20
 8005e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e10:	220a      	movs	r2, #10
 8005e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e14:	f7ff fe5e 	bl	8005ad4 <_PrintInt>
        break;
 8005e18:	e03f      	b.n	8005e9a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1d19      	adds	r1, r3, #4
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e2a:	f107 0014 	add.w	r0, r7, #20
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e38:	220a      	movs	r2, #10
 8005e3a:	f7ff fdb5 	bl	80059a8 <_PrintUnsigned>
        break;
 8005e3e:	e02c      	b.n	8005e9a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e50:	f107 0014 	add.w	r0, r7, #20
 8005e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5e:	2210      	movs	r2, #16
 8005e60:	f7ff fda2 	bl	80059a8 <_PrintUnsigned>
        break;
 8005e64:	e019      	b.n	8005e9a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1d19      	adds	r1, r3, #4
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6011      	str	r1, [r2, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e76:	f107 0014 	add.w	r0, r7, #20
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	2308      	movs	r3, #8
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	2308      	movs	r3, #8
 8005e84:	2210      	movs	r2, #16
 8005e86:	f7ff fd8f 	bl	80059a8 <_PrintUnsigned>
        break;
 8005e8a:	e006      	b.n	8005e9a <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 8005e8c:	f107 0314 	add.w	r3, r7, #20
 8005e90:	2125      	movs	r1, #37	; 0x25
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fd0c 	bl	80058b0 <_StoreChar>
        break;
 8005e98:	bf00      	nop
      }
      sFormat++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e007      	b.n	8005eb2 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ea2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fcff 	bl	80058b0 <_StoreChar>
    }
  } while (*sFormat);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f47f aeb8 	bne.w	8005c2c <_VPrintTarget+0x38>
 8005ebc:	e003      	b.n	8005ec6 <_VPrintTarget+0x2d2>
 8005ebe:	bf00      	nop
 8005ec0:	200142f8 	.word	0x200142f8
      break;
 8005ec4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d041      	beq.n	8005f50 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	e00b      	b.n	8005ef6 <_VPrintTarget+0x302>
 8005ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8005ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef2:	09db      	lsrs	r3, r3, #7
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8005efa:	d8f0      	bhi.n	8005ede <_VPrintTarget+0x2ea>
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	643a      	str	r2, [r7, #64]	; 0x40
 8005f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0a:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f10:	2300      	movs	r3, #0
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	e00b      	b.n	8005f2e <_VPrintTarget+0x33a>
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	2b7f      	cmp	r3, #127	; 0x7f
 8005f32:	d8f0      	bhi.n	8005f16 <_VPrintTarget+0x322>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	69b9      	ldr	r1, [r7, #24]
 8005f48:	221a      	movs	r2, #26
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff fbc8 	bl	80056e0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f56:	bf00      	nop
 8005f58:	3758      	adds	r7, #88	; 0x58
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop

08005f60 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f74:	4917      	ldr	r1, [pc, #92]	; (8005fd4 <SEGGER_SYSVIEW_Init+0x74>)
 8005f76:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x78>)
 8005f78:	f7ff f9a6 	bl	80052c8 <SEGGER_RTT_AllocUpBuffer>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f82:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f86:	785a      	ldrb	r2, [r3, #1]
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8e:	7e1b      	ldrb	r3, [r3, #24]
 8005f90:	4618      	mov	r0, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2308      	movs	r3, #8
 8005f98:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <SEGGER_SYSVIEW_Init+0x80>)
 8005f9a:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x78>)
 8005f9c:	f7ff fa18 	bl	80053d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <SEGGER_SYSVIEW_Init+0x84>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005fae:	4a0b      	ldr	r2, [pc, #44]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005fb4:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fc0:	4a06      	ldr	r2, [pc, #24]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200132c0 	.word	0x200132c0
 8005fd8:	08007970 	.word	0x08007970
 8005fdc:	200142c8 	.word	0x200142c8
 8005fe0:	200142c0 	.word	0x200142c0
 8005fe4:	e0001004 	.word	0xe0001004

08005fe8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6113      	str	r3, [r2, #16]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	200142c8 	.word	0x200142c8

08006008 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006010:	f3ef 8311 	mrs	r3, BASEPRI
 8006014:	f04f 0120 	mov.w	r1, #32
 8006018:	f381 8811 	msr	BASEPRI, r1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	4808      	ldr	r0, [pc, #32]	; (8006040 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006020:	f7ff fa72 	bl	8005508 <_PreparePacket>
 8006024:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f7ff fb58 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f383 8811 	msr	BASEPRI, r3
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200142f8 	.word	0x200142f8

08006044 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800604e:	f3ef 8311 	mrs	r3, BASEPRI
 8006052:	f04f 0120 	mov.w	r1, #32
 8006056:	f381 8811 	msr	BASEPRI, r1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	4816      	ldr	r0, [pc, #88]	; (80060b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800605e:	f7ff fa53 	bl	8005508 <_PreparePacket>
 8006062:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e00b      	b.n	800608a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	61f9      	str	r1, [r7, #28]
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	61fa      	str	r2, [r7, #28]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f7ff fb1b 	bl	80056e0 <_SendPacket>
  RECORD_END();
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f383 8811 	msr	BASEPRI, r3
}
 80060b0:	bf00      	nop
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200142f8 	.word	0x200142f8

080060bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060c8:	f3ef 8311 	mrs	r3, BASEPRI
 80060cc:	f04f 0120 	mov.w	r1, #32
 80060d0:	f381 8811 	msr	BASEPRI, r1
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	4825      	ldr	r0, [pc, #148]	; (800616c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060d8:	f7ff fa16 	bl	8005508 <_PreparePacket>
 80060dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ea:	e00b      	b.n	8006104 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	09db      	lsrs	r3, r3, #7
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b7f      	cmp	r3, #127	; 0x7f
 8006108:	d8f0      	bhi.n	80060ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e00b      	b.n	800613c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6279      	str	r1, [r7, #36]	; 0x24
 800612e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b7f      	cmp	r3, #127	; 0x7f
 8006140:	d8f0      	bhi.n	8006124 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	627a      	str	r2, [r7, #36]	; 0x24
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	69b8      	ldr	r0, [r7, #24]
 8006158:	f7ff fac2 	bl	80056e0 <_SendPacket>
  RECORD_END();
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
 8006164:	3730      	adds	r7, #48	; 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200142f8 	.word	0x200142f8

08006170 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800617e:	f3ef 8311 	mrs	r3, BASEPRI
 8006182:	f04f 0120 	mov.w	r1, #32
 8006186:	f381 8811 	msr	BASEPRI, r1
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	4832      	ldr	r0, [pc, #200]	; (8006258 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800618e:	f7ff f9bb 	bl	8005508 <_PreparePacket>
 8006192:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	633b      	str	r3, [r7, #48]	; 0x30
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6379      	str	r1, [r7, #52]	; 0x34
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	637a      	str	r2, [r7, #52]	; 0x34
 80061c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d8:	e00b      	b.n	80061f2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d8f0      	bhi.n	80061da <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	e00b      	b.n	800622a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	6279      	str	r1, [r7, #36]	; 0x24
 800621c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	2b7f      	cmp	r3, #127	; 0x7f
 800622e:	d8f0      	bhi.n	8006212 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	627a      	str	r2, [r7, #36]	; 0x24
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f7ff fa4b 	bl	80056e0 <_SendPacket>
  RECORD_END();
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f383 8811 	msr	BASEPRI, r3
}
 8006250:	bf00      	nop
 8006252:	3738      	adds	r7, #56	; 0x38
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200142f8 	.word	0x200142f8

0800625c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b090      	sub	sp, #64	; 0x40
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800626a:	f3ef 8311 	mrs	r3, BASEPRI
 800626e:	f04f 0120 	mov.w	r1, #32
 8006272:	f381 8811 	msr	BASEPRI, r1
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	4840      	ldr	r0, [pc, #256]	; (800637c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800627a:	f7ff f945 	bl	8005508 <_PreparePacket>
 800627e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
 80062c4:	e00b      	b.n	80062de <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	6379      	str	r1, [r7, #52]	; 0x34
 80062d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	09db      	lsrs	r3, r3, #7
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2b7f      	cmp	r3, #127	; 0x7f
 80062e2:	d8f0      	bhi.n	80062c6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	637a      	str	r2, [r7, #52]	; 0x34
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fc:	e00b      	b.n	8006316 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b7f      	cmp	r3, #127	; 0x7f
 800631a:	d8f0      	bhi.n	80062fe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
 8006330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	6279      	str	r1, [r7, #36]	; 0x24
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	627a      	str	r2, [r7, #36]	; 0x24
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	69b8      	ldr	r0, [r7, #24]
 800636a:	f7ff f9b9 	bl	80056e0 <_SendPacket>
  RECORD_END();
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f383 8811 	msr	BASEPRI, r3
}
 8006374:	bf00      	nop
 8006376:	3740      	adds	r7, #64	; 0x40
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	200142f8 	.word	0x200142f8

08006380 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	f04f 0120 	mov.w	r1, #32
 8006394:	f381 8811 	msr	BASEPRI, r1
 8006398:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	220a      	movs	r2, #10
 80063a0:	4953      	ldr	r1, [pc, #332]	; (80064f0 <SEGGER_SYSVIEW_Start+0x170>)
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7f9 ff14 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80063ae:	f7fe fc61 	bl	8004c74 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80063b2:	200a      	movs	r0, #10
 80063b4:	f7ff fe28 	bl	8006008 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063b8:	f3ef 8311 	mrs	r3, BASEPRI
 80063bc:	f04f 0120 	mov.w	r1, #32
 80063c0:	f381 8811 	msr	BASEPRI, r1
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	484b      	ldr	r0, [pc, #300]	; (80064f4 <SEGGER_SYSVIEW_Start+0x174>)
 80063c8:	f7ff f89e 	bl	8005508 <_PreparePacket>
 80063cc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d6:	4b45      	ldr	r3, [pc, #276]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
 80063dc:	e00b      	b.n	80063f6 <SEGGER_SYSVIEW_Start+0x76>
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	09db      	lsrs	r3, r3, #7
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2b7f      	cmp	r3, #127	; 0x7f
 80063fa:	d8f0      	bhi.n	80063de <SEGGER_SYSVIEW_Start+0x5e>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
 8006410:	4b36      	ldr	r3, [pc, #216]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_Start+0xb0>
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	6279      	str	r1, [r7, #36]	; 0x24
 8006422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_Start+0x98>
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	627a      	str	r2, [r7, #36]	; 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	4b28      	ldr	r3, [pc, #160]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e00b      	b.n	800646a <SEGGER_SYSVIEW_Start+0xea>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	61f9      	str	r1, [r7, #28]
 800645c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	09db      	lsrs	r3, r3, #7
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b7f      	cmp	r3, #127	; 0x7f
 800646e:	d8f0      	bhi.n	8006452 <SEGGER_SYSVIEW_Start+0xd2>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	61fa      	str	r2, [r7, #28]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_Start+0x122>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	6179      	str	r1, [r7, #20]
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_Start+0x10a>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	617a      	str	r2, [r7, #20]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064b8:	2218      	movs	r2, #24
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff f90f 	bl	80056e0 <_SendPacket>
      RECORD_END();
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064d6:	f000 f9eb 	bl	80068b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064da:	f000 f9b1 	bl	8006840 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064de:	f000 fc81 	bl	8006de4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064e2:	bf00      	nop
 80064e4:	3730      	adds	r7, #48	; 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200142c8 	.word	0x200142c8
 80064f0:	0800799c 	.word	0x0800799c
 80064f4:	200142f8 	.word	0x200142f8

080064f8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006502:	f04f 0120 	mov.w	r1, #32
 8006506:	f381 8811 	msr	BASEPRI, r1
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <SEGGER_SYSVIEW_Stop+0x44>)
 800650e:	f7fe fffb 	bl	8005508 <_PreparePacket>
 8006512:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <SEGGER_SYSVIEW_Stop+0x48>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800651c:	220b      	movs	r2, #11
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f7ff f8dd 	bl	80056e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <SEGGER_SYSVIEW_Stop+0x48>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f383 8811 	msr	BASEPRI, r3
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200142f8 	.word	0x200142f8
 8006540:	200142c8 	.word	0x200142c8

08006544 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800654a:	f3ef 8311 	mrs	r3, BASEPRI
 800654e:	f04f 0120 	mov.w	r1, #32
 8006552:	f381 8811 	msr	BASEPRI, r1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	4845      	ldr	r0, [pc, #276]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800655a:	f7fe ffd5 	bl	8005508 <_PreparePacket>
 800655e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006568:	4b42      	ldr	r3, [pc, #264]	; (8006674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
 800656e:	e00b      	b.n	8006588 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	b2da      	uxtb	r2, r3
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	62f9      	str	r1, [r7, #44]	; 0x2c
 800657a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b7f      	cmp	r3, #127	; 0x7f
 800658c:	d8f0      	bhi.n	8006570 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	4b34      	ldr	r3, [pc, #208]	; (8006674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	623b      	str	r3, [r7, #32]
 80065a8:	e00b      	b.n	80065c2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	6279      	str	r1, [r7, #36]	; 0x24
 80065b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	09db      	lsrs	r3, r3, #7
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	2b7f      	cmp	r3, #127	; 0x7f
 80065c6:	d8f0      	bhi.n	80065aa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	627a      	str	r2, [r7, #36]	; 0x24
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	4b25      	ldr	r3, [pc, #148]	; (8006674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	e00b      	b.n	80065fc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	61f9      	str	r1, [r7, #28]
 80065ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	09db      	lsrs	r3, r3, #7
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006600:	d8f0      	bhi.n	80065e4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	61fa      	str	r2, [r7, #28]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e00b      	b.n	8006634 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	6179      	str	r1, [r7, #20]
 8006626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	09db      	lsrs	r3, r3, #7
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b7f      	cmp	r3, #127	; 0x7f
 8006638:	d8f0      	bhi.n	800661c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	617a      	str	r2, [r7, #20]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800664a:	2218      	movs	r2, #24
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f7ff f846 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006662:	4b04      	ldr	r3, [pc, #16]	; (8006674 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	4798      	blx	r3
  }
}
 8006668:	bf00      	nop
 800666a:	3730      	adds	r7, #48	; 0x30
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	200142f8 	.word	0x200142f8
 8006674:	200142c8 	.word	0x200142c8

08006678 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b092      	sub	sp, #72	; 0x48
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	f04f 0120 	mov.w	r1, #32
 8006688:	f381 8811 	msr	BASEPRI, r1
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	486a      	ldr	r0, [pc, #424]	; (8006838 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006690:	f7fe ff3a 	bl	8005508 <_PreparePacket>
 8006694:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b66      	ldr	r3, [pc, #408]	; (800683c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	643b      	str	r3, [r7, #64]	; 0x40
 80066aa:	e00b      	b.n	80066c4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80066ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	6479      	str	r1, [r7, #68]	; 0x44
 80066b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c0:	09db      	lsrs	r3, r3, #7
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	2b7f      	cmp	r3, #127	; 0x7f
 80066c8:	d8f0      	bhi.n	80066ac <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80066ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	647a      	str	r2, [r7, #68]	; 0x44
 80066d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e4:	e00b      	b.n	80066fe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ec:	1c59      	adds	r1, r3, #1
 80066ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b7f      	cmp	r3, #127	; 0x7f
 8006702:	d8f0      	bhi.n	80066e6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800670a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006712:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	4619      	mov	r1, r3
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7fe fea3 	bl	8005468 <_EncodeStr>
 8006722:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006724:	2209      	movs	r2, #9
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6938      	ldr	r0, [r7, #16]
 800672a:	f7fe ffd9 	bl	80056e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b40      	ldr	r3, [pc, #256]	; (800683c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 8006742:	e00b      	b.n	800675c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	6379      	str	r1, [r7, #52]	; 0x34
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	633b      	str	r3, [r7, #48]	; 0x30
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	637a      	str	r2, [r7, #52]	; 0x34
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
 800677c:	e00b      	b.n	8006796 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	1c59      	adds	r1, r3, #1
 8006786:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	09db      	lsrs	r3, r3, #7
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	2b7f      	cmp	r3, #127	; 0x7f
 800679a:	d8f0      	bhi.n	800677e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	e00b      	b.n	80067d0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	6279      	str	r1, [r7, #36]	; 0x24
 80067c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	09db      	lsrs	r3, r3, #7
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b7f      	cmp	r3, #127	; 0x7f
 80067d4:	d8f0      	bhi.n	80067b8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	627a      	str	r2, [r7, #36]	; 0x24
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e00b      	b.n	8006808 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	1c59      	adds	r1, r3, #1
 80067f8:	61f9      	str	r1, [r7, #28]
 80067fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	09db      	lsrs	r3, r3, #7
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b7f      	cmp	r3, #127	; 0x7f
 800680c:	d8f0      	bhi.n	80067f0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	61fa      	str	r2, [r7, #28]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800681e:	2215      	movs	r2, #21
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	6938      	ldr	r0, [r7, #16]
 8006824:	f7fe ff5c 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f383 8811 	msr	BASEPRI, r3
}
 800682e:	bf00      	nop
 8006830:	3748      	adds	r7, #72	; 0x48
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200142f8 	.word	0x200142f8
 800683c:	200142c8 	.word	0x200142c8

08006840 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006844:	4b07      	ldr	r3, [pc, #28]	; (8006864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800684c:	4b05      	ldr	r3, [pc, #20]	; (8006864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4798      	blx	r3
  }
}
 800685e:	bf00      	nop
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200142c8 	.word	0x200142c8

08006868 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006870:	f3ef 8311 	mrs	r3, BASEPRI
 8006874:	f04f 0120 	mov.w	r1, #32
 8006878:	f381 8811 	msr	BASEPRI, r1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	480b      	ldr	r0, [pc, #44]	; (80068ac <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006880:	f7fe fe42 	bl	8005508 <_PreparePacket>
 8006884:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	6938      	ldr	r0, [r7, #16]
 800688c:	f7fe fdec 	bl	8005468 <_EncodeStr>
 8006890:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006892:	220e      	movs	r2, #14
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6938      	ldr	r0, [r7, #16]
 8006898:	f7fe ff22 	bl	80056e0 <_SendPacket>
  RECORD_END();
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f383 8811 	msr	BASEPRI, r3
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200142f8 	.word	0x200142f8

080068b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d019      	beq.n	80068f2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d014      	beq.n	80068f2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068c8:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4798      	blx	r3
 80068d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068d4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	0013      	movs	r3, r2
 80068e4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068e6:	461a      	mov	r2, r3
 80068e8:	4601      	mov	r1, r0
 80068ea:	200d      	movs	r0, #13
 80068ec:	f7ff fbe6 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
 80068f0:	e005      	b.n	80068fe <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	200c      	movs	r0, #12
 80068fa:	f7ff fba3 	bl	8006044 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}
 8006906:	bf00      	nop
 8006908:	200142c8 	.word	0x200142c8
 800690c:	e0001004 	.word	0xe0001004

08006910 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	f04f 0120 	mov.w	r1, #32
 800691e:	f381 8811 	msr	BASEPRI, r1
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	4819      	ldr	r0, [pc, #100]	; (800698c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006926:	f7fe fdef 	bl	8005508 <_PreparePacket>
 800692a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006938:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6179      	str	r1, [r7, #20]
 800694e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b7f      	cmp	r3, #127	; 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	617a      	str	r2, [r7, #20]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006972:	2202      	movs	r2, #2
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f7fe feb2 	bl	80056e0 <_SendPacket>
  RECORD_END();
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	bf00      	nop
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200142f8 	.word	0x200142f8
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800699a:	f3ef 8311 	mrs	r3, BASEPRI
 800699e:	f04f 0120 	mov.w	r1, #32
 80069a2:	f381 8811 	msr	BASEPRI, r1
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	4807      	ldr	r0, [pc, #28]	; (80069c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80069aa:	f7fe fdad 	bl	8005508 <_PreparePacket>
 80069ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80069b0:	2203      	movs	r2, #3
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f7fe fe93 	bl	80056e0 <_SendPacket>
  RECORD_END();
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f383 8811 	msr	BASEPRI, r3
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200142f8 	.word	0x200142f8

080069cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	f04f 0120 	mov.w	r1, #32
 80069da:	f381 8811 	msr	BASEPRI, r1
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	4807      	ldr	r0, [pc, #28]	; (8006a00 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069e2:	f7fe fd91 	bl	8005508 <_PreparePacket>
 80069e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069e8:	2212      	movs	r2, #18
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6838      	ldr	r0, [r7, #0]
 80069ee:	f7fe fe77 	bl	80056e0 <_SendPacket>
  RECORD_END();
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f383 8811 	msr	BASEPRI, r3
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	200142f8 	.word	0x200142f8

08006a04 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0e:	f04f 0120 	mov.w	r1, #32
 8006a12:	f381 8811 	msr	BASEPRI, r1
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	4807      	ldr	r0, [pc, #28]	; (8006a38 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a1a:	f7fe fd75 	bl	8005508 <_PreparePacket>
 8006a1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a20:	2211      	movs	r2, #17
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f7fe fe5b 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f383 8811 	msr	BASEPRI, r3
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	200142f8 	.word	0x200142f8

08006a3c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a44:	f3ef 8311 	mrs	r3, BASEPRI
 8006a48:	f04f 0120 	mov.w	r1, #32
 8006a4c:	f381 8811 	msr	BASEPRI, r1
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a54:	f7fe fd58 	bl	8005508 <_PreparePacket>
 8006a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	61f9      	str	r1, [r7, #28]
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	61fa      	str	r2, [r7, #28]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6938      	ldr	r0, [r7, #16]
 8006aa6:	f7fe fe1b 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f383 8811 	msr	BASEPRI, r3
}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200142f8 	.word	0x200142f8
 8006abc:	200142c8 	.word	0x200142c8

08006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	4819      	ldr	r0, [pc, #100]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ad8:	f7fe fd16 	bl	8005508 <_PreparePacket>
 8006adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b24:	2204      	movs	r2, #4
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7fe fdd9 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	200142f8 	.word	0x200142f8
 8006b40:	200142c8 	.word	0x200142c8

08006b44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b50:	f04f 0120 	mov.w	r1, #32
 8006b54:	f381 8811 	msr	BASEPRI, r1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	4819      	ldr	r0, [pc, #100]	; (8006bc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b5c:	f7fe fcd4 	bl	8005508 <_PreparePacket>
 8006b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	61f9      	str	r1, [r7, #28]
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ba8:	2206      	movs	r2, #6
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6938      	ldr	r0, [r7, #16]
 8006bae:	f7fe fd97 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f383 8811 	msr	BASEPRI, r3
}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200142f8 	.word	0x200142f8
 8006bc4:	200142c8 	.word	0x200142c8

08006bc8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd6:	f04f 0120 	mov.w	r1, #32
 8006bda:	f381 8811 	msr	BASEPRI, r1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	4827      	ldr	r0, [pc, #156]	; (8006c80 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006be2:	f7fe fc91 	bl	8005508 <_PreparePacket>
 8006be6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	6279      	str	r1, [r7, #36]	; 0x24
 8006c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	627a      	str	r2, [r7, #36]	; 0x24
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e00b      	b.n	8006c50 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	61f9      	str	r1, [r7, #28]
 8006c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	09db      	lsrs	r3, r3, #7
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b7f      	cmp	r3, #127	; 0x7f
 8006c54:	d8f0      	bhi.n	8006c38 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	61fa      	str	r2, [r7, #28]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c66:	2207      	movs	r2, #7
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f7fe fd38 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f383 8811 	msr	BASEPRI, r3
}
 8006c76:	bf00      	nop
 8006c78:	3728      	adds	r7, #40	; 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	200142f8 	.word	0x200142f8
 8006c84:	200142c8 	.word	0x200142c8

08006c88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	200142c8 	.word	0x200142c8

08006ca8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08c      	sub	sp, #48	; 0x30
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006cb2:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06d      	beq.n	8006d96 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc4:	e008      	b.n	8006cd8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3f2      	bcc.n	8006cc6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ce0:	e000      	b.n	8006ce4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ce2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d055      	beq.n	8006d96 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cea:	f3ef 8311 	mrs	r3, BASEPRI
 8006cee:	f04f 0120 	mov.w	r1, #32
 8006cf2:	f381 8811 	msr	BASEPRI, r1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	482a      	ldr	r0, [pc, #168]	; (8006da4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006cfa:	f7fe fc05 	bl	8005508 <_PreparePacket>
 8006cfe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	623b      	str	r3, [r7, #32]
 8006d0c:	e00b      	b.n	8006d26 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	6279      	str	r1, [r7, #36]	; 0x24
 8006d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2a:	d8f0      	bhi.n	8006d0e <SEGGER_SYSVIEW_SendModule+0x66>
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	627a      	str	r2, [r7, #36]	; 0x24
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	e00b      	b.n	8006d60 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1c59      	adds	r1, r3, #1
 8006d50:	61f9      	str	r1, [r7, #28]
 8006d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	09db      	lsrs	r3, r3, #7
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b7f      	cmp	r3, #127	; 0x7f
 8006d64:	d8f0      	bhi.n	8006d48 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	61fa      	str	r2, [r7, #28]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7fe fb72 	bl	8005468 <_EncodeStr>
 8006d84:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d86:	2216      	movs	r2, #22
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f7fe fca8 	bl	80056e0 <_SendPacket>
      RECORD_END();
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d96:	bf00      	nop
 8006d98:	3730      	adds	r7, #48	; 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200142f0 	.word	0x200142f0
 8006da4:	200142f8 	.word	0x200142f8

08006da8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00f      	beq.n	8006dd6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006db6:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f2      	bne.n	8006dbc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200142f0 	.word	0x200142f0

08006de4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006dea:	f3ef 8311 	mrs	r3, BASEPRI
 8006dee:	f04f 0120 	mov.w	r1, #32
 8006df2:	f381 8811 	msr	BASEPRI, r1
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	4817      	ldr	r0, [pc, #92]	; (8006e58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006dfa:	f7fe fb85 	bl	8005508 <_PreparePacket>
 8006dfe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	e00b      	b.n	8006e28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	1c59      	adds	r1, r3, #1
 8006e18:	6179      	str	r1, [r7, #20]
 8006e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	09db      	lsrs	r3, r3, #7
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2c:	d8f0      	bhi.n	8006e10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	617a      	str	r2, [r7, #20]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e3e:	221b      	movs	r2, #27
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	68b8      	ldr	r0, [r7, #8]
 8006e44:	f7fe fc4c 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f383 8811 	msr	BASEPRI, r3
}
 8006e4e:	bf00      	nop
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200142f8 	.word	0x200142f8
 8006e5c:	200142f4 	.word	0x200142f4

08006e60 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e60:	b40f      	push	{r0, r1, r2, r3}
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e68:	f107 0314 	add.w	r3, r7, #20
 8006e6c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	461a      	mov	r2, r3
 8006e72:	2100      	movs	r1, #0
 8006e74:	6938      	ldr	r0, [r7, #16]
 8006e76:	f7fe febd 	bl	8005bf4 <_VPrintTarget>
  va_end(ParamList);
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e84:	b004      	add	sp, #16
 8006e86:	4770      	bx	lr

08006e88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e90:	f3ef 8311 	mrs	r3, BASEPRI
 8006e94:	f04f 0120 	mov.w	r1, #32
 8006e98:	f381 8811 	msr	BASEPRI, r1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	4827      	ldr	r0, [pc, #156]	; (8006f3c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006ea0:	f7fe fb32 	bl	8005508 <_PreparePacket>
 8006ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7fe fadc 	bl	8005468 <_EncodeStr>
 8006eb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	e00b      	b.n	8006ed4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	6279      	str	r1, [r7, #36]	; 0x24
 8006ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	09db      	lsrs	r3, r3, #7
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed8:	d8f0      	bhi.n	8006ebc <SEGGER_SYSVIEW_Warn+0x34>
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e00b      	b.n	8006f0c <SEGGER_SYSVIEW_Warn+0x84>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	1c59      	adds	r1, r3, #1
 8006efc:	61f9      	str	r1, [r7, #28]
 8006efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	09db      	lsrs	r3, r3, #7
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f10:	d8f0      	bhi.n	8006ef4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	61fa      	str	r2, [r7, #28]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f22:	221a      	movs	r2, #26
 8006f24:	68f9      	ldr	r1, [r7, #12]
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f7fe fbda 	bl	80056e0 <_SendPacket>
  RECORD_END();
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f383 8811 	msr	BASEPRI, r3
}
 8006f32:	bf00      	nop
 8006f34:	3728      	adds	r7, #40	; 0x28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200142f8 	.word	0x200142f8

08006f40 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f44:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f46:	7e1b      	ldrb	r3, [r3, #24]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	440b      	add	r3, r1
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	336c      	adds	r3, #108	; 0x6c
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f5c:	7e1b      	ldrb	r3, [r3, #24]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	490d      	ldr	r1, [pc, #52]	; (8006f98 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f62:	4603      	mov	r3, r0
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4403      	add	r3, r0
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3370      	adds	r3, #112	; 0x70
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d00b      	beq.n	8006f8c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f74:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f76:	789b      	ldrb	r3, [r3, #2]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d107      	bne.n	8006f8c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f82:	f7fe facd 	bl	8005520 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200142c8 	.word	0x200142c8
 8006f98:	2001446c 	.word	0x2001446c

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4e0d      	ldr	r6, [pc, #52]	; (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	; (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1ba4      	subs	r4, r4, r6
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2500      	movs	r5, #0
 8006fa8:	42a5      	cmp	r5, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4e0b      	ldr	r6, [pc, #44]	; (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	; (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f000 fc44 	bl	800783c <_init>
 8006fb4:	1ba4      	subs	r4, r4, r6
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2500      	movs	r5, #0
 8006fba:	42a5      	cmp	r5, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fc4:	4798      	blx	r3
 8006fc6:	3501      	adds	r5, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fce:	4798      	blx	r3
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	080079f4 	.word	0x080079f4
 8006fd8:	080079f4 	.word	0x080079f4
 8006fdc:	080079f4 	.word	0x080079f4
 8006fe0:	080079f8 	.word	0x080079f8

08006fe4 <memcmp>:
 8006fe4:	b530      	push	{r4, r5, lr}
 8006fe6:	2400      	movs	r4, #0
 8006fe8:	42a2      	cmp	r2, r4
 8006fea:	d101      	bne.n	8006ff0 <memcmp+0xc>
 8006fec:	2000      	movs	r0, #0
 8006fee:	e007      	b.n	8007000 <memcmp+0x1c>
 8006ff0:	5d03      	ldrb	r3, [r0, r4]
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	190d      	adds	r5, r1, r4
 8006ff6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	d0f4      	beq.n	8006fe8 <memcmp+0x4>
 8006ffe:	1b58      	subs	r0, r3, r5
 8007000:	bd30      	pop	{r4, r5, pc}

08007002 <memcpy>:
 8007002:	b510      	push	{r4, lr}
 8007004:	1e43      	subs	r3, r0, #1
 8007006:	440a      	add	r2, r1
 8007008:	4291      	cmp	r1, r2
 800700a:	d100      	bne.n	800700e <memcpy+0xc>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007016:	e7f7      	b.n	8007008 <memcpy+0x6>

08007018 <memset>:
 8007018:	4402      	add	r2, r0
 800701a:	4603      	mov	r3, r0
 800701c:	4293      	cmp	r3, r2
 800701e:	d100      	bne.n	8007022 <memset+0xa>
 8007020:	4770      	bx	lr
 8007022:	f803 1b01 	strb.w	r1, [r3], #1
 8007026:	e7f9      	b.n	800701c <memset+0x4>

08007028 <siprintf>:
 8007028:	b40e      	push	{r1, r2, r3}
 800702a:	b500      	push	{lr}
 800702c:	b09c      	sub	sp, #112	; 0x70
 800702e:	ab1d      	add	r3, sp, #116	; 0x74
 8007030:	9002      	str	r0, [sp, #8]
 8007032:	9006      	str	r0, [sp, #24]
 8007034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007038:	4809      	ldr	r0, [pc, #36]	; (8007060 <siprintf+0x38>)
 800703a:	9107      	str	r1, [sp, #28]
 800703c:	9104      	str	r1, [sp, #16]
 800703e:	4909      	ldr	r1, [pc, #36]	; (8007064 <siprintf+0x3c>)
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	9105      	str	r1, [sp, #20]
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	a902      	add	r1, sp, #8
 800704c:	f000 f866 	bl	800711c <_svfiprintf_r>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	b01c      	add	sp, #112	; 0x70
 8007058:	f85d eb04 	ldr.w	lr, [sp], #4
 800705c:	b003      	add	sp, #12
 800705e:	4770      	bx	lr
 8007060:	2000001c 	.word	0x2000001c
 8007064:	ffff0208 	.word	0xffff0208

08007068 <__ssputs_r>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	688e      	ldr	r6, [r1, #8]
 800706e:	429e      	cmp	r6, r3
 8007070:	4682      	mov	sl, r0
 8007072:	460c      	mov	r4, r1
 8007074:	4690      	mov	r8, r2
 8007076:	4699      	mov	r9, r3
 8007078:	d837      	bhi.n	80070ea <__ssputs_r+0x82>
 800707a:	898a      	ldrh	r2, [r1, #12]
 800707c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007080:	d031      	beq.n	80070e6 <__ssputs_r+0x7e>
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	6909      	ldr	r1, [r1, #16]
 8007086:	1a6f      	subs	r7, r5, r1
 8007088:	6965      	ldr	r5, [r4, #20]
 800708a:	2302      	movs	r3, #2
 800708c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007090:	fb95 f5f3 	sdiv	r5, r5, r3
 8007094:	f109 0301 	add.w	r3, r9, #1
 8007098:	443b      	add	r3, r7
 800709a:	429d      	cmp	r5, r3
 800709c:	bf38      	it	cc
 800709e:	461d      	movcc	r5, r3
 80070a0:	0553      	lsls	r3, r2, #21
 80070a2:	d530      	bpl.n	8007106 <__ssputs_r+0x9e>
 80070a4:	4629      	mov	r1, r5
 80070a6:	f000 fb21 	bl	80076ec <_malloc_r>
 80070aa:	4606      	mov	r6, r0
 80070ac:	b950      	cbnz	r0, 80070c4 <__ssputs_r+0x5c>
 80070ae:	230c      	movs	r3, #12
 80070b0:	f8ca 3000 	str.w	r3, [sl]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	463a      	mov	r2, r7
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	f7ff ff9b 	bl	8007002 <memcpy>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	6126      	str	r6, [r4, #16]
 80070da:	6165      	str	r5, [r4, #20]
 80070dc:	443e      	add	r6, r7
 80070de:	1bed      	subs	r5, r5, r7
 80070e0:	6026      	str	r6, [r4, #0]
 80070e2:	60a5      	str	r5, [r4, #8]
 80070e4:	464e      	mov	r6, r9
 80070e6:	454e      	cmp	r6, r9
 80070e8:	d900      	bls.n	80070ec <__ssputs_r+0x84>
 80070ea:	464e      	mov	r6, r9
 80070ec:	4632      	mov	r2, r6
 80070ee:	4641      	mov	r1, r8
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	f000 fa93 	bl	800761c <memmove>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	1b9b      	subs	r3, r3, r6
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	441e      	add	r6, r3
 8007100:	6026      	str	r6, [r4, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	e7dc      	b.n	80070c0 <__ssputs_r+0x58>
 8007106:	462a      	mov	r2, r5
 8007108:	f000 fb4a 	bl	80077a0 <_realloc_r>
 800710c:	4606      	mov	r6, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d1e2      	bne.n	80070d8 <__ssputs_r+0x70>
 8007112:	6921      	ldr	r1, [r4, #16]
 8007114:	4650      	mov	r0, sl
 8007116:	f000 fa9b 	bl	8007650 <_free_r>
 800711a:	e7c8      	b.n	80070ae <__ssputs_r+0x46>

0800711c <_svfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	461d      	mov	r5, r3
 8007122:	898b      	ldrh	r3, [r1, #12]
 8007124:	061f      	lsls	r7, r3, #24
 8007126:	b09d      	sub	sp, #116	; 0x74
 8007128:	4680      	mov	r8, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4616      	mov	r6, r2
 800712e:	d50f      	bpl.n	8007150 <_svfiprintf_r+0x34>
 8007130:	690b      	ldr	r3, [r1, #16]
 8007132:	b96b      	cbnz	r3, 8007150 <_svfiprintf_r+0x34>
 8007134:	2140      	movs	r1, #64	; 0x40
 8007136:	f000 fad9 	bl	80076ec <_malloc_r>
 800713a:	6020      	str	r0, [r4, #0]
 800713c:	6120      	str	r0, [r4, #16]
 800713e:	b928      	cbnz	r0, 800714c <_svfiprintf_r+0x30>
 8007140:	230c      	movs	r3, #12
 8007142:	f8c8 3000 	str.w	r3, [r8]
 8007146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800714a:	e0c8      	b.n	80072de <_svfiprintf_r+0x1c2>
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	2300      	movs	r3, #0
 8007152:	9309      	str	r3, [sp, #36]	; 0x24
 8007154:	2320      	movs	r3, #32
 8007156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715a:	2330      	movs	r3, #48	; 0x30
 800715c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007160:	9503      	str	r5, [sp, #12]
 8007162:	f04f 0b01 	mov.w	fp, #1
 8007166:	4637      	mov	r7, r6
 8007168:	463d      	mov	r5, r7
 800716a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800716e:	b10b      	cbz	r3, 8007174 <_svfiprintf_r+0x58>
 8007170:	2b25      	cmp	r3, #37	; 0x25
 8007172:	d13e      	bne.n	80071f2 <_svfiprintf_r+0xd6>
 8007174:	ebb7 0a06 	subs.w	sl, r7, r6
 8007178:	d00b      	beq.n	8007192 <_svfiprintf_r+0x76>
 800717a:	4653      	mov	r3, sl
 800717c:	4632      	mov	r2, r6
 800717e:	4621      	mov	r1, r4
 8007180:	4640      	mov	r0, r8
 8007182:	f7ff ff71 	bl	8007068 <__ssputs_r>
 8007186:	3001      	adds	r0, #1
 8007188:	f000 80a4 	beq.w	80072d4 <_svfiprintf_r+0x1b8>
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	4453      	add	r3, sl
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	783b      	ldrb	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 809d 	beq.w	80072d4 <_svfiprintf_r+0x1b8>
 800719a:	2300      	movs	r3, #0
 800719c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ac:	931a      	str	r3, [sp, #104]	; 0x68
 80071ae:	462f      	mov	r7, r5
 80071b0:	2205      	movs	r2, #5
 80071b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071b6:	4850      	ldr	r0, [pc, #320]	; (80072f8 <_svfiprintf_r+0x1dc>)
 80071b8:	f7f9 f85a 	bl	8000270 <memchr>
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	b9d0      	cbnz	r0, 80071f6 <_svfiprintf_r+0xda>
 80071c0:	06d9      	lsls	r1, r3, #27
 80071c2:	bf44      	itt	mi
 80071c4:	2220      	movmi	r2, #32
 80071c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ca:	071a      	lsls	r2, r3, #28
 80071cc:	bf44      	itt	mi
 80071ce:	222b      	movmi	r2, #43	; 0x2b
 80071d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071d4:	782a      	ldrb	r2, [r5, #0]
 80071d6:	2a2a      	cmp	r2, #42	; 0x2a
 80071d8:	d015      	beq.n	8007206 <_svfiprintf_r+0xea>
 80071da:	9a07      	ldr	r2, [sp, #28]
 80071dc:	462f      	mov	r7, r5
 80071de:	2000      	movs	r0, #0
 80071e0:	250a      	movs	r5, #10
 80071e2:	4639      	mov	r1, r7
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	; 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94d      	bls.n	800728a <_svfiprintf_r+0x16e>
 80071ee:	b1b8      	cbz	r0, 8007220 <_svfiprintf_r+0x104>
 80071f0:	e00f      	b.n	8007212 <_svfiprintf_r+0xf6>
 80071f2:	462f      	mov	r7, r5
 80071f4:	e7b8      	b.n	8007168 <_svfiprintf_r+0x4c>
 80071f6:	4a40      	ldr	r2, [pc, #256]	; (80072f8 <_svfiprintf_r+0x1dc>)
 80071f8:	1a80      	subs	r0, r0, r2
 80071fa:	fa0b f000 	lsl.w	r0, fp, r0
 80071fe:	4318      	orrs	r0, r3
 8007200:	9004      	str	r0, [sp, #16]
 8007202:	463d      	mov	r5, r7
 8007204:	e7d3      	b.n	80071ae <_svfiprintf_r+0x92>
 8007206:	9a03      	ldr	r2, [sp, #12]
 8007208:	1d11      	adds	r1, r2, #4
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	9103      	str	r1, [sp, #12]
 800720e:	2a00      	cmp	r2, #0
 8007210:	db01      	blt.n	8007216 <_svfiprintf_r+0xfa>
 8007212:	9207      	str	r2, [sp, #28]
 8007214:	e004      	b.n	8007220 <_svfiprintf_r+0x104>
 8007216:	4252      	negs	r2, r2
 8007218:	f043 0302 	orr.w	r3, r3, #2
 800721c:	9207      	str	r2, [sp, #28]
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	783b      	ldrb	r3, [r7, #0]
 8007222:	2b2e      	cmp	r3, #46	; 0x2e
 8007224:	d10c      	bne.n	8007240 <_svfiprintf_r+0x124>
 8007226:	787b      	ldrb	r3, [r7, #1]
 8007228:	2b2a      	cmp	r3, #42	; 0x2a
 800722a:	d133      	bne.n	8007294 <_svfiprintf_r+0x178>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	1d1a      	adds	r2, r3, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	9203      	str	r2, [sp, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	bfb8      	it	lt
 8007238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800723c:	3702      	adds	r7, #2
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	4d2e      	ldr	r5, [pc, #184]	; (80072fc <_svfiprintf_r+0x1e0>)
 8007242:	7839      	ldrb	r1, [r7, #0]
 8007244:	2203      	movs	r2, #3
 8007246:	4628      	mov	r0, r5
 8007248:	f7f9 f812 	bl	8000270 <memchr>
 800724c:	b138      	cbz	r0, 800725e <_svfiprintf_r+0x142>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	1b40      	subs	r0, r0, r5
 8007252:	fa03 f000 	lsl.w	r0, r3, r0
 8007256:	9b04      	ldr	r3, [sp, #16]
 8007258:	4303      	orrs	r3, r0
 800725a:	3701      	adds	r7, #1
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	7839      	ldrb	r1, [r7, #0]
 8007260:	4827      	ldr	r0, [pc, #156]	; (8007300 <_svfiprintf_r+0x1e4>)
 8007262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007266:	2206      	movs	r2, #6
 8007268:	1c7e      	adds	r6, r7, #1
 800726a:	f7f9 f801 	bl	8000270 <memchr>
 800726e:	2800      	cmp	r0, #0
 8007270:	d038      	beq.n	80072e4 <_svfiprintf_r+0x1c8>
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <_svfiprintf_r+0x1e8>)
 8007274:	bb13      	cbnz	r3, 80072bc <_svfiprintf_r+0x1a0>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	3307      	adds	r3, #7
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	3308      	adds	r3, #8
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	444b      	add	r3, r9
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	e76d      	b.n	8007166 <_svfiprintf_r+0x4a>
 800728a:	fb05 3202 	mla	r2, r5, r2, r3
 800728e:	2001      	movs	r0, #1
 8007290:	460f      	mov	r7, r1
 8007292:	e7a6      	b.n	80071e2 <_svfiprintf_r+0xc6>
 8007294:	2300      	movs	r3, #0
 8007296:	3701      	adds	r7, #1
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	4619      	mov	r1, r3
 800729c:	250a      	movs	r5, #10
 800729e:	4638      	mov	r0, r7
 80072a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a4:	3a30      	subs	r2, #48	; 0x30
 80072a6:	2a09      	cmp	r2, #9
 80072a8:	d903      	bls.n	80072b2 <_svfiprintf_r+0x196>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0c8      	beq.n	8007240 <_svfiprintf_r+0x124>
 80072ae:	9105      	str	r1, [sp, #20]
 80072b0:	e7c6      	b.n	8007240 <_svfiprintf_r+0x124>
 80072b2:	fb05 2101 	mla	r1, r5, r1, r2
 80072b6:	2301      	movs	r3, #1
 80072b8:	4607      	mov	r7, r0
 80072ba:	e7f0      	b.n	800729e <_svfiprintf_r+0x182>
 80072bc:	ab03      	add	r3, sp, #12
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4622      	mov	r2, r4
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <_svfiprintf_r+0x1ec>)
 80072c4:	a904      	add	r1, sp, #16
 80072c6:	4640      	mov	r0, r8
 80072c8:	f3af 8000 	nop.w
 80072cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80072d0:	4681      	mov	r9, r0
 80072d2:	d1d6      	bne.n	8007282 <_svfiprintf_r+0x166>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	065b      	lsls	r3, r3, #25
 80072d8:	f53f af35 	bmi.w	8007146 <_svfiprintf_r+0x2a>
 80072dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072de:	b01d      	add	sp, #116	; 0x74
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	ab03      	add	r3, sp, #12
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4622      	mov	r2, r4
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <_svfiprintf_r+0x1ec>)
 80072ec:	a904      	add	r1, sp, #16
 80072ee:	4640      	mov	r0, r8
 80072f0:	f000 f882 	bl	80073f8 <_printf_i>
 80072f4:	e7ea      	b.n	80072cc <_svfiprintf_r+0x1b0>
 80072f6:	bf00      	nop
 80072f8:	080079b8 	.word	0x080079b8
 80072fc:	080079be 	.word	0x080079be
 8007300:	080079c2 	.word	0x080079c2
 8007304:	00000000 	.word	0x00000000
 8007308:	08007069 	.word	0x08007069

0800730c <_printf_common>:
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	4691      	mov	r9, r2
 8007312:	461f      	mov	r7, r3
 8007314:	688a      	ldr	r2, [r1, #8]
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800731c:	4293      	cmp	r3, r2
 800731e:	bfb8      	it	lt
 8007320:	4613      	movlt	r3, r2
 8007322:	f8c9 3000 	str.w	r3, [r9]
 8007326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	b112      	cbz	r2, 8007336 <_printf_common+0x2a>
 8007330:	3301      	adds	r3, #1
 8007332:	f8c9 3000 	str.w	r3, [r9]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	0699      	lsls	r1, r3, #26
 800733a:	bf42      	ittt	mi
 800733c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007340:	3302      	addmi	r3, #2
 8007342:	f8c9 3000 	strmi.w	r3, [r9]
 8007346:	6825      	ldr	r5, [r4, #0]
 8007348:	f015 0506 	ands.w	r5, r5, #6
 800734c:	d107      	bne.n	800735e <_printf_common+0x52>
 800734e:	f104 0a19 	add.w	sl, r4, #25
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	f8d9 2000 	ldr.w	r2, [r9]
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	42ab      	cmp	r3, r5
 800735c:	dc28      	bgt.n	80073b0 <_printf_common+0xa4>
 800735e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	3300      	adds	r3, #0
 8007366:	bf18      	it	ne
 8007368:	2301      	movne	r3, #1
 800736a:	0692      	lsls	r2, r2, #26
 800736c:	d42d      	bmi.n	80073ca <_printf_common+0xbe>
 800736e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007372:	4639      	mov	r1, r7
 8007374:	4630      	mov	r0, r6
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d020      	beq.n	80073be <_printf_common+0xb2>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	68e5      	ldr	r5, [r4, #12]
 8007380:	f8d9 2000 	ldr.w	r2, [r9]
 8007384:	f003 0306 	and.w	r3, r3, #6
 8007388:	2b04      	cmp	r3, #4
 800738a:	bf08      	it	eq
 800738c:	1aad      	subeq	r5, r5, r2
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	bf0c      	ite	eq
 8007394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007398:	2500      	movne	r5, #0
 800739a:	4293      	cmp	r3, r2
 800739c:	bfc4      	itt	gt
 800739e:	1a9b      	subgt	r3, r3, r2
 80073a0:	18ed      	addgt	r5, r5, r3
 80073a2:	f04f 0900 	mov.w	r9, #0
 80073a6:	341a      	adds	r4, #26
 80073a8:	454d      	cmp	r5, r9
 80073aa:	d11a      	bne.n	80073e2 <_printf_common+0xd6>
 80073ac:	2000      	movs	r0, #0
 80073ae:	e008      	b.n	80073c2 <_printf_common+0xb6>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4652      	mov	r2, sl
 80073b4:	4639      	mov	r1, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d103      	bne.n	80073c6 <_printf_common+0xba>
 80073be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	3501      	adds	r5, #1
 80073c8:	e7c3      	b.n	8007352 <_printf_common+0x46>
 80073ca:	18e1      	adds	r1, r4, r3
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	2030      	movs	r0, #48	; 0x30
 80073d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d4:	4422      	add	r2, r4
 80073d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073de:	3302      	adds	r3, #2
 80073e0:	e7c5      	b.n	800736e <_printf_common+0x62>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4622      	mov	r2, r4
 80073e6:	4639      	mov	r1, r7
 80073e8:	4630      	mov	r0, r6
 80073ea:	47c0      	blx	r8
 80073ec:	3001      	adds	r0, #1
 80073ee:	d0e6      	beq.n	80073be <_printf_common+0xb2>
 80073f0:	f109 0901 	add.w	r9, r9, #1
 80073f4:	e7d8      	b.n	80073a8 <_printf_common+0x9c>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007400:	460c      	mov	r4, r1
 8007402:	7e09      	ldrb	r1, [r1, #24]
 8007404:	b085      	sub	sp, #20
 8007406:	296e      	cmp	r1, #110	; 0x6e
 8007408:	4617      	mov	r7, r2
 800740a:	4606      	mov	r6, r0
 800740c:	4698      	mov	r8, r3
 800740e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007410:	f000 80b3 	beq.w	800757a <_printf_i+0x182>
 8007414:	d822      	bhi.n	800745c <_printf_i+0x64>
 8007416:	2963      	cmp	r1, #99	; 0x63
 8007418:	d036      	beq.n	8007488 <_printf_i+0x90>
 800741a:	d80a      	bhi.n	8007432 <_printf_i+0x3a>
 800741c:	2900      	cmp	r1, #0
 800741e:	f000 80b9 	beq.w	8007594 <_printf_i+0x19c>
 8007422:	2958      	cmp	r1, #88	; 0x58
 8007424:	f000 8083 	beq.w	800752e <_printf_i+0x136>
 8007428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007430:	e032      	b.n	8007498 <_printf_i+0xa0>
 8007432:	2964      	cmp	r1, #100	; 0x64
 8007434:	d001      	beq.n	800743a <_printf_i+0x42>
 8007436:	2969      	cmp	r1, #105	; 0x69
 8007438:	d1f6      	bne.n	8007428 <_printf_i+0x30>
 800743a:	6820      	ldr	r0, [r4, #0]
 800743c:	6813      	ldr	r3, [r2, #0]
 800743e:	0605      	lsls	r5, r0, #24
 8007440:	f103 0104 	add.w	r1, r3, #4
 8007444:	d52a      	bpl.n	800749c <_printf_i+0xa4>
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6011      	str	r1, [r2, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da03      	bge.n	8007456 <_printf_i+0x5e>
 800744e:	222d      	movs	r2, #45	; 0x2d
 8007450:	425b      	negs	r3, r3
 8007452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007456:	486f      	ldr	r0, [pc, #444]	; (8007614 <_printf_i+0x21c>)
 8007458:	220a      	movs	r2, #10
 800745a:	e039      	b.n	80074d0 <_printf_i+0xd8>
 800745c:	2973      	cmp	r1, #115	; 0x73
 800745e:	f000 809d 	beq.w	800759c <_printf_i+0x1a4>
 8007462:	d808      	bhi.n	8007476 <_printf_i+0x7e>
 8007464:	296f      	cmp	r1, #111	; 0x6f
 8007466:	d020      	beq.n	80074aa <_printf_i+0xb2>
 8007468:	2970      	cmp	r1, #112	; 0x70
 800746a:	d1dd      	bne.n	8007428 <_printf_i+0x30>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	e003      	b.n	800747e <_printf_i+0x86>
 8007476:	2975      	cmp	r1, #117	; 0x75
 8007478:	d017      	beq.n	80074aa <_printf_i+0xb2>
 800747a:	2978      	cmp	r1, #120	; 0x78
 800747c:	d1d4      	bne.n	8007428 <_printf_i+0x30>
 800747e:	2378      	movs	r3, #120	; 0x78
 8007480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007484:	4864      	ldr	r0, [pc, #400]	; (8007618 <_printf_i+0x220>)
 8007486:	e055      	b.n	8007534 <_printf_i+0x13c>
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	1d19      	adds	r1, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6011      	str	r1, [r2, #0]
 8007490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007498:	2301      	movs	r3, #1
 800749a:	e08c      	b.n	80075b6 <_printf_i+0x1be>
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6011      	str	r1, [r2, #0]
 80074a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074a4:	bf18      	it	ne
 80074a6:	b21b      	sxthne	r3, r3
 80074a8:	e7cf      	b.n	800744a <_printf_i+0x52>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6010      	str	r0, [r2, #0]
 80074b2:	0628      	lsls	r0, r5, #24
 80074b4:	d501      	bpl.n	80074ba <_printf_i+0xc2>
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	e002      	b.n	80074c0 <_printf_i+0xc8>
 80074ba:	0668      	lsls	r0, r5, #25
 80074bc:	d5fb      	bpl.n	80074b6 <_printf_i+0xbe>
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	4854      	ldr	r0, [pc, #336]	; (8007614 <_printf_i+0x21c>)
 80074c2:	296f      	cmp	r1, #111	; 0x6f
 80074c4:	bf14      	ite	ne
 80074c6:	220a      	movne	r2, #10
 80074c8:	2208      	moveq	r2, #8
 80074ca:	2100      	movs	r1, #0
 80074cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d0:	6865      	ldr	r5, [r4, #4]
 80074d2:	60a5      	str	r5, [r4, #8]
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	f2c0 8095 	blt.w	8007604 <_printf_i+0x20c>
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	f021 0104 	bic.w	r1, r1, #4
 80074e0:	6021      	str	r1, [r4, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d13d      	bne.n	8007562 <_printf_i+0x16a>
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	f040 808e 	bne.w	8007608 <_printf_i+0x210>
 80074ec:	4665      	mov	r5, ip
 80074ee:	2a08      	cmp	r2, #8
 80074f0:	d10b      	bne.n	800750a <_printf_i+0x112>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07db      	lsls	r3, r3, #31
 80074f6:	d508      	bpl.n	800750a <_printf_i+0x112>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	bfde      	ittt	le
 8007500:	2330      	movle	r3, #48	; 0x30
 8007502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007506:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800750a:	ebac 0305 	sub.w	r3, ip, r5
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	f8cd 8000 	str.w	r8, [sp]
 8007514:	463b      	mov	r3, r7
 8007516:	aa03      	add	r2, sp, #12
 8007518:	4621      	mov	r1, r4
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff fef6 	bl	800730c <_printf_common>
 8007520:	3001      	adds	r0, #1
 8007522:	d14d      	bne.n	80075c0 <_printf_i+0x1c8>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007528:	b005      	add	sp, #20
 800752a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752e:	4839      	ldr	r0, [pc, #228]	; (8007614 <_printf_i+0x21c>)
 8007530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007534:	6813      	ldr	r3, [r2, #0]
 8007536:	6821      	ldr	r1, [r4, #0]
 8007538:	1d1d      	adds	r5, r3, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6015      	str	r5, [r2, #0]
 800753e:	060a      	lsls	r2, r1, #24
 8007540:	d50b      	bpl.n	800755a <_printf_i+0x162>
 8007542:	07ca      	lsls	r2, r1, #31
 8007544:	bf44      	itt	mi
 8007546:	f041 0120 	orrmi.w	r1, r1, #32
 800754a:	6021      	strmi	r1, [r4, #0]
 800754c:	b91b      	cbnz	r3, 8007556 <_printf_i+0x15e>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	f022 0220 	bic.w	r2, r2, #32
 8007554:	6022      	str	r2, [r4, #0]
 8007556:	2210      	movs	r2, #16
 8007558:	e7b7      	b.n	80074ca <_printf_i+0xd2>
 800755a:	064d      	lsls	r5, r1, #25
 800755c:	bf48      	it	mi
 800755e:	b29b      	uxthmi	r3, r3
 8007560:	e7ef      	b.n	8007542 <_printf_i+0x14a>
 8007562:	4665      	mov	r5, ip
 8007564:	fbb3 f1f2 	udiv	r1, r3, r2
 8007568:	fb02 3311 	mls	r3, r2, r1, r3
 800756c:	5cc3      	ldrb	r3, [r0, r3]
 800756e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007572:	460b      	mov	r3, r1
 8007574:	2900      	cmp	r1, #0
 8007576:	d1f5      	bne.n	8007564 <_printf_i+0x16c>
 8007578:	e7b9      	b.n	80074ee <_printf_i+0xf6>
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	6961      	ldr	r1, [r4, #20]
 8007580:	1d18      	adds	r0, r3, #4
 8007582:	6010      	str	r0, [r2, #0]
 8007584:	0628      	lsls	r0, r5, #24
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	d501      	bpl.n	800758e <_printf_i+0x196>
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	e002      	b.n	8007594 <_printf_i+0x19c>
 800758e:	066a      	lsls	r2, r5, #25
 8007590:	d5fb      	bpl.n	800758a <_printf_i+0x192>
 8007592:	8019      	strh	r1, [r3, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	4665      	mov	r5, ip
 800759a:	e7b9      	b.n	8007510 <_printf_i+0x118>
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	1d19      	adds	r1, r3, #4
 80075a0:	6011      	str	r1, [r2, #0]
 80075a2:	681d      	ldr	r5, [r3, #0]
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	2100      	movs	r1, #0
 80075a8:	4628      	mov	r0, r5
 80075aa:	f7f8 fe61 	bl	8000270 <memchr>
 80075ae:	b108      	cbz	r0, 80075b4 <_printf_i+0x1bc>
 80075b0:	1b40      	subs	r0, r0, r5
 80075b2:	6060      	str	r0, [r4, #4]
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	2300      	movs	r3, #0
 80075ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075be:	e7a7      	b.n	8007510 <_printf_i+0x118>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4639      	mov	r1, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0aa      	beq.n	8007524 <_printf_i+0x12c>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	079b      	lsls	r3, r3, #30
 80075d2:	d413      	bmi.n	80075fc <_printf_i+0x204>
 80075d4:	68e0      	ldr	r0, [r4, #12]
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	4298      	cmp	r0, r3
 80075da:	bfb8      	it	lt
 80075dc:	4618      	movlt	r0, r3
 80075de:	e7a3      	b.n	8007528 <_printf_i+0x130>
 80075e0:	2301      	movs	r3, #1
 80075e2:	464a      	mov	r2, r9
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d09a      	beq.n	8007524 <_printf_i+0x12c>
 80075ee:	3501      	adds	r5, #1
 80075f0:	68e3      	ldr	r3, [r4, #12]
 80075f2:	9a03      	ldr	r2, [sp, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	42ab      	cmp	r3, r5
 80075f8:	dcf2      	bgt.n	80075e0 <_printf_i+0x1e8>
 80075fa:	e7eb      	b.n	80075d4 <_printf_i+0x1dc>
 80075fc:	2500      	movs	r5, #0
 80075fe:	f104 0919 	add.w	r9, r4, #25
 8007602:	e7f5      	b.n	80075f0 <_printf_i+0x1f8>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1ac      	bne.n	8007562 <_printf_i+0x16a>
 8007608:	7803      	ldrb	r3, [r0, #0]
 800760a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800760e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007612:	e76c      	b.n	80074ee <_printf_i+0xf6>
 8007614:	080079c9 	.word	0x080079c9
 8007618:	080079da 	.word	0x080079da

0800761c <memmove>:
 800761c:	4288      	cmp	r0, r1
 800761e:	b510      	push	{r4, lr}
 8007620:	eb01 0302 	add.w	r3, r1, r2
 8007624:	d807      	bhi.n	8007636 <memmove+0x1a>
 8007626:	1e42      	subs	r2, r0, #1
 8007628:	4299      	cmp	r1, r3
 800762a:	d00a      	beq.n	8007642 <memmove+0x26>
 800762c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007630:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007634:	e7f8      	b.n	8007628 <memmove+0xc>
 8007636:	4283      	cmp	r3, r0
 8007638:	d9f5      	bls.n	8007626 <memmove+0xa>
 800763a:	1881      	adds	r1, r0, r2
 800763c:	1ad2      	subs	r2, r2, r3
 800763e:	42d3      	cmn	r3, r2
 8007640:	d100      	bne.n	8007644 <memmove+0x28>
 8007642:	bd10      	pop	{r4, pc}
 8007644:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007648:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800764c:	e7f7      	b.n	800763e <memmove+0x22>
	...

08007650 <_free_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	2900      	cmp	r1, #0
 8007656:	d045      	beq.n	80076e4 <_free_r+0x94>
 8007658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765c:	1f0c      	subs	r4, r1, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfb8      	it	lt
 8007662:	18e4      	addlt	r4, r4, r3
 8007664:	f000 f8d2 	bl	800780c <__malloc_lock>
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <_free_r+0x98>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	4610      	mov	r0, r2
 800766e:	b933      	cbnz	r3, 800767e <_free_r+0x2e>
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	6014      	str	r4, [r2, #0]
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800767a:	f000 b8c8 	b.w	800780e <__malloc_unlock>
 800767e:	42a3      	cmp	r3, r4
 8007680:	d90c      	bls.n	800769c <_free_r+0x4c>
 8007682:	6821      	ldr	r1, [r4, #0]
 8007684:	1862      	adds	r2, r4, r1
 8007686:	4293      	cmp	r3, r2
 8007688:	bf04      	itt	eq
 800768a:	681a      	ldreq	r2, [r3, #0]
 800768c:	685b      	ldreq	r3, [r3, #4]
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	bf04      	itt	eq
 8007692:	1852      	addeq	r2, r2, r1
 8007694:	6022      	streq	r2, [r4, #0]
 8007696:	6004      	str	r4, [r0, #0]
 8007698:	e7ec      	b.n	8007674 <_free_r+0x24>
 800769a:	4613      	mov	r3, r2
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	b10a      	cbz	r2, 80076a4 <_free_r+0x54>
 80076a0:	42a2      	cmp	r2, r4
 80076a2:	d9fa      	bls.n	800769a <_free_r+0x4a>
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	1858      	adds	r0, r3, r1
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d10b      	bne.n	80076c4 <_free_r+0x74>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	4401      	add	r1, r0
 80076b0:	1858      	adds	r0, r3, r1
 80076b2:	4282      	cmp	r2, r0
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	d1dd      	bne.n	8007674 <_free_r+0x24>
 80076b8:	6810      	ldr	r0, [r2, #0]
 80076ba:	6852      	ldr	r2, [r2, #4]
 80076bc:	605a      	str	r2, [r3, #4]
 80076be:	4401      	add	r1, r0
 80076c0:	6019      	str	r1, [r3, #0]
 80076c2:	e7d7      	b.n	8007674 <_free_r+0x24>
 80076c4:	d902      	bls.n	80076cc <_free_r+0x7c>
 80076c6:	230c      	movs	r3, #12
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	e7d3      	b.n	8007674 <_free_r+0x24>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	1821      	adds	r1, r4, r0
 80076d0:	428a      	cmp	r2, r1
 80076d2:	bf04      	itt	eq
 80076d4:	6811      	ldreq	r1, [r2, #0]
 80076d6:	6852      	ldreq	r2, [r2, #4]
 80076d8:	6062      	str	r2, [r4, #4]
 80076da:	bf04      	itt	eq
 80076dc:	1809      	addeq	r1, r1, r0
 80076de:	6021      	streq	r1, [r4, #0]
 80076e0:	605c      	str	r4, [r3, #4]
 80076e2:	e7c7      	b.n	8007674 <_free_r+0x24>
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	200143dc 	.word	0x200143dc

080076ec <_malloc_r>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	1ccd      	adds	r5, r1, #3
 80076f0:	f025 0503 	bic.w	r5, r5, #3
 80076f4:	3508      	adds	r5, #8
 80076f6:	2d0c      	cmp	r5, #12
 80076f8:	bf38      	it	cc
 80076fa:	250c      	movcc	r5, #12
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	4606      	mov	r6, r0
 8007700:	db01      	blt.n	8007706 <_malloc_r+0x1a>
 8007702:	42a9      	cmp	r1, r5
 8007704:	d903      	bls.n	800770e <_malloc_r+0x22>
 8007706:	230c      	movs	r3, #12
 8007708:	6033      	str	r3, [r6, #0]
 800770a:	2000      	movs	r0, #0
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	f000 f87d 	bl	800780c <__malloc_lock>
 8007712:	4a21      	ldr	r2, [pc, #132]	; (8007798 <_malloc_r+0xac>)
 8007714:	6814      	ldr	r4, [r2, #0]
 8007716:	4621      	mov	r1, r4
 8007718:	b991      	cbnz	r1, 8007740 <_malloc_r+0x54>
 800771a:	4c20      	ldr	r4, [pc, #128]	; (800779c <_malloc_r+0xb0>)
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	b91b      	cbnz	r3, 8007728 <_malloc_r+0x3c>
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f863 	bl	80077ec <_sbrk_r>
 8007726:	6020      	str	r0, [r4, #0]
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f000 f85e 	bl	80077ec <_sbrk_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d124      	bne.n	800777e <_malloc_r+0x92>
 8007734:	230c      	movs	r3, #12
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f868 	bl	800780e <__malloc_unlock>
 800773e:	e7e4      	b.n	800770a <_malloc_r+0x1e>
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	1b5b      	subs	r3, r3, r5
 8007744:	d418      	bmi.n	8007778 <_malloc_r+0x8c>
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d90f      	bls.n	800776a <_malloc_r+0x7e>
 800774a:	600b      	str	r3, [r1, #0]
 800774c:	50cd      	str	r5, [r1, r3]
 800774e:	18cc      	adds	r4, r1, r3
 8007750:	4630      	mov	r0, r6
 8007752:	f000 f85c 	bl	800780e <__malloc_unlock>
 8007756:	f104 000b 	add.w	r0, r4, #11
 800775a:	1d23      	adds	r3, r4, #4
 800775c:	f020 0007 	bic.w	r0, r0, #7
 8007760:	1ac3      	subs	r3, r0, r3
 8007762:	d0d3      	beq.n	800770c <_malloc_r+0x20>
 8007764:	425a      	negs	r2, r3
 8007766:	50e2      	str	r2, [r4, r3]
 8007768:	e7d0      	b.n	800770c <_malloc_r+0x20>
 800776a:	428c      	cmp	r4, r1
 800776c:	684b      	ldr	r3, [r1, #4]
 800776e:	bf16      	itet	ne
 8007770:	6063      	strne	r3, [r4, #4]
 8007772:	6013      	streq	r3, [r2, #0]
 8007774:	460c      	movne	r4, r1
 8007776:	e7eb      	b.n	8007750 <_malloc_r+0x64>
 8007778:	460c      	mov	r4, r1
 800777a:	6849      	ldr	r1, [r1, #4]
 800777c:	e7cc      	b.n	8007718 <_malloc_r+0x2c>
 800777e:	1cc4      	adds	r4, r0, #3
 8007780:	f024 0403 	bic.w	r4, r4, #3
 8007784:	42a0      	cmp	r0, r4
 8007786:	d005      	beq.n	8007794 <_malloc_r+0xa8>
 8007788:	1a21      	subs	r1, r4, r0
 800778a:	4630      	mov	r0, r6
 800778c:	f000 f82e 	bl	80077ec <_sbrk_r>
 8007790:	3001      	adds	r0, #1
 8007792:	d0cf      	beq.n	8007734 <_malloc_r+0x48>
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	e7db      	b.n	8007750 <_malloc_r+0x64>
 8007798:	200143dc 	.word	0x200143dc
 800779c:	200143e0 	.word	0x200143e0

080077a0 <_realloc_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	4607      	mov	r7, r0
 80077a4:	4614      	mov	r4, r2
 80077a6:	460e      	mov	r6, r1
 80077a8:	b921      	cbnz	r1, 80077b4 <_realloc_r+0x14>
 80077aa:	4611      	mov	r1, r2
 80077ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077b0:	f7ff bf9c 	b.w	80076ec <_malloc_r>
 80077b4:	b922      	cbnz	r2, 80077c0 <_realloc_r+0x20>
 80077b6:	f7ff ff4b 	bl	8007650 <_free_r>
 80077ba:	4625      	mov	r5, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c0:	f000 f826 	bl	8007810 <_malloc_usable_size_r>
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d20f      	bcs.n	80077e8 <_realloc_r+0x48>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ff8e 	bl	80076ec <_malloc_r>
 80077d0:	4605      	mov	r5, r0
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0f2      	beq.n	80077bc <_realloc_r+0x1c>
 80077d6:	4631      	mov	r1, r6
 80077d8:	4622      	mov	r2, r4
 80077da:	f7ff fc12 	bl	8007002 <memcpy>
 80077de:	4631      	mov	r1, r6
 80077e0:	4638      	mov	r0, r7
 80077e2:	f7ff ff35 	bl	8007650 <_free_r>
 80077e6:	e7e9      	b.n	80077bc <_realloc_r+0x1c>
 80077e8:	4635      	mov	r5, r6
 80077ea:	e7e7      	b.n	80077bc <_realloc_r+0x1c>

080077ec <_sbrk_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4c06      	ldr	r4, [pc, #24]	; (8007808 <_sbrk_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4605      	mov	r5, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	f000 f812 	bl	8007820 <_sbrk>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_sbrk_r+0x1a>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	b103      	cbz	r3, 8007806 <_sbrk_r+0x1a>
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	20014514 	.word	0x20014514

0800780c <__malloc_lock>:
 800780c:	4770      	bx	lr

0800780e <__malloc_unlock>:
 800780e:	4770      	bx	lr

08007810 <_malloc_usable_size_r>:
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f18      	subs	r0, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfbc      	itt	lt
 800781a:	580b      	ldrlt	r3, [r1, r0]
 800781c:	18c0      	addlt	r0, r0, r3
 800781e:	4770      	bx	lr

08007820 <_sbrk>:
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <_sbrk+0x14>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	4602      	mov	r2, r0
 8007826:	b909      	cbnz	r1, 800782c <_sbrk+0xc>
 8007828:	4903      	ldr	r1, [pc, #12]	; (8007838 <_sbrk+0x18>)
 800782a:	6019      	str	r1, [r3, #0]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	4402      	add	r2, r0
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	4770      	bx	lr
 8007834:	200143e4 	.word	0x200143e4
 8007838:	20014518 	.word	0x20014518

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
