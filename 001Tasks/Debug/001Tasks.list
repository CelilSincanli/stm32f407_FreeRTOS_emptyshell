
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f04  08004f04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e18  20000078  08004f84  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e90  08004f84  00022e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011802  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002725  00000000  00000000  000318aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00033fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00034eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cb6  00000000  00000000  00035c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbd6  00000000  00000000  0005892e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d119e  00000000  00000000  00064504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001356a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004300  00000000  00000000  00135720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e10 	.word	0x08004e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004e10 	.word	0x08004e10

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fbc1 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f843 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8ab 	bl	8000638 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world form Task-1", 2, &task1_handle);
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x7c>)
 80004ee:	22c8      	movs	r2, #200	; 0xc8
 80004f0:	4917      	ldr	r1, [pc, #92]	; (8000550 <main+0x80>)
 80004f2:	4818      	ldr	r0, [pc, #96]	; (8000554 <main+0x84>)
 80004f4:	f002 fa9c 	bl	8002a30 <xTaskCreate>
 80004f8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d009      	beq.n	8000514 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000504:	f383 8811 	msr	BASEPRI, r3
 8000508:	f3bf 8f6f 	isb	sy
 800050c:	f3bf 8f4f 	dsb	sy
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	e7fe      	b.n	8000512 <main+0x42>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world form Task-2", 2, &task2_handle);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <main+0x88>)
 800051e:	22c8      	movs	r2, #200	; 0xc8
 8000520:	490e      	ldr	r1, [pc, #56]	; (800055c <main+0x8c>)
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x90>)
 8000524:	f002 fa84 	bl	8002a30 <xTaskCreate>
 8000528:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d009      	beq.n	8000544 <main+0x74>
 8000530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e7fe      	b.n	8000542 <main+0x72>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000544:	f002 fbaa 	bl	8002c9c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x78>
 800054a:	bf00      	nop
 800054c:	08004e28 	.word	0x08004e28
 8000550:	08004e40 	.word	0x08004e40
 8000554:	080008f9 	.word	0x080008f9
 8000558:	08004e48 	.word	0x08004e48
 800055c:	08004e60 	.word	0x08004e60
 8000560:	0800091d 	.word	0x0800091d

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 ffcd 	bl	8004512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fe0f 	bl	800120c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f9b6 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f868 	bl	80016ec <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f99f 	bl	8000964 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	4ba1      	ldr	r3, [pc, #644]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4aa0      	ldr	r2, [pc, #640]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b9e      	ldr	r3, [pc, #632]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	4b9a      	ldr	r3, [pc, #616]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a99      	ldr	r2, [pc, #612]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b97      	ldr	r3, [pc, #604]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b93      	ldr	r3, [pc, #588]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a92      	ldr	r2, [pc, #584]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b90      	ldr	r3, [pc, #576]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b8c      	ldr	r3, [pc, #560]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a8b      	ldr	r2, [pc, #556]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b89      	ldr	r3, [pc, #548]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b85      	ldr	r3, [pc, #532]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a84      	ldr	r2, [pc, #528]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b82      	ldr	r3, [pc, #520]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b7e      	ldr	r3, [pc, #504]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a7d      	ldr	r2, [pc, #500]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b7b      	ldr	r3, [pc, #492]	; (80008d8 <MX_GPIO_Init+0x2a0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	4878      	ldr	r0, [pc, #480]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006fc:	f000 fd6c 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	4876      	ldr	r0, [pc, #472]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 8000706:	f000 fd67 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070a:	2200      	movs	r2, #0
 800070c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000710:	4874      	ldr	r0, [pc, #464]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 8000712:	f000 fd61 	bl	80011d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000716:	2308      	movs	r3, #8
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	486b      	ldr	r0, [pc, #428]	; (80008dc <MX_GPIO_Init+0x2a4>)
 800072e:	f000 fbb9 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4865      	ldr	r0, [pc, #404]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 800074a:	f000 fbab 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075e:	2305      	movs	r3, #5
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	485d      	ldr	r0, [pc, #372]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 800076a:	f000 fb9b 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	4b5d      	ldr	r3, [pc, #372]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	485a      	ldr	r0, [pc, #360]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000782:	f000 fb8f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000786:	2310      	movs	r3, #16
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000796:	2306      	movs	r3, #6
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4852      	ldr	r0, [pc, #328]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007a2:	f000 fb7f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a6:	23e0      	movs	r3, #224	; 0xe0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b6:	2305      	movs	r3, #5
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	484a      	ldr	r0, [pc, #296]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007c2:	f000 fb6f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c6:	2304      	movs	r3, #4
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007da:	f000 fb63 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f0:	2305      	movs	r3, #5
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	483d      	ldr	r0, [pc, #244]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007fc:	f000 fb52 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000800:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000804:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800081a:	f000 fb43 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800081e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000830:	2306      	movs	r3, #6
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fb32 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000856:	f000 fb25 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800085a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086c:	230a      	movs	r3, #10
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	481d      	ldr	r0, [pc, #116]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000878:	f000 fb14 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087c:	2320      	movs	r3, #32
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 8000890:	f000 fb08 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000894:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089a:	2312      	movs	r3, #18
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a6:	2304      	movs	r3, #4
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80008b2:	f000 faf7 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_GPIO_Init+0x2bc>)
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80008ca:	f000 faeb 	bl	8000ea4 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	10110000 	.word	0x10110000
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400
 80008f4:	10120000 	.word	0x10120000

080008f8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f003 fe6b 	bl	80045dc <puts>
		taskYIELD(); // it leaves the processor
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <task1_handler+0x20>)
 8000908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000916:	e7f3      	b.n	8000900 <task1_handler+0x8>
 8000918:	e000ed04 	.word	0xe000ed04

0800091c <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f003 fe59 	bl	80045dc <puts>
		taskYIELD(); // it leaves the processor
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <task2_handler+0x20>)
 800092c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	f3bf 8f4f 	dsb	sy
 8000936:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800093a:	e7f3      	b.n	8000924 <task2_handler+0x8>
 800093c:	e000ed04 	.word	0xe000ed04

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 f9a5 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40001000 	.word	0x40001000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096a:	e7fe      	b.n	800096a <Error_Handler+0x6>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 fa3d 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	f000 fa56 	bl	8000e88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_InitTick+0xa4>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f850 	bl	8001aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a08:	f001 f83a 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_InitTick+0xa8>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_InitTick+0xac>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <HAL_InitTick+0xb0>)
 8000a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_InitTick+0xac>)
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_InitTick+0xac>)
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_InitTick+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_InitTick+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_InitTick+0xac>)
 8000a42:	f001 f863 	bl	8001b0c <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d104      	bne.n	8000a56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_InitTick+0xac>)
 8000a4e:	f001 f892 	bl	8001b76 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	20012e08 	.word	0x20012e08
 8000a6c:	40001000 	.word	0x40001000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM6_DAC_IRQHandler+0x10>)
 8000aa2:	f001 f88c 	bl	8001bbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20012e08 	.word	0x20012e08

08000ab0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <ITM_SendChar+0x48>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <ITM_SendChar+0x48>)
 8000ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <ITM_SendChar+0x4c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <ITM_SendChar+0x4c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ad2:	bf00      	nop
 8000ad4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f8      	beq.n	8000ad4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ae2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000edfc 	.word	0xe000edfc
 8000afc:	e0000e00 	.word	0xe0000e00

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffab 	bl	8000ab0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x28>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0e:	e003      	b.n	8000c18 <LoopCopyDataInit>

08000c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c16:	3104      	adds	r1, #4

08000c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c20:	d3f6      	bcc.n	8000c10 <CopyDataInit>
  ldr  r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c24:	e002      	b.n	8000c2c <LoopFillZerobss>

08000c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c28:	f842 3b04 	str.w	r3, [r2], #4

08000c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c30:	d3f9      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd3 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 fc3d 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fc49 	bl	80004d0 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c44:	08004f0c 	.word	0x08004f0c
  ldr  r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c4c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000c50:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000c54:	20012e90 	.word	0x20012e90

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8d8 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fe96 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe6c 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20012e48 	.word	0x20012e48

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20012e48 	.word	0x20012e48

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e16b      	b.n	8001198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 815a 	bne.w	8001192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef2:	2b11      	cmp	r3, #17
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0xfc>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80b4 	beq.w	8001192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b5f      	ldr	r3, [pc, #380]	; (80011ac <HAL_GPIO_Init+0x308>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a5e      	ldr	r2, [pc, #376]	; (80011ac <HAL_GPIO_Init+0x308>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <HAL_GPIO_Init+0x308>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a5a      	ldr	r2, [pc, #360]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d02b      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x21a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x216>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x324>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x212>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x328>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_GPIO_Init+0x32c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x20a>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4934      	ldr	r1, [pc, #208]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ea:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HAL_GPIO_Init+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_GPIO_Init+0x330>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x330>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_GPIO_Init+0x330>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f ae90 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	3724      	adds	r7, #36	; 0x24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40021c00 	.word	0x40021c00
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e25b      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d075      	beq.n	8001316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122a:	4ba3      	ldr	r3, [pc, #652]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d00c      	beq.n	8001250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b9d      	ldr	r3, [pc, #628]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124e:	d10b      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4b99      	ldr	r3, [pc, #612]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d05b      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d157      	bne.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e236      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x74>
 8001272:	4b91      	ldr	r3, [pc, #580]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a90      	ldr	r2, [pc, #576]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a8a      	ldr	r2, [pc, #552]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a87      	ldr	r2, [pc, #540]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 80012a4:	4b84      	ldr	r3, [pc, #528]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a83      	ldr	r2, [pc, #524]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b81      	ldr	r3, [pc, #516]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a80      	ldr	r2, [pc, #512]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fd00 	bl	8000cc8 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcfc 	bl	8000cc8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1fb      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcec 	bl	8000cc8 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fce8 	bl	8000cc8 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1e7      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0xe8>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001322:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1bb      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4952      	ldr	r1, [pc, #328]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b4f      	ldr	r3, [pc, #316]	; (80014bc <HAL_RCC_OscConfig+0x2b0>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fca1 	bl	8000cc8 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc9d 	bl	8000cc8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e19c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4940      	ldr	r1, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <HAL_RCC_OscConfig+0x2b0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc80 	bl	8000cc8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc7c 	bl	8000cc8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e17b      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d030      	beq.n	8001458 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_RCC_OscConfig+0x2b4>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fc60 	bl	8000cc8 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc5c 	bl	8000cc8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e15b      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x200>
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x2b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc49 	bl	8000cc8 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fc45 	bl	8000cc8 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e144      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a0 	beq.w	80015a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d121      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc0b 	bl	8000cc8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e011      	b.n	80014da <HAL_RCC_OscConfig+0x2ce>
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	42470000 	.word	0x42470000
 80014c0:	42470e80 	.word	0x42470e80
 80014c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fbfe 	bl	8000cc8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0fd      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b81      	ldr	r3, [pc, #516]	; (80016e0 <HAL_RCC_OscConfig+0x4d4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x2f0>
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	e01c      	b.n	8001536 <HAL_RCC_OscConfig+0x32a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x312>
 8001504:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a76      	ldr	r2, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a73      	ldr	r2, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e00b      	b.n	8001536 <HAL_RCC_OscConfig+0x32a>
 800151e:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a70      	ldr	r2, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a6d      	ldr	r2, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff fbc3 	bl	8000cc8 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fbbf 	bl	8000cc8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0bc      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ee      	beq.n	8001546 <HAL_RCC_OscConfig+0x33a>
 8001568:	e014      	b.n	8001594 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fbad 	bl	8000cc8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fba9 	bl	8000cc8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0a6      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ee      	bne.n	8001572 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d105      	bne.n	80015a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8092 	beq.w	80016d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d05c      	beq.n	8001676 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d141      	bne.n	8001648 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_RCC_OscConfig+0x4dc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb7d 	bl	8000cc8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fb79 	bl	8000cc8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e078      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	4933      	ldr	r1, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_RCC_OscConfig+0x4dc>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb52 	bl	8000cc8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fb4e 	bl	8000cc8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e04d      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x41c>
 8001646:	e045      	b.n	80016d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x4dc>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb3b 	bl	8000cc8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb37 	bl	8000cc8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e036      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x44a>
 8001674:	e02e      	b.n	80016d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e029      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_RCC_OscConfig+0x4d8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d115      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470060 	.word	0x42470060

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0cc      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d90c      	bls.n	8001728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d044      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e067      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4934      	ldr	r1, [pc, #208]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa74 	bl	8000cc8 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa70 	bl	8000cc8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d20c      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001876:	4601      	mov	r1, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	fa21 f303 	lsr.w	r3, r1, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f892 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08004e80 	.word	0x08004e80
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d007      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x32>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d008      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x38>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80b4 	bne.w	8001a4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018e6:	60bb      	str	r3, [r7, #8]
       break;
 80018e8:	e0b3      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ea:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018ec:	60bb      	str	r3, [r7, #8]
      break;
 80018ee:	e0b0      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f0:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fa:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04a      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	ea03 0501 	and.w	r5, r3, r1
 800191c:	ea04 0602 	and.w	r6, r4, r2
 8001920:	4629      	mov	r1, r5
 8001922:	4632      	mov	r2, r6
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f04f 0400 	mov.w	r4, #0
 800192c:	0154      	lsls	r4, r2, #5
 800192e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001932:	014b      	lsls	r3, r1, #5
 8001934:	4619      	mov	r1, r3
 8001936:	4622      	mov	r2, r4
 8001938:	1b49      	subs	r1, r1, r5
 800193a:	eb62 0206 	sbc.w	r2, r2, r6
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	0194      	lsls	r4, r2, #6
 8001948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800194c:	018b      	lsls	r3, r1, #6
 800194e:	1a5b      	subs	r3, r3, r1
 8001950:	eb64 0402 	sbc.w	r4, r4, r2
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	00e2      	lsls	r2, r4, #3
 800195e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001962:	00d9      	lsls	r1, r3, #3
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	195b      	adds	r3, r3, r5
 800196a:	eb44 0406 	adc.w	r4, r4, r6
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	0262      	lsls	r2, r4, #9
 8001978:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800197c:	0259      	lsls	r1, r3, #9
 800197e:	460b      	mov	r3, r1
 8001980:	4614      	mov	r4, r2
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f04f 0400 	mov.w	r4, #0
 800198c:	461a      	mov	r2, r3
 800198e:	4623      	mov	r3, r4
 8001990:	f7fe fc1e 	bl	80001d0 <__aeabi_uldivmod>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e049      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	f04f 0400 	mov.w	r4, #0
 80019a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	ea03 0501 	and.w	r5, r3, r1
 80019b2:	ea04 0602 	and.w	r6, r4, r2
 80019b6:	4629      	mov	r1, r5
 80019b8:	4632      	mov	r2, r6
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f04f 0400 	mov.w	r4, #0
 80019c2:	0154      	lsls	r4, r2, #5
 80019c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c8:	014b      	lsls	r3, r1, #5
 80019ca:	4619      	mov	r1, r3
 80019cc:	4622      	mov	r2, r4
 80019ce:	1b49      	subs	r1, r1, r5
 80019d0:	eb62 0206 	sbc.w	r2, r2, r6
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	f04f 0400 	mov.w	r4, #0
 80019dc:	0194      	lsls	r4, r2, #6
 80019de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e2:	018b      	lsls	r3, r1, #6
 80019e4:	1a5b      	subs	r3, r3, r1
 80019e6:	eb64 0402 	sbc.w	r4, r4, r2
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	00e2      	lsls	r2, r4, #3
 80019f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f8:	00d9      	lsls	r1, r3, #3
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	195b      	adds	r3, r3, r5
 8001a00:	eb44 0406 	adc.w	r4, r4, r6
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	02a2      	lsls	r2, r4, #10
 8001a0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a12:	0299      	lsls	r1, r3, #10
 8001a14:	460b      	mov	r3, r1
 8001a16:	4614      	mov	r4, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f04f 0400 	mov.w	r4, #0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	f7fe fbd3 	bl	80001d0 <__aeabi_uldivmod>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	60bb      	str	r3, [r7, #8]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a4e:	60bb      	str	r3, [r7, #8]
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	68bb      	ldr	r3, [r7, #8]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	00f42400 	.word	0x00f42400
 8001a64:	007a1200 	.word	0x007a1200

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff0 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08004e90 	.word	0x08004e90

08001aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_RCC_GetClockConfig+0x60>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e01d      	b.n	8001b5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f815 	bl	8001b62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 f968 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d007      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d122      	bne.n	8001c1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d11b      	bne.n	8001c1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0202 	mvn.w	r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8ee 	bl	8001de2 <HAL_TIM_IC_CaptureCallback>
 8001c06:	e005      	b.n	8001c14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8e0 	bl	8001dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8f1 	bl	8001df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d122      	bne.n	8001c6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d11b      	bne.n	8001c6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 0204 	mvn.w	r2, #4
 8001c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8c4 	bl	8001de2 <HAL_TIM_IC_CaptureCallback>
 8001c5a:	e005      	b.n	8001c68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8b6 	bl	8001dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8c7 	bl	8001df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d122      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11b      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0208 	mvn.w	r2, #8
 8001c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f89a 	bl	8001de2 <HAL_TIM_IC_CaptureCallback>
 8001cae:	e005      	b.n	8001cbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f88c 	bl	8001dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f89d 	bl	8001df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d122      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d11b      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0210 	mvn.w	r2, #16
 8001ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2208      	movs	r2, #8
 8001cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f870 	bl	8001de2 <HAL_TIM_IC_CaptureCallback>
 8001d02:	e005      	b.n	8001d10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f862 	bl	8001dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f873 	bl	8001df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10e      	bne.n	8001d42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0201 	mvn.w	r2, #1
 8001d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7fe fdff 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d10e      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	2b80      	cmp	r3, #128	; 0x80
 8001d5c:	d107      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f903 	bl	8001f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b40      	cmp	r3, #64	; 0x40
 8001d7a:	d10e      	bne.n	8001d9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b40      	cmp	r3, #64	; 0x40
 8001d88:	d107      	bne.n	8001d9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f838 	bl	8001e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d10e      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d107      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0220 	mvn.w	r2, #32
 8001dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8cd 	bl	8001f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <TIM_Base_SetConfig+0x114>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3e:	d00f      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3d      	ldr	r2, [pc, #244]	; (8001f38 <TIM_Base_SetConfig+0x118>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <TIM_Base_SetConfig+0x11c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <TIM_Base_SetConfig+0x120>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x40>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <TIM_Base_SetConfig+0x124>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <TIM_Base_SetConfig+0x114>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d027      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <TIM_Base_SetConfig+0x118>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d023      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <TIM_Base_SetConfig+0x11c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <TIM_Base_SetConfig+0x120>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <TIM_Base_SetConfig+0x124>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d017      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <TIM_Base_SetConfig+0x128>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <TIM_Base_SetConfig+0x12c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00f      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <TIM_Base_SetConfig+0x130>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <TIM_Base_SetConfig+0x134>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <TIM_Base_SetConfig+0x138>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <TIM_Base_SetConfig+0x13c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <TIM_Base_SetConfig+0x114>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <TIM_Base_SetConfig+0xf8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <TIM_Base_SetConfig+0x124>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d103      	bne.n	8001f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40000800 	.word	0x40000800
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	40010400 	.word	0x40010400
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800
 8001f54:	40001800 	.word	0x40001800
 8001f58:	40001c00 	.word	0x40001c00
 8001f5c:	40002000 	.word	0x40002000

08001f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 0208 	add.w	r2, r3, #8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 0208 	add.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002040:	d103      	bne.n	800204a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e00c      	b.n	8002064 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3308      	adds	r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e002      	b.n	8002058 <vListInsert+0x2e>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d2f6      	bcs.n	8002052 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6892      	ldr	r2, [r2, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6852      	ldr	r2, [r2, #4]
 80020bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d103      	bne.n	80020d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <xQueueGenericReset+0x28>
 8002104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	e7fe      	b.n	8002116 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002118:	f001 feba 	bl	8003e90 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	441a      	add	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	3b01      	subs	r3, #1
 800214a:	68f9      	ldr	r1, [r7, #12]
 800214c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	441a      	add	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	22ff      	movs	r2, #255	; 0xff
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <xQueueGenericReset+0x92>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00f      	beq.n	8002196 <xQueueGenericReset+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3310      	adds	r3, #16
 800217a:	4618      	mov	r0, r3
 800217c:	f000 ffc6 	bl	800310c <xTaskRemoveFromEventList>
 8002180:	e009      	b.n	8002196 <xQueueGenericReset+0xa6>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3310      	adds	r3, #16
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fefe 	bl	8001f88 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3324      	adds	r3, #36	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fef9 	bl	8001f88 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002196:	f001 fea9 	bl	8003eec <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <xQueueGenericCreate+0x28>
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	e7fe      	b.n	80021ca <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <xQueueGenericCreate+0x46>
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d101      	bne.n	80021ee <xQueueGenericCreate+0x4a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <xQueueGenericCreate+0x4c>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <xQueueGenericCreate+0x64>
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e7fe      	b.n	8002206 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800220e:	d909      	bls.n	8002224 <xQueueGenericCreate+0x80>
 8002210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e7fe      	b.n	8002222 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	4618      	mov	r0, r3
 800222a:	f001 ff4b 	bl	80040c4 <pvPortMalloc>
 800222e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3350      	adds	r3, #80	; 0x50
 800223e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f805 	bl	800225c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002252:	6a3b      	ldr	r3, [r7, #32]
    }
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e002      	b.n	800227e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800228a:	2101      	movs	r1, #1
 800228c:	69b8      	ldr	r0, [r7, #24]
 800228e:	f7ff ff2f 	bl	80020f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <xQueueGenericSend+0x30>
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <xQueueGenericSend+0x3e>
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <xQueueGenericSend+0x42>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <xQueueGenericSend+0x44>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <xQueueGenericSend+0x5c>
 80022ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f0:	f383 8811 	msr	BASEPRI, r3
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	f3bf 8f4f 	dsb	sy
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e7fe      	b.n	80022fe <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d103      	bne.n	800230e <xQueueGenericSend+0x6a>
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <xQueueGenericSend+0x6e>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <xQueueGenericSend+0x70>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <xQueueGenericSend+0x88>
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	e7fe      	b.n	800232a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800232c:	f001 f880 	bl	8003430 <xTaskGetSchedulerState>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <xQueueGenericSend+0x98>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <xQueueGenericSend+0x9c>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <xQueueGenericSend+0x9e>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <xQueueGenericSend+0xb6>
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e7fe      	b.n	8002358 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800235a:	f001 fd99 	bl	8003e90 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <xQueueGenericSend+0xcc>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d112      	bne.n	8002396 <xQueueGenericSend+0xf2>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002376:	f000 f9ef 	bl	8002758 <prvCopyDataToQueue>
 800237a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <xQueueGenericSend+0xea>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	3324      	adds	r3, #36	; 0x24
 8002388:	4618      	mov	r0, r3
 800238a:	f000 febf 	bl	800310c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800238e:	f001 fdad 	bl	8003eec <vPortExitCritical>
                return pdPASS;
 8002392:	2301      	movs	r3, #1
 8002394:	e062      	b.n	800245c <xQueueGenericSend+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <xQueueGenericSend+0x100>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800239c:	f001 fda6 	bl	8003eec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e05b      	b.n	800245c <xQueueGenericSend+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <xQueueGenericSend+0x114>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 ff0e 	bl	80031d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023b8:	f001 fd98 	bl	8003eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023bc:	f000 fcbe 	bl	8002d3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023c0:	f001 fd66 	bl	8003e90 <vPortEnterCritical>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d0:	d103      	bne.n	80023da <xQueueGenericSend+0x136>
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e6:	d103      	bne.n	80023f0 <xQueueGenericSend+0x14c>
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023f0:	f001 fd7c 	bl	8003eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023f4:	1d3a      	adds	r2, r7, #4
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fefd 	bl	80031fc <xTaskCheckForTimeOut>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d123      	bne.n	8002450 <xQueueGenericSend+0x1ac>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800240a:	f000 fa9d 	bl	8002948 <prvIsQueueFull>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <xQueueGenericSend+0x1a0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	3310      	adds	r3, #16
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fe27 	bl	8003070 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002424:	f000 fa28 	bl	8002878 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002428:	f000 fc96 	bl	8002d58 <xTaskResumeAll>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d193      	bne.n	800235a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <xQueueGenericSend+0x1c0>)
 8002434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	e78a      	b.n	800235a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002446:	f000 fa17 	bl	8002878 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800244a:	f000 fc85 	bl	8002d58 <xTaskResumeAll>
 800244e:	e784      	b.n	800235a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002452:	f000 fa11 	bl	8002878 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002456:	f000 fc7f 	bl	8002d58 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800245a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800245c:	4618      	mov	r0, r3
 800245e:	3738      	adds	r7, #56	; 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b090      	sub	sp, #64	; 0x40
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <xQueueGenericSendFromISR+0x2c>
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
 8002492:	e7fe      	b.n	8002492 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <xQueueGenericSendFromISR+0x3a>
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <xQueueGenericSendFromISR+0x3e>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <xQueueGenericSendFromISR+0x40>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <xQueueGenericSendFromISR+0x58>
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	e7fe      	b.n	80024be <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSendFromISR+0x66>
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSendFromISR+0x6a>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSendFromISR+0x6c>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <xQueueGenericSendFromISR+0x84>
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	e7fe      	b.n	80024ea <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024ec:	f001 fdac 	bl	8004048 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80024f0:	f3ef 8211 	mrs	r2, BASEPRI
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002508:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	429a      	cmp	r2, r3
 8002516:	d302      	bcc.n	800251e <xQueueGenericSendFromISR+0xb6>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d13d      	bne.n	800259a <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002534:	f000 f910 	bl	8002758 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002538:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002540:	d112      	bne.n	8002568 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	3324      	adds	r3, #36	; 0x24
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fddc 	bl	800310c <xTaskRemoveFromEventList>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d019      	beq.n	8002594 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e015      	b.n	8002594 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002568:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800256c:	2b7f      	cmp	r3, #127	; 0x7f
 800256e:	d109      	bne.n	8002584 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e7fe      	b.n	8002582 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002588:	3301      	adds	r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	b25a      	sxtb	r2, r3
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002598:	e001      	b.n	800259e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800259a:	2300      	movs	r3, #0
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3740      	adds	r7, #64	; 0x40
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <xQueueReceive+0x2e>
        __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	e7fe      	b.n	80025e0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <xQueueReceive+0x3c>
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <xQueueReceive+0x40>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <xQueueReceive+0x42>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <xQueueReceive+0x5a>
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	e7fe      	b.n	800260c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800260e:	f000 ff0f 	bl	8003430 <xTaskGetSchedulerState>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <xQueueReceive+0x6a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <xQueueReceive+0x6e>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <xQueueReceive+0x70>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <xQueueReceive+0x88>
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e7fe      	b.n	800263a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800263c:	f001 fc28 	bl	8003e90 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d014      	beq.n	8002676 <xQueueReceive+0xc2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002650:	f000 f8ec 	bl	800282c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <xQueueReceive+0xba>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	3310      	adds	r3, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fd4f 	bl	800310c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800266e:	f001 fc3d 	bl	8003eec <vPortExitCritical>
                return pdPASS;
 8002672:	2301      	movs	r3, #1
 8002674:	e069      	b.n	800274a <xQueueReceive+0x196>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800267c:	f001 fc36 	bl	8003eec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002680:	2300      	movs	r3, #0
 8002682:	e062      	b.n	800274a <xQueueReceive+0x196>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <xQueueReceive+0xe4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fd9e 	bl	80031d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002698:	f001 fc28 	bl	8003eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800269c:	f000 fb4e 	bl	8002d3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026a0:	f001 fbf6 	bl	8003e90 <vPortEnterCritical>
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b0:	d103      	bne.n	80026ba <xQueueReceive+0x106>
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c6:	d103      	bne.n	80026d0 <xQueueReceive+0x11c>
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d0:	f001 fc0c 	bl	8003eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d4:	1d3a      	adds	r2, r7, #4
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fd8d 	bl	80031fc <xTaskCheckForTimeOut>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d123      	bne.n	8002730 <xQueueReceive+0x17c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ea:	f000 f917 	bl	800291c <prvIsQueueEmpty>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <xQueueReceive+0x170>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	3324      	adds	r3, #36	; 0x24
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fcb7 	bl	8003070 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002704:	f000 f8b8 	bl	8002878 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002708:	f000 fb26 	bl	8002d58 <xTaskResumeAll>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d194      	bne.n	800263c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <xQueueReceive+0x1a0>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e78b      	b.n	800263c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002726:	f000 f8a7 	bl	8002878 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800272a:	f000 fb15 	bl	8002d58 <xTaskResumeAll>
 800272e:	e785      	b.n	800263c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002732:	f000 f8a1 	bl	8002878 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002736:	f000 fb0f 	bl	8002d58 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800273a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273c:	f000 f8ee 	bl	800291c <prvIsQueueEmpty>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f43f af7a 	beq.w	800263c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002748:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14d      	bne.n	800281a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fe72 	bl	800346c <xTaskPriorityDisinherit>
 8002788:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e043      	b.n	800281a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6858      	ldr	r0, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	461a      	mov	r2, r3
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	f001 feaa 	bl	80044fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	441a      	add	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d32b      	bcc.n	800281a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	e026      	b.n	800281a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68d8      	ldr	r0, [r3, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	f001 fe90 	bl	80044fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	425b      	negs	r3, r3
 80027e6:	441a      	add	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	425b      	negs	r3, r3
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d105      	bne.n	800281a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3b01      	subs	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002822:	697b      	ldr	r3, [r7, #20]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	d303      	bcc.n	8002860 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68d9      	ldr	r1, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	461a      	mov	r2, r3
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f001 fe46 	bl	80044fc <memcpy>
    }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002880:	f001 fb06 	bl	8003e90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800288c:	e011      	b.n	80028b2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3324      	adds	r3, #36	; 0x24
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fc36 	bl	800310c <xTaskRemoveFromEventList>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80028a6:	f000 fd0d 	bl	80032c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dce9      	bgt.n	800288e <prvUnlockQueue+0x16>
 80028ba:	e000      	b.n	80028be <prvUnlockQueue+0x46>
                        break;
 80028bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22ff      	movs	r2, #255	; 0xff
 80028c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028c6:	f001 fb11 	bl	8003eec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028ca:	f001 fae1 	bl	8003e90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028d6:	e011      	b.n	80028fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3310      	adds	r3, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fc11 	bl	800310c <xTaskRemoveFromEventList>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028f0:	f000 fce8 	bl	80032c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002900:	2b00      	cmp	r3, #0
 8002902:	dce9      	bgt.n	80028d8 <prvUnlockQueue+0x60>
 8002904:	e000      	b.n	8002908 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002906:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002910:	f001 faec 	bl	8003eec <vPortExitCritical>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002924:	f001 fab4 	bl	8003e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002930:	2301      	movs	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e001      	b.n	800293a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800293a:	f001 fad7 	bl	8003eec <vPortExitCritical>

    return xReturn;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002950:	f001 fa9e 	bl	8003e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	429a      	cmp	r2, r3
 800295e:	d102      	bne.n	8002966 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e001      	b.n	800296a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800296a:	f001 fabf 	bl	8003eec <vPortExitCritical>

    return xReturn;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e014      	b.n	80029b2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002988:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80029aa:	e005      	b.n	80029b8 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	d9e7      	bls.n	8002988 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20012e4c 	.word	0x20012e4c

080029c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029d8:	f001 fa5a 	bl	8003e90 <vPortEnterCritical>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d103      	bne.n	80029f2 <vQueueWaitForMessageRestricted+0x2a>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f8:	b25b      	sxtb	r3, r3
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fe:	d103      	bne.n	8002a08 <vQueueWaitForMessageRestricted+0x40>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a08:	f001 fa70 	bl	8003eec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fb4b 	bl	80030b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff28 	bl	8002878 <prvUnlockQueue>
    }
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fb3d 	bl	80040c4 <pvPortMalloc>
 8002a4a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00e      	beq.n	8002a70 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a52:	2058      	movs	r0, #88	; 0x58
 8002a54:	f001 fb36 	bl	80040c4 <pvPortMalloc>
 8002a58:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	e005      	b.n	8002a74 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f001 fc07 	bl	800427c <vPortFree>
 8002a6e:	e001      	b.n	8002a74 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9303      	str	r3, [sp, #12]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f80e 	bl	8002ab2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a96:	69f8      	ldr	r0, [r7, #28]
 8002a98:	f000 f8a0 	bl	8002bdc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e002      	b.n	8002aa8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
    }
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b088      	sub	sp, #32
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	21a5      	movs	r1, #165	; 0xa5
 8002acc:	f001 fd21 	bl	8004512 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	3b01      	subs	r3, #1
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f023 0307 	bic.w	r3, r3, #7
 8002ae8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <prvInitialiseNewTask+0x56>
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e7fe      	b.n	8002b06 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01f      	beq.n	8002b4e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e012      	b.n	8002b3a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	7819      	ldrb	r1, [r3, #0]
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	3334      	adds	r3, #52	; 0x34
 8002b24:	460a      	mov	r2, r1
 8002b26:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	3301      	adds	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d9e9      	bls.n	8002b14 <prvInitialiseNewTask+0x62>
 8002b40:	e000      	b.n	8002b44 <prvInitialiseNewTask+0x92>
            {
                break;
 8002b42:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b4c:	e003      	b.n	8002b56 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d901      	bls.n	8002b60 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2200      	movs	r2, #0
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	3304      	adds	r3, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa26 	bl	8001fc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	3318      	adds	r3, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fa21 	bl	8001fc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f1c3 0205 	rsb	r2, r3, #5
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	3350      	adds	r3, #80	; 0x50
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fcb4 	bl	8004512 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	3354      	adds	r3, #84	; 0x54
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fcad 	bl	8004512 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	69b8      	ldr	r0, [r7, #24]
 8002bbe:	f001 f841 	bl	8003c44 <pxPortInitialiseStack>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002be4:	f001 f954 	bl	8003e90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <prvAddNewTaskToReadyList+0xa8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <prvAddNewTaskToReadyList+0xa8>)
 8002bf0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <prvAddNewTaskToReadyList+0xac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bfa:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <prvAddNewTaskToReadyList+0xac>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <prvAddNewTaskToReadyList+0xa8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d110      	bne.n	8002c2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c08:	f000 fb7a 	bl	8003300 <prvInitialiseTaskLists>
 8002c0c:	e00d      	b.n	8002c2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <prvAddNewTaskToReadyList+0xb0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <prvAddNewTaskToReadyList+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d802      	bhi.n	8002c2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <prvAddNewTaskToReadyList+0xac>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <prvAddNewTaskToReadyList+0xb4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <prvAddNewTaskToReadyList+0xb4>)
 8002c32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <prvAddNewTaskToReadyList+0xb4>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <prvAddNewTaskToReadyList+0xb8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <prvAddNewTaskToReadyList+0xb8>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <prvAddNewTaskToReadyList+0xbc>)
 8002c5c:	441a      	add	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f7ff f9bc 	bl	8001fe2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c6a:	f001 f93f 	bl	8003eec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <prvAddNewTaskToReadyList+0xb0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <prvAddNewTaskToReadyList+0xac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000016c 	.word	0x2000016c
 8002c88:	20000094 	.word	0x20000094
 8002c8c:	20000178 	.word	0x20000178
 8002c90:	20000188 	.word	0x20000188
 8002c94:	20000174 	.word	0x20000174
 8002c98:	20000098 	.word	0x20000098

08002c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <vTaskStartScheduler+0x84>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2282      	movs	r2, #130	; 0x82
 8002cae:	491d      	ldr	r1, [pc, #116]	; (8002d24 <vTaskStartScheduler+0x88>)
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <vTaskStartScheduler+0x8c>)
 8002cb2:	f7ff febd 	bl	8002a30 <xTaskCreate>
 8002cb6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002cbe:	f000 fcb3 	bl	8003628 <xTimerCreateTimerTask>
 8002cc2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d115      	bne.n	8002cf6 <vTaskStartScheduler+0x5a>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <vTaskStartScheduler+0x90>)
 8002cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <vTaskStartScheduler+0x94>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <vTaskStartScheduler+0x98>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002cf0:	f001 f830 	bl	8003d54 <xPortStartScheduler>
 8002cf4:	e00d      	b.n	8002d12 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfc:	d109      	bne.n	8002d12 <vTaskStartScheduler+0x76>
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	e7fe      	b.n	8002d10 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <vTaskStartScheduler+0x9c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000190 	.word	0x20000190
 8002d24:	08004e68 	.word	0x08004e68
 8002d28:	080032dd 	.word	0x080032dd
 8002d2c:	2000018c 	.word	0x2000018c
 8002d30:	20000178 	.word	0x20000178
 8002d34:	20000170 	.word	0x20000170
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <vTaskSuspendAll+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <vTaskSuspendAll+0x18>)
 8002d48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	20000194 	.word	0x20000194

08002d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <xTaskResumeAll+0xfc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <xTaskResumeAll+0x2a>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	e7fe      	b.n	8002d80 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d82:	f001 f885 	bl	8003e90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d86:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <xTaskResumeAll+0xfc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <xTaskResumeAll+0xfc>)
 8002d8e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <xTaskResumeAll+0xfc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d155      	bne.n	8002e44 <xTaskResumeAll+0xec>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <xTaskResumeAll+0x100>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d051      	beq.n	8002e44 <xTaskResumeAll+0xec>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da0:	e02e      	b.n	8002e00 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da2:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <xTaskResumeAll+0x104>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3318      	adds	r3, #24
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f974 	bl	800209c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f96f 	bl	800209c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <xTaskResumeAll+0x108>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <xTaskResumeAll+0x108>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <xTaskResumeAll+0x10c>)
 8002dde:	441a      	add	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3304      	adds	r3, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7ff f8fb 	bl	8001fe2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <xTaskResumeAll+0x110>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <xTaskResumeAll+0x114>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <xTaskResumeAll+0x104>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1cc      	bne.n	8002da2 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e0e:	f000 faf3 	bl	80033f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xTaskResumeAll+0x118>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e1e:	f000 f839 	bl	8002e94 <xTaskIncrementTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTaskResumeAll+0x114>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f1      	bne.n	8002e1e <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <xTaskResumeAll+0x118>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <xTaskResumeAll+0x114>)
 8002e42:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e44:	f001 f852 	bl	8003eec <vPortExitCritical>

    return xAlreadyYielded;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000194 	.word	0x20000194
 8002e58:	2000016c 	.word	0x2000016c
 8002e5c:	2000012c 	.word	0x2000012c
 8002e60:	20000174 	.word	0x20000174
 8002e64:	20000098 	.word	0x20000098
 8002e68:	20000094 	.word	0x20000094
 8002e6c:	20000180 	.word	0x20000180
 8002e70:	2000017c 	.word	0x2000017c

08002e74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <xTaskGetTickCount+0x1c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000170 	.word	0x20000170

08002e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <xTaskIncrementTick+0x104>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d16e      	bne.n	8002f84 <xTaskIncrementTick+0xf0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <xTaskIncrementTick+0x108>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002eae:	4a3b      	ldr	r2, [pc, #236]	; (8002f9c <xTaskIncrementTick+0x108>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11f      	bne.n	8002efa <xTaskIncrementTick+0x66>
        {
            taskSWITCH_DELAYED_LISTS();
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <xTaskIncrementTick+0x44>
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	e7fe      	b.n	8002ed6 <xTaskIncrementTick+0x42>
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <xTaskIncrementTick+0x110>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <xTaskIncrementTick+0x110>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <xTaskIncrementTick+0x114>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <xTaskIncrementTick+0x114>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	f000 fa7f 	bl	80033f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <xTaskIncrementTick+0x118>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d344      	bcc.n	8002f8e <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <xTaskIncrementTick+0x84>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <xTaskIncrementTick+0x118>)
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f14:	601a      	str	r2, [r3, #0]
                    break;
 8002f16:	e03a      	b.n	8002f8e <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d203      	bcs.n	8002f38 <xTaskIncrementTick+0xa4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f30:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <xTaskIncrementTick+0x118>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f36:	e02a      	b.n	8002f8e <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff f8ad 	bl	800209c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <xTaskIncrementTick+0xc0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f8a4 	bl	800209c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <xTaskIncrementTick+0x11c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <xTaskIncrementTick+0x11c>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <xTaskIncrementTick+0x120>)
 8002f74:	441a      	add	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7ff f830 	bl	8001fe2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f82:	e7bf      	b.n	8002f04 <xTaskIncrementTick+0x70>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <xTaskIncrementTick+0x124>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <xTaskIncrementTick+0x124>)
 8002f8c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000194 	.word	0x20000194
 8002f9c:	20000170 	.word	0x20000170
 8002fa0:	20000124 	.word	0x20000124
 8002fa4:	20000128 	.word	0x20000128
 8002fa8:	20000184 	.word	0x20000184
 8002fac:	2000018c 	.word	0x2000018c
 8002fb0:	20000174 	.word	0x20000174
 8002fb4:	20000098 	.word	0x20000098
 8002fb8:	2000017c 	.word	0x2000017c

08002fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <vTaskSwitchContext+0xa0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <vTaskSwitchContext+0xa4>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fd0:	e03e      	b.n	8003050 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <vTaskSwitchContext+0xa4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <vTaskSwitchContext+0xa8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	f1c3 031f 	rsb	r3, r3, #31
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	491e      	ldr	r1, [pc, #120]	; (8003068 <vTaskSwitchContext+0xac>)
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <vTaskSwitchContext+0x5a>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	e7fe      	b.n	8003014 <vTaskSwitchContext+0x58>
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4a11      	ldr	r2, [pc, #68]	; (8003068 <vTaskSwitchContext+0xac>)
 8003022:	4413      	add	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3308      	adds	r3, #8
 8003038:	429a      	cmp	r2, r3
 800303a:	d104      	bne.n	8003046 <vTaskSwitchContext+0x8a>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a07      	ldr	r2, [pc, #28]	; (800306c <vTaskSwitchContext+0xb0>)
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20000194 	.word	0x20000194
 8003060:	20000180 	.word	0x20000180
 8003064:	20000174 	.word	0x20000174
 8003068:	20000098 	.word	0x20000098
 800306c:	20000094 	.word	0x20000094

08003070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <vTaskPlaceOnEventList+0x24>
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e7fe      	b.n	8003092 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <vTaskPlaceOnEventList+0x44>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3318      	adds	r3, #24
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fe ffc4 	bl	800202a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030a2:	2101      	movs	r1, #1
 80030a4:	6838      	ldr	r0, [r7, #0]
 80030a6:	f000 fa59 	bl	800355c <prvAddCurrentTaskToDelayedList>
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000094 	.word	0x20000094

080030b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <vTaskPlaceOnEventListRestricted+0x26>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e7fe      	b.n	80030dc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <vTaskPlaceOnEventListRestricted+0x50>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3318      	adds	r3, #24
 80030e4:	4619      	mov	r1, r3
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7fe ff7b 	bl	8001fe2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030f6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f000 fa2e 	bl	800355c <prvAddCurrentTaskToDelayedList>
    }
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000094 	.word	0x20000094

0800310c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <xTaskRemoveFromEventList+0x2a>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e7fe      	b.n	8003134 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	3318      	adds	r3, #24
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe ffae 	bl	800209c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <xTaskRemoveFromEventList+0xac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11c      	bne.n	8003182 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe ffa5 	bl	800209c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	2201      	movs	r2, #1
 8003158:	409a      	lsls	r2, r3
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <xTaskRemoveFromEventList+0xb0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <xTaskRemoveFromEventList+0xb0>)
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <xTaskRemoveFromEventList+0xb4>)
 8003172:	441a      	add	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fe ff31 	bl	8001fe2 <vListInsertEnd>
 8003180:	e005      	b.n	800318e <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	3318      	adds	r3, #24
 8003186:	4619      	mov	r1, r3
 8003188:	480e      	ldr	r0, [pc, #56]	; (80031c4 <xTaskRemoveFromEventList+0xb8>)
 800318a:	f7fe ff2a 	bl	8001fe2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <xTaskRemoveFromEventList+0xbc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	429a      	cmp	r2, r3
 800319a:	d905      	bls.n	80031a8 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800319c:	2301      	movs	r3, #1
 800319e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <xTaskRemoveFromEventList+0xc0>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e001      	b.n	80031ac <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80031ac:	697b      	ldr	r3, [r7, #20]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000194 	.word	0x20000194
 80031bc:	20000174 	.word	0x20000174
 80031c0:	20000098 	.word	0x20000098
 80031c4:	2000012c 	.word	0x2000012c
 80031c8:	20000094 	.word	0x20000094
 80031cc:	20000180 	.word	0x20000180

080031d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <vTaskInternalSetTimeOutState+0x24>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <vTaskInternalSetTimeOutState+0x28>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	20000184 	.word	0x20000184
 80031f8:	20000170 	.word	0x20000170

080031fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <xTaskCheckForTimeOut+0x24>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	e7fe      	b.n	800321e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <xTaskCheckForTimeOut+0x3e>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e7fe      	b.n	8003238 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800323a:	f000 fe29 	bl	8003e90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <xTaskCheckForTimeOut+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003256:	d102      	bne.n	800325e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	e026      	b.n	80032ac <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <xTaskCheckForTimeOut+0xc4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d00a      	beq.n	8003280 <xTaskCheckForTimeOut+0x84>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	429a      	cmp	r2, r3
 8003272:	d305      	bcc.n	8003280 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e015      	b.n	80032ac <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20b      	bcs.n	80032a2 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff9a 	bl	80031d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e004      	b.n	80032ac <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032ac:	f000 fe1e 	bl	8003eec <vPortExitCritical>

    return xReturn;
 80032b0:	69fb      	ldr	r3, [r7, #28]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000170 	.word	0x20000170
 80032c0:	20000184 	.word	0x20000184

080032c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <vTaskMissedYield+0x14>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	20000180 	.word	0x20000180

080032dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032e4:	f000 f84c 	bl	8003380 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <prvIdleTask+0x20>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032f8:	e7f4      	b.n	80032e4 <prvIdleTask+0x8>
 80032fa:	bf00      	nop
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	e00c      	b.n	8003326 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <prvInitialiseTaskLists+0x60>)
 8003318:	4413      	add	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fe34 	bl	8001f88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3301      	adds	r3, #1
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d9ef      	bls.n	800330c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <prvInitialiseTaskLists+0x64>)
 800332e:	f7fe fe2b 	bl	8001f88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <prvInitialiseTaskLists+0x68>)
 8003334:	f7fe fe28 	bl	8001f88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <prvInitialiseTaskLists+0x6c>)
 800333a:	f7fe fe25 	bl	8001f88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800333e:	480c      	ldr	r0, [pc, #48]	; (8003370 <prvInitialiseTaskLists+0x70>)
 8003340:	f7fe fe22 	bl	8001f88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003344:	480b      	ldr	r0, [pc, #44]	; (8003374 <prvInitialiseTaskLists+0x74>)
 8003346:	f7fe fe1f 	bl	8001f88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <prvInitialiseTaskLists+0x78>)
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <prvInitialiseTaskLists+0x64>)
 800334e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <prvInitialiseTaskLists+0x7c>)
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <prvInitialiseTaskLists+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000098 	.word	0x20000098
 8003364:	200000fc 	.word	0x200000fc
 8003368:	20000110 	.word	0x20000110
 800336c:	2000012c 	.word	0x2000012c
 8003370:	20000140 	.word	0x20000140
 8003374:	20000158 	.word	0x20000158
 8003378:	20000124 	.word	0x20000124
 800337c:	20000128 	.word	0x20000128

08003380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003386:	e019      	b.n	80033bc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003388:	f000 fd82 	bl	8003e90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <prvCheckTasksWaitingTermination+0x4c>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fe7f 	bl	800209c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <prvCheckTasksWaitingTermination+0x50>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <prvCheckTasksWaitingTermination+0x50>)
 80033a6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033b0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80033b2:	f000 fd9b 	bl	8003eec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f80e 	bl	80033d8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e1      	bne.n	8003388 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000140 	.word	0x20000140
 80033d0:	2000016c 	.word	0x2000016c
 80033d4:	20000154 	.word	0x20000154

080033d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ff49 	bl	800427c <vPortFree>
                vPortFree( pxTCB );
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 ff46 	bl	800427c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <prvResetNextTaskUnblockTime+0x30>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <prvResetNextTaskUnblockTime+0x34>)
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800340c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800340e:	e005      	b.n	800341c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <prvResetNextTaskUnblockTime+0x30>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <prvResetNextTaskUnblockTime+0x34>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000124 	.word	0x20000124
 800342c:	2000018c 	.word	0x2000018c

08003430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <xTaskGetSchedulerState+0x34>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800343e:	2301      	movs	r3, #1
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	e008      	b.n	8003456 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <xTaskGetSchedulerState+0x38>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800344c:	2302      	movs	r3, #2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	e001      	b.n	8003456 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003456:	687b      	ldr	r3, [r7, #4]
    }
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000178 	.word	0x20000178
 8003468:	20000194 	.word	0x20000194

0800346c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d061      	beq.n	8003546 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <xTaskPriorityDisinherit+0xe4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d009      	beq.n	80034a0 <xTaskPriorityDisinherit+0x34>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e7fe      	b.n	800349e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <xTaskPriorityDisinherit+0x50>
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	e7fe      	b.n	80034ba <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	1e5a      	subs	r2, r3, #1
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d039      	beq.n	8003546 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d135      	bne.n	8003546 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fddc 	bl	800209c <uxListRemove>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43da      	mvns	r2, r3
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <xTaskPriorityDisinherit+0xe8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4013      	ands	r3, r2
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <xTaskPriorityDisinherit+0xe8>)
 80034fe:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f1c3 0205 	rsb	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <xTaskPriorityDisinherit+0xe8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4313      	orrs	r3, r2
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <xTaskPriorityDisinherit+0xe8>)
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <xTaskPriorityDisinherit+0xec>)
 8003534:	441a      	add	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f7fe fd50 	bl	8001fe2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003546:	697b      	ldr	r3, [r7, #20]
    }
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000094 	.word	0x20000094
 8003554:	20000174 	.word	0x20000174
 8003558:	20000098 	.word	0x20000098

0800355c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fd92 	bl	800209c <uxListRemove>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2201      	movs	r2, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4013      	ands	r3, r2
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003594:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359c:	d10a      	bne.n	80035b4 <prvAddCurrentTaskToDelayedList+0x58>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	481a      	ldr	r0, [pc, #104]	; (8003618 <prvAddCurrentTaskToDelayedList+0xbc>)
 80035ae:	f7fe fd18 	bl	8001fe2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035b2:	e026      	b.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d209      	bcs.n	80035e0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <prvAddCurrentTaskToDelayedList+0xc0>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7fe fd26 	bl	800202a <vListInsert>
}
 80035de:	e010      	b.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7fe fd1c 	bl	800202a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d202      	bcs.n	8003602 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80035fc:	4a09      	ldr	r2, [pc, #36]	; (8003624 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6013      	str	r3, [r2, #0]
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000170 	.word	0x20000170
 8003610:	20000094 	.word	0x20000094
 8003614:	20000174 	.word	0x20000174
 8003618:	20000158 	.word	0x20000158
 800361c:	20000128 	.word	0x20000128
 8003620:	20000124 	.word	0x20000124
 8003624:	2000018c 	.word	0x2000018c

08003628 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003632:	f000 fad1 	bl	8003bd8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <xTimerCreateTimerTask+0x54>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <xTimerCreateTimerTask+0x58>)
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <xTimerCreateTimerTask+0x5c>)
 800364e:	480e      	ldr	r0, [pc, #56]	; (8003688 <xTimerCreateTimerTask+0x60>)
 8003650:	f7ff f9ee 	bl	8002a30 <xTaskCreate>
 8003654:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <xTimerCreateTimerTask+0x48>
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	e7fe      	b.n	800366e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003670:	687b      	ldr	r3, [r7, #4]
    }
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200001c8 	.word	0x200001c8
 8003680:	200001cc 	.word	0x200001cc
 8003684:	08004e70 	.word	0x08004e70
 8003688:	080037bd 	.word	0x080037bd

0800368c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <xTimerGenericCommand+0x2c>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	e7fe      	b.n	80036b6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <xTimerGenericCommand+0x94>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d02a      	beq.n	8003716 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	dc18      	bgt.n	8003704 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036d2:	f7ff fead 	bl	8003430 <xTaskGetSchedulerState>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d109      	bne.n	80036f0 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <xTimerGenericCommand+0x94>)
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	f107 0114 	add.w	r1, r7, #20
 80036e4:	2300      	movs	r3, #0
 80036e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e8:	f7fe fddc 	bl	80022a4 <xQueueGenericSend>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24
 80036ee:	e012      	b.n	8003716 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <xTimerGenericCommand+0x94>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	f107 0114 	add.w	r1, r7, #20
 80036f8:	2300      	movs	r3, #0
 80036fa:	2200      	movs	r2, #0
 80036fc:	f7fe fdd2 	bl	80022a4 <xQueueGenericSend>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24
 8003702:	e008      	b.n	8003716 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <xTimerGenericCommand+0x94>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	f107 0114 	add.w	r1, r7, #20
 800370c:	2300      	movs	r3, #0
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	f7fe feaa 	bl	8002468 <xQueueGenericSendFromISR>
 8003714:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200001c8 	.word	0x200001c8

08003724 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <prvProcessExpiredTimer+0x94>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fcad 	bl	800209c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d021      	beq.n	8003794 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	18d1      	adds	r1, r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6978      	ldr	r0, [r7, #20]
 800375e:	f000 f8d1 	bl	8003904 <prvInsertTimerInActiveList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01e      	beq.n	80037a6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	2100      	movs	r1, #0
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8a 	bl	800368c <xTimerGenericCommand>
 8003778:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d112      	bne.n	80037a6 <prvProcessExpiredTimer+0x82>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e7fe      	b.n	8003792 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	4798      	blx	r3
    }
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200001c0 	.word	0x200001c0

080037bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f857 	bl	800387c <prvGetNextExpireTime>
 80037ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4619      	mov	r1, r3
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f803 	bl	80037e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037da:	f000 f8d5 	bl	8003988 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037de:	e7f1      	b.n	80037c4 <prvTimerTask+0x8>

080037e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037ea:	f7ff faa7 	bl	8002d3c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f866 	bl	80038c4 <prvSampleTimeNow>
 80037f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d130      	bne.n	8003862 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <prvProcessTimerOrBlockTask+0x3c>
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	429a      	cmp	r2, r3
 800380c:	d806      	bhi.n	800381c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800380e:	f7ff faa3 	bl	8002d58 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff85 	bl	8003724 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800381a:	e024      	b.n	8003866 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <prvProcessTimerOrBlockTask+0x90>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <prvProcessTimerOrBlockTask+0x50>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <prvProcessTimerOrBlockTask+0x52>
 8003830:	2300      	movs	r3, #0
 8003832:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <prvProcessTimerOrBlockTask+0x94>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	4619      	mov	r1, r3
 8003842:	f7ff f8c1 	bl	80029c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003846:	f7ff fa87 	bl	8002d58 <xTaskResumeAll>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <prvProcessTimerOrBlockTask+0x98>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
    }
 8003860:	e001      	b.n	8003866 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003862:	f7ff fa79 	bl	8002d58 <xTaskResumeAll>
    }
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200001c4 	.word	0x200001c4
 8003874:	200001c8 	.word	0x200001c8
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <prvGetNextExpireTime+0x44>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <prvGetNextExpireTime+0x16>
 800388e:	2201      	movs	r2, #1
 8003890:	e000      	b.n	8003894 <prvGetNextExpireTime+0x18>
 8003892:	2200      	movs	r2, #0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <prvGetNextExpireTime+0x44>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e001      	b.n	80038b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80038b0:	68fb      	ldr	r3, [r7, #12]
    }
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200001c0 	.word	0x200001c0

080038c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038cc:	f7ff fad2 	bl	8002e74 <xTaskGetTickCount>
 80038d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <prvSampleTimeNow+0x3c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d205      	bcs.n	80038e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038dc:	f000 f918 	bl	8003b10 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e002      	b.n	80038ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <prvSampleTimeNow+0x3c>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038f4:	68fb      	ldr	r3, [r7, #12]
    }
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200001d0 	.word	0x200001d0

08003904 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d812      	bhi.n	8003950 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e01b      	b.n	8003976 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <prvInsertTimerInActiveList+0x7c>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fe fb6e 	bl	800202a <vListInsert>
 800394e:	e012      	b.n	8003976 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d206      	bcs.n	8003966 <prvInsertTimerInActiveList+0x62>
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003960:	2301      	movs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e007      	b.n	8003976 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <prvInsertTimerInActiveList+0x80>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7fe fb5a 	bl	800202a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003976:	697b      	ldr	r3, [r7, #20]
    }
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200001c4 	.word	0x200001c4
 8003984:	200001c0 	.word	0x200001c0

08003988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800398e:	e0ac      	b.n	8003aea <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f2c0 80a8 	blt.w	8003ae8 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fb77 	bl	800209c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff87 	bl	80038c4 <prvSampleTimeNow>
 80039b6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	f200 8095 	bhi.w	8003aea <prvProcessReceivedCommands+0x162>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <prvProcessReceivedCommands+0x40>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	08003a63 	.word	0x08003a63
 80039d8:	08003a77 	.word	0x08003a77
 80039dc:	08003abf 	.word	0x08003abf
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039f1 	.word	0x080039f1
 80039e8:	08003a63 	.word	0x08003a63
 80039ec:	08003a77 	.word	0x08003a77
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	18d1      	adds	r1, r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a3a      	ldr	r2, [r7, #32]
 8003a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a10:	f7ff ff78 	bl	8003904 <prvInsertTimerInActiveList>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d067      	beq.n	8003aea <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a20:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d05c      	beq.n	8003aea <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	441a      	add	r2, r3
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a42:	f7ff fe23 	bl	800368c <xTimerGenericCommand>
 8003a46:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d14d      	bne.n	8003aea <prvProcessReceivedCommands+0x162>
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e7fe      	b.n	8003a60 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a74:	e039      	b.n	8003aea <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <prvProcessReceivedCommands+0x122>
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e7fe      	b.n	8003aa8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	18d1      	adds	r1, r2, r3
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab8:	f7ff ff24 	bl	8003904 <prvInsertTimerInActiveList>
                        break;
 8003abc:	e015      	b.n	8003aea <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ace:	f000 fbd5 	bl	800427c <vPortFree>
 8003ad2:	e00a      	b.n	8003aea <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ae6:	e000      	b.n	8003aea <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ae8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <prvProcessReceivedCommands+0x184>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f107 0108 	add.w	r1, r7, #8
 8003af2:	2200      	movs	r2, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fd5d 	bl	80025b4 <xQueueReceive>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f47f af47 	bne.w	8003990 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200001c8 	.word	0x200001c8

08003b10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b16:	e047      	b.n	8003ba8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fab3 	bl	800209c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02d      	beq.n	8003ba8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d90e      	bls.n	8003b7c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f7fe fa58 	bl	800202a <vListInsert>
 8003b7a:	e015      	b.n	8003ba8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	2100      	movs	r1, #0
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff fd80 	bl	800368c <xTimerGenericCommand>
 8003b8c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <prvSwitchTimerLists+0x98>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	e7fe      	b.n	8003ba6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1b2      	bne.n	8003b18 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <prvSwitchTimerLists+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <prvSwitchTimerLists+0xc0>)
 8003bbe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <prvSwitchTimerLists+0xc4>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6013      	str	r3, [r2, #0]
    }
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200001c0 	.word	0x200001c0
 8003bd4:	200001c4 	.word	0x200001c4

08003bd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003bdc:	f000 f958 	bl	8003e90 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <prvCheckForValidListAndQueue+0x54>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11d      	bne.n	8003c24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003be8:	4811      	ldr	r0, [pc, #68]	; (8003c30 <prvCheckForValidListAndQueue+0x58>)
 8003bea:	f7fe f9cd 	bl	8001f88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003bee:	4811      	ldr	r0, [pc, #68]	; (8003c34 <prvCheckForValidListAndQueue+0x5c>)
 8003bf0:	f7fe f9ca 	bl	8001f88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <prvCheckForValidListAndQueue+0x60>)
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <prvCheckForValidListAndQueue+0x58>)
 8003bf8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <prvCheckForValidListAndQueue+0x64>)
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <prvCheckForValidListAndQueue+0x5c>)
 8003bfe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c00:	2200      	movs	r2, #0
 8003c02:	210c      	movs	r1, #12
 8003c04:	200a      	movs	r0, #10
 8003c06:	f7fe facd 	bl	80021a4 <xQueueGenericCreate>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <prvCheckForValidListAndQueue+0x54>)
 8003c0e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <prvCheckForValidListAndQueue+0x54>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <prvCheckForValidListAndQueue+0x54>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4908      	ldr	r1, [pc, #32]	; (8003c40 <prvCheckForValidListAndQueue+0x68>)
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe feaa 	bl	8002978 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c24:	f000 f962 	bl	8003eec <vPortExitCritical>
    }
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200001c8 	.word	0x200001c8
 8003c30:	20000198 	.word	0x20000198
 8003c34:	200001ac 	.word	0x200001ac
 8003c38:	200001c0 	.word	0x200001c0
 8003c3c:	200001c4 	.word	0x200001c4
 8003c40:	08004e78 	.word	0x08004e78

08003c44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b04      	subs	r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b04      	subs	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <pxPortInitialiseStack+0x64>)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3b14      	subs	r3, #20
 8003c7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b04      	subs	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f06f 0202 	mvn.w	r2, #2
 8003c92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3b20      	subs	r3, #32
 8003c98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	08003cad 	.word	0x08003cad

08003cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <prvTaskExitError+0x50>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	d009      	beq.n	8003cd4 <prvTaskExitError+0x28>
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e7fe      	b.n	8003cd2 <prvTaskExitError+0x26>
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ce6:	bf00      	nop
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0fc      	beq.n	8003ce8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000010 	.word	0x20000010

08003d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <prvPortStartFirstTask+0x24>)
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f380 8808 	msr	MSP, r0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8814 	msr	CONTROL, r0
 8003d3a:	b662      	cpsie	i
 8003d3c:	b661      	cpsie	f
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	df00      	svc	0
 8003d48:	bf00      	nop
 8003d4a:	0000      	.short	0x0000
 8003d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop

08003d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <xPortStartScheduler+0x118>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a44      	ldr	r2, [pc, #272]	; (8003e70 <xPortStartScheduler+0x11c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d109      	bne.n	8003d78 <xPortStartScheduler+0x24>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e7fe      	b.n	8003d76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <xPortStartScheduler+0x118>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3d      	ldr	r2, [pc, #244]	; (8003e74 <xPortStartScheduler+0x120>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d109      	bne.n	8003d96 <xPortStartScheduler+0x42>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e7fe      	b.n	8003d94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d96:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <xPortStartScheduler+0x124>)
 8003d98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	22ff      	movs	r2, #255	; 0xff
 8003da6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <xPortStartScheduler+0x128>)
 8003dbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc4:	e009      	b.n	8003dda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003dce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b80      	cmp	r3, #128	; 0x80
 8003de4:	d0ef      	beq.n	8003dc6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d009      	beq.n	8003e06 <xPortStartScheduler+0xb2>
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	e7fe      	b.n	8003e04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003e0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003e1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <xPortStartScheduler+0x130>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <xPortStartScheduler+0x130>)
 8003e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <xPortStartScheduler+0x130>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <xPortStartScheduler+0x130>)
 8003e36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e3c:	f000 f8d4 	bl	8003fe8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <xPortStartScheduler+0x134>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e46:	f000 f8f3 	bl	8004030 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e56:	f7ff ff67 	bl	8003d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e5a:	f7ff f8af 	bl	8002fbc <vTaskSwitchContext>
    prvTaskExitError();
 8003e5e:	f7ff ff25 	bl	8003cac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	e000ed00 	.word	0xe000ed00
 8003e70:	410fc271 	.word	0x410fc271
 8003e74:	410fc270 	.word	0x410fc270
 8003e78:	e000e400 	.word	0xe000e400
 8003e7c:	200001d4 	.word	0x200001d4
 8003e80:	200001d8 	.word	0x200001d8
 8003e84:	e000ed20 	.word	0xe000ed20
 8003e88:	20000010 	.word	0x20000010
 8003e8c:	e000ef34 	.word	0xe000ef34

08003e90 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <vPortEnterCritical+0x54>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <vPortEnterCritical+0x54>)
 8003eb0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <vPortEnterCritical+0x54>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <vPortEnterCritical+0x58>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <vPortEnterCritical+0x48>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	e7fe      	b.n	8003ed6 <vPortEnterCritical+0x46>
    }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	20000010 	.word	0x20000010
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <vPortExitCritical+0x4c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <vPortExitCritical+0x22>
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	e7fe      	b.n	8003f0c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <vPortExitCritical+0x4c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <vPortExitCritical+0x4c>)
 8003f16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <vPortExitCritical+0x4c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <vPortExitCritical+0x3e>
 8003f20:	2300      	movs	r3, #0
 8003f22:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000010 	.word	0x20000010
 8003f3c:	00000000 	.word	0x00000000

08003f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f40:	f3ef 8009 	mrs	r0, PSP
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <pxCurrentTCBConst>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f01e 0f10 	tst.w	lr, #16
 8003f50:	bf08      	it	eq
 8003f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	6010      	str	r0, [r2, #0]
 8003f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f64:	f380 8811 	msr	BASEPRI, r0
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f7ff f824 	bl	8002fbc <vTaskSwitchContext>
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f380 8811 	msr	BASEPRI, r0
 8003f7c:	bc09      	pop	{r0, r3}
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f86:	f01e 0f10 	tst.w	lr, #16
 8003f8a:	bf08      	it	eq
 8003f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f90:	f380 8809 	msr	PSP, r0
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst>:
 8003fa0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
        __asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003fc0:	f7fe ff68 	bl	8002e94 <xTaskIncrementTick>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <SysTick_Handler+0x3c>)
 8003fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <vPortSetupTimerInterrupt+0x34>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortSetupTimerInterrupt+0x38>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <vPortSetupTimerInterrupt+0x3c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <vPortSetupTimerInterrupt+0x40>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <vPortSetupTimerInterrupt+0x44>)
 8004006:	3b01      	subs	r3, #1
 8004008:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800400a:	4b04      	ldr	r3, [pc, #16]	; (800401c <vPortSetupTimerInterrupt+0x34>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010
 8004020:	e000e018 	.word	0xe000e018
 8004024:	20000000 	.word	0x20000000
 8004028:	10624dd3 	.word	0x10624dd3
 800402c:	e000e014 	.word	0xe000e014

08004030 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004030:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004040 <vPortEnableVFP+0x10>
 8004034:	6801      	ldr	r1, [r0, #0]
 8004036:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800403a:	6001      	str	r1, [r0, #0]
 800403c:	4770      	bx	lr
 800403e:	0000      	.short	0x0000
 8004040:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop

08004048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800404e:	f3ef 8305 	mrs	r3, IPSR
 8004052:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b0f      	cmp	r3, #15
 8004058:	d913      	bls.n	8004082 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <vPortValidateInterruptPriority+0x6c>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <vPortValidateInterruptPriority+0x70>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	7afa      	ldrb	r2, [r7, #11]
 800406a:	429a      	cmp	r2, r3
 800406c:	d209      	bcs.n	8004082 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e7fe      	b.n	8004080 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <vPortValidateInterruptPriority+0x74>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <vPortValidateInterruptPriority+0x78>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d909      	bls.n	80040a6 <vPortValidateInterruptPriority+0x5e>
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	e7fe      	b.n	80040a4 <vPortValidateInterruptPriority+0x5c>
    }
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000e3f0 	.word	0xe000e3f0
 80040b8:	200001d4 	.word	0x200001d4
 80040bc:	e000ed0c 	.word	0xe000ed0c
 80040c0:	200001d8 	.word	0x200001d8

080040c4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80040d0:	f7fe fe34 	bl	8002d3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040d4:	4b63      	ldr	r3, [pc, #396]	; (8004264 <pvPortMalloc+0x1a0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040dc:	f000 f92e 	bl	800433c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <pvPortMalloc+0x1a4>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 80a5 	bne.w	8004238 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02c      	beq.n	800414e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80040f4:	2208      	movs	r2, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d226      	bcs.n	800414e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004100:	2208      	movs	r2, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b00      	cmp	r3, #0
 8004110:	d020      	beq.n	8004154 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	3308      	adds	r3, #8
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d213      	bcs.n	8004148 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	3308      	adds	r3, #8
 8004128:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00f      	beq.n	8004154 <pvPortMalloc+0x90>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e7fe      	b.n	8004146 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800414c:	e002      	b.n	8004154 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	e000      	b.n	8004156 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004154:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d06d      	beq.n	8004238 <pvPortMalloc+0x174>
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <pvPortMalloc+0x1a8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d868      	bhi.n	8004238 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004166:	4b42      	ldr	r3, [pc, #264]	; (8004270 <pvPortMalloc+0x1ac>)
 8004168:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <pvPortMalloc+0x1ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004170:	e004      	b.n	800417c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d903      	bls.n	800418e <pvPortMalloc+0xca>
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f1      	bne.n	8004172 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800418e:	4b35      	ldr	r3, [pc, #212]	; (8004264 <pvPortMalloc+0x1a0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	429a      	cmp	r2, r3
 8004196:	d04f      	beq.n	8004238 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2208      	movs	r2, #8
 800419e:	4413      	add	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad2      	subs	r2, r2, r3
 80041b2:	2308      	movs	r3, #8
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d91e      	bls.n	80041f8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <pvPortMalloc+0x11c>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e7fe      	b.n	80041de <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041f2:	69b8      	ldr	r0, [r7, #24]
 80041f4:	f000 f904 	bl	8004400 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041f8:	4b1c      	ldr	r3, [pc, #112]	; (800426c <pvPortMalloc+0x1a8>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <pvPortMalloc+0x1a8>)
 8004204:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <pvPortMalloc+0x1a8>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <pvPortMalloc+0x1b0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d203      	bcs.n	800421a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <pvPortMalloc+0x1a8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <pvPortMalloc+0x1b0>)
 8004218:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <pvPortMalloc+0x1a4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	431a      	orrs	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800422e:	4b12      	ldr	r3, [pc, #72]	; (8004278 <pvPortMalloc+0x1b4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <pvPortMalloc+0x1b4>)
 8004236:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004238:	f7fe fd8e 	bl	8002d58 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <pvPortMalloc+0x196>
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e7fe      	b.n	8004258 <pvPortMalloc+0x194>
    return pvReturn;
 800425a:	69fb      	ldr	r3, [r7, #28]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20012de4 	.word	0x20012de4
 8004268:	20012df8 	.word	0x20012df8
 800426c:	20012de8 	.word	0x20012de8
 8004270:	20012ddc 	.word	0x20012ddc
 8004274:	20012dec 	.word	0x20012dec
 8004278:	20012df0 	.word	0x20012df0

0800427c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04b      	beq.n	8004326 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800428e:	2308      	movs	r3, #8
 8004290:	425b      	negs	r3, r3
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <vPortFree+0xb4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <vPortFree+0x42>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e7fe      	b.n	80042bc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <vPortFree+0x5e>
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	e7fe      	b.n	80042d8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <vPortFree+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01e      	beq.n	8004326 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11a      	bne.n	8004326 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <vPortFree+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004300:	f7fe fd1c 	bl	8002d3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <vPortFree+0xb8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4413      	add	r3, r2
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <vPortFree+0xb8>)
 8004310:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004312:	6938      	ldr	r0, [r7, #16]
 8004314:	f000 f874 	bl	8004400 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <vPortFree+0xbc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a06      	ldr	r2, [pc, #24]	; (8004338 <vPortFree+0xbc>)
 8004320:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004322:	f7fe fd19 	bl	8002d58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20012df8 	.word	0x20012df8
 8004334:	20012de8 	.word	0x20012de8
 8004338:	20012df4 	.word	0x20012df4

0800433c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004342:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004346:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <prvHeapInit+0xac>)
 800434a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3307      	adds	r3, #7
 800435a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <prvHeapInit+0xac>)
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <prvHeapInit+0xb0>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800437a:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <prvHeapInit+0xb0>)
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4413      	add	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004388:	2208      	movs	r2, #8
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <prvHeapInit+0xb4>)
 800439c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800439e:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <prvHeapInit+0xb4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <prvHeapInit+0xb4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	1ad2      	subs	r2, r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <prvHeapInit+0xb4>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <prvHeapInit+0xb8>)
 80043ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <prvHeapInit+0xbc>)
 80043d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <prvHeapInit+0xc0>)
 80043d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	200001dc 	.word	0x200001dc
 80043ec:	20012ddc 	.word	0x20012ddc
 80043f0:	20012de4 	.word	0x20012de4
 80043f4:	20012dec 	.word	0x20012dec
 80043f8:	20012de8 	.word	0x20012de8
 80043fc:	20012df8 	.word	0x20012df8

08004400 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004408:	4b28      	ldr	r3, [pc, #160]	; (80044ac <prvInsertBlockIntoFreeList+0xac>)
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e002      	b.n	8004414 <prvInsertBlockIntoFreeList+0x14>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d8f7      	bhi.n	800440e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4413      	add	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d108      	bne.n	8004442 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d118      	bne.n	8004488 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <prvInsertBlockIntoFreeList+0xb0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d00d      	beq.n	800447e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e008      	b.n	8004490 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e003      	b.n	8004490 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d002      	beq.n	800449e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20012ddc 	.word	0x20012ddc
 80044b0:	20012de4 	.word	0x20012de4

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0d      	ldr	r6, [pc, #52]	; (80044ec <__libc_init_array+0x38>)
 80044b8:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044ba:	1ba4      	subs	r4, r4, r6
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	2500      	movs	r5, #0
 80044c0:	42a5      	cmp	r5, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	4e0b      	ldr	r6, [pc, #44]	; (80044f4 <__libc_init_array+0x40>)
 80044c6:	4c0c      	ldr	r4, [pc, #48]	; (80044f8 <__libc_init_array+0x44>)
 80044c8:	f000 fca2 	bl	8004e10 <_init>
 80044cc:	1ba4      	subs	r4, r4, r6
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	2500      	movs	r5, #0
 80044d2:	42a5      	cmp	r5, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044dc:	4798      	blx	r3
 80044de:	3501      	adds	r5, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e6:	4798      	blx	r3
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08004f04 	.word	0x08004f04
 80044f0:	08004f04 	.word	0x08004f04
 80044f4:	08004f04 	.word	0x08004f04
 80044f8:	08004f08 	.word	0x08004f08

080044fc <memcpy>:
 80044fc:	b510      	push	{r4, lr}
 80044fe:	1e43      	subs	r3, r0, #1
 8004500:	440a      	add	r2, r1
 8004502:	4291      	cmp	r1, r2
 8004504:	d100      	bne.n	8004508 <memcpy+0xc>
 8004506:	bd10      	pop	{r4, pc}
 8004508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800450c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004510:	e7f7      	b.n	8004502 <memcpy+0x6>

08004512 <memset>:
 8004512:	4402      	add	r2, r0
 8004514:	4603      	mov	r3, r0
 8004516:	4293      	cmp	r3, r2
 8004518:	d100      	bne.n	800451c <memset+0xa>
 800451a:	4770      	bx	lr
 800451c:	f803 1b01 	strb.w	r1, [r3], #1
 8004520:	e7f9      	b.n	8004516 <memset+0x4>
	...

08004524 <_puts_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	460e      	mov	r6, r1
 8004528:	4605      	mov	r5, r0
 800452a:	b118      	cbz	r0, 8004534 <_puts_r+0x10>
 800452c:	6983      	ldr	r3, [r0, #24]
 800452e:	b90b      	cbnz	r3, 8004534 <_puts_r+0x10>
 8004530:	f000 fa0c 	bl	800494c <__sinit>
 8004534:	69ab      	ldr	r3, [r5, #24]
 8004536:	68ac      	ldr	r4, [r5, #8]
 8004538:	b913      	cbnz	r3, 8004540 <_puts_r+0x1c>
 800453a:	4628      	mov	r0, r5
 800453c:	f000 fa06 	bl	800494c <__sinit>
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <_puts_r+0xac>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d117      	bne.n	8004576 <_puts_r+0x52>
 8004546:	686c      	ldr	r4, [r5, #4]
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	071b      	lsls	r3, r3, #28
 800454c:	d51d      	bpl.n	800458a <_puts_r+0x66>
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	b1db      	cbz	r3, 800458a <_puts_r+0x66>
 8004552:	3e01      	subs	r6, #1
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800455a:	3b01      	subs	r3, #1
 800455c:	60a3      	str	r3, [r4, #8]
 800455e:	b9e9      	cbnz	r1, 800459c <_puts_r+0x78>
 8004560:	2b00      	cmp	r3, #0
 8004562:	da2e      	bge.n	80045c2 <_puts_r+0x9e>
 8004564:	4622      	mov	r2, r4
 8004566:	210a      	movs	r1, #10
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f83f 	bl	80045ec <__swbuf_r>
 800456e:	3001      	adds	r0, #1
 8004570:	d011      	beq.n	8004596 <_puts_r+0x72>
 8004572:	200a      	movs	r0, #10
 8004574:	e011      	b.n	800459a <_puts_r+0x76>
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <_puts_r+0xb0>)
 8004578:	429c      	cmp	r4, r3
 800457a:	d101      	bne.n	8004580 <_puts_r+0x5c>
 800457c:	68ac      	ldr	r4, [r5, #8]
 800457e:	e7e3      	b.n	8004548 <_puts_r+0x24>
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <_puts_r+0xb4>)
 8004582:	429c      	cmp	r4, r3
 8004584:	bf08      	it	eq
 8004586:	68ec      	ldreq	r4, [r5, #12]
 8004588:	e7de      	b.n	8004548 <_puts_r+0x24>
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f87f 	bl	8004690 <__swsetup_r>
 8004592:	2800      	cmp	r0, #0
 8004594:	d0dd      	beq.n	8004552 <_puts_r+0x2e>
 8004596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	2b00      	cmp	r3, #0
 800459e:	da04      	bge.n	80045aa <_puts_r+0x86>
 80045a0:	69a2      	ldr	r2, [r4, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	dc06      	bgt.n	80045b4 <_puts_r+0x90>
 80045a6:	290a      	cmp	r1, #10
 80045a8:	d004      	beq.n	80045b4 <_puts_r+0x90>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	6022      	str	r2, [r4, #0]
 80045b0:	7019      	strb	r1, [r3, #0]
 80045b2:	e7cf      	b.n	8004554 <_puts_r+0x30>
 80045b4:	4622      	mov	r2, r4
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f818 	bl	80045ec <__swbuf_r>
 80045bc:	3001      	adds	r0, #1
 80045be:	d1c9      	bne.n	8004554 <_puts_r+0x30>
 80045c0:	e7e9      	b.n	8004596 <_puts_r+0x72>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	200a      	movs	r0, #10
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	6022      	str	r2, [r4, #0]
 80045ca:	7018      	strb	r0, [r3, #0]
 80045cc:	e7e5      	b.n	800459a <_puts_r+0x76>
 80045ce:	bf00      	nop
 80045d0:	08004ebc 	.word	0x08004ebc
 80045d4:	08004edc 	.word	0x08004edc
 80045d8:	08004e9c 	.word	0x08004e9c

080045dc <puts>:
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <puts+0xc>)
 80045de:	4601      	mov	r1, r0
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f7ff bf9f 	b.w	8004524 <_puts_r>
 80045e6:	bf00      	nop
 80045e8:	20000014 	.word	0x20000014

080045ec <__swbuf_r>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	460e      	mov	r6, r1
 80045f0:	4614      	mov	r4, r2
 80045f2:	4605      	mov	r5, r0
 80045f4:	b118      	cbz	r0, 80045fe <__swbuf_r+0x12>
 80045f6:	6983      	ldr	r3, [r0, #24]
 80045f8:	b90b      	cbnz	r3, 80045fe <__swbuf_r+0x12>
 80045fa:	f000 f9a7 	bl	800494c <__sinit>
 80045fe:	4b21      	ldr	r3, [pc, #132]	; (8004684 <__swbuf_r+0x98>)
 8004600:	429c      	cmp	r4, r3
 8004602:	d12a      	bne.n	800465a <__swbuf_r+0x6e>
 8004604:	686c      	ldr	r4, [r5, #4]
 8004606:	69a3      	ldr	r3, [r4, #24]
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	071a      	lsls	r2, r3, #28
 800460e:	d52e      	bpl.n	800466e <__swbuf_r+0x82>
 8004610:	6923      	ldr	r3, [r4, #16]
 8004612:	b363      	cbz	r3, 800466e <__swbuf_r+0x82>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	1ac0      	subs	r0, r0, r3
 800461a:	6963      	ldr	r3, [r4, #20]
 800461c:	b2f6      	uxtb	r6, r6
 800461e:	4283      	cmp	r3, r0
 8004620:	4637      	mov	r7, r6
 8004622:	dc04      	bgt.n	800462e <__swbuf_r+0x42>
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f926 	bl	8004878 <_fflush_r>
 800462c:	bb28      	cbnz	r0, 800467a <__swbuf_r+0x8e>
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60a3      	str	r3, [r4, #8]
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	6022      	str	r2, [r4, #0]
 800463a:	701e      	strb	r6, [r3, #0]
 800463c:	6963      	ldr	r3, [r4, #20]
 800463e:	3001      	adds	r0, #1
 8004640:	4283      	cmp	r3, r0
 8004642:	d004      	beq.n	800464e <__swbuf_r+0x62>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	07db      	lsls	r3, r3, #31
 8004648:	d519      	bpl.n	800467e <__swbuf_r+0x92>
 800464a:	2e0a      	cmp	r6, #10
 800464c:	d117      	bne.n	800467e <__swbuf_r+0x92>
 800464e:	4621      	mov	r1, r4
 8004650:	4628      	mov	r0, r5
 8004652:	f000 f911 	bl	8004878 <_fflush_r>
 8004656:	b190      	cbz	r0, 800467e <__swbuf_r+0x92>
 8004658:	e00f      	b.n	800467a <__swbuf_r+0x8e>
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <__swbuf_r+0x9c>)
 800465c:	429c      	cmp	r4, r3
 800465e:	d101      	bne.n	8004664 <__swbuf_r+0x78>
 8004660:	68ac      	ldr	r4, [r5, #8]
 8004662:	e7d0      	b.n	8004606 <__swbuf_r+0x1a>
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <__swbuf_r+0xa0>)
 8004666:	429c      	cmp	r4, r3
 8004668:	bf08      	it	eq
 800466a:	68ec      	ldreq	r4, [r5, #12]
 800466c:	e7cb      	b.n	8004606 <__swbuf_r+0x1a>
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f80d 	bl	8004690 <__swsetup_r>
 8004676:	2800      	cmp	r0, #0
 8004678:	d0cc      	beq.n	8004614 <__swbuf_r+0x28>
 800467a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800467e:	4638      	mov	r0, r7
 8004680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004682:	bf00      	nop
 8004684:	08004ebc 	.word	0x08004ebc
 8004688:	08004edc 	.word	0x08004edc
 800468c:	08004e9c 	.word	0x08004e9c

08004690 <__swsetup_r>:
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <__swsetup_r+0xcc>)
 8004692:	b570      	push	{r4, r5, r6, lr}
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	b125      	cbz	r5, 80046a6 <__swsetup_r+0x16>
 800469c:	69ab      	ldr	r3, [r5, #24]
 800469e:	b913      	cbnz	r3, 80046a6 <__swsetup_r+0x16>
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 f953 	bl	800494c <__sinit>
 80046a6:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <__swsetup_r+0xd0>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d10f      	bne.n	80046cc <__swsetup_r+0x3c>
 80046ac:	686c      	ldr	r4, [r5, #4]
 80046ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	0715      	lsls	r5, r2, #28
 80046b6:	d42c      	bmi.n	8004712 <__swsetup_r+0x82>
 80046b8:	06d0      	lsls	r0, r2, #27
 80046ba:	d411      	bmi.n	80046e0 <__swsetup_r+0x50>
 80046bc:	2209      	movs	r2, #9
 80046be:	6032      	str	r2, [r6, #0]
 80046c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ca:	e03e      	b.n	800474a <__swsetup_r+0xba>
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <__swsetup_r+0xd4>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d101      	bne.n	80046d6 <__swsetup_r+0x46>
 80046d2:	68ac      	ldr	r4, [r5, #8]
 80046d4:	e7eb      	b.n	80046ae <__swsetup_r+0x1e>
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <__swsetup_r+0xd8>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	bf08      	it	eq
 80046dc:	68ec      	ldreq	r4, [r5, #12]
 80046de:	e7e6      	b.n	80046ae <__swsetup_r+0x1e>
 80046e0:	0751      	lsls	r1, r2, #29
 80046e2:	d512      	bpl.n	800470a <__swsetup_r+0x7a>
 80046e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046e6:	b141      	cbz	r1, 80046fa <__swsetup_r+0x6a>
 80046e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ec:	4299      	cmp	r1, r3
 80046ee:	d002      	beq.n	80046f6 <__swsetup_r+0x66>
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 fa19 	bl	8004b28 <_free_r>
 80046f6:	2300      	movs	r3, #0
 80046f8:	6363      	str	r3, [r4, #52]	; 0x34
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	2300      	movs	r3, #0
 8004704:	6063      	str	r3, [r4, #4]
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f043 0308 	orr.w	r3, r3, #8
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	b94b      	cbnz	r3, 800472a <__swsetup_r+0x9a>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d003      	beq.n	800472a <__swsetup_r+0x9a>
 8004722:	4621      	mov	r1, r4
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f9bf 	bl	8004aa8 <__smakebuf_r>
 800472a:	89a2      	ldrh	r2, [r4, #12]
 800472c:	f012 0301 	ands.w	r3, r2, #1
 8004730:	d00c      	beq.n	800474c <__swsetup_r+0xbc>
 8004732:	2300      	movs	r3, #0
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	6963      	ldr	r3, [r4, #20]
 8004738:	425b      	negs	r3, r3
 800473a:	61a3      	str	r3, [r4, #24]
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	b953      	cbnz	r3, 8004756 <__swsetup_r+0xc6>
 8004740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004744:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004748:	d1ba      	bne.n	80046c0 <__swsetup_r+0x30>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	0792      	lsls	r2, r2, #30
 800474e:	bf58      	it	pl
 8004750:	6963      	ldrpl	r3, [r4, #20]
 8004752:	60a3      	str	r3, [r4, #8]
 8004754:	e7f2      	b.n	800473c <__swsetup_r+0xac>
 8004756:	2000      	movs	r0, #0
 8004758:	e7f7      	b.n	800474a <__swsetup_r+0xba>
 800475a:	bf00      	nop
 800475c:	20000014 	.word	0x20000014
 8004760:	08004ebc 	.word	0x08004ebc
 8004764:	08004edc 	.word	0x08004edc
 8004768:	08004e9c 	.word	0x08004e9c

0800476c <__sflush_r>:
 800476c:	898a      	ldrh	r2, [r1, #12]
 800476e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	4605      	mov	r5, r0
 8004774:	0710      	lsls	r0, r2, #28
 8004776:	460c      	mov	r4, r1
 8004778:	d458      	bmi.n	800482c <__sflush_r+0xc0>
 800477a:	684b      	ldr	r3, [r1, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	dc05      	bgt.n	800478c <__sflush_r+0x20>
 8004780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc02      	bgt.n	800478c <__sflush_r+0x20>
 8004786:	2000      	movs	r0, #0
 8004788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800478e:	2e00      	cmp	r6, #0
 8004790:	d0f9      	beq.n	8004786 <__sflush_r+0x1a>
 8004792:	2300      	movs	r3, #0
 8004794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004798:	682f      	ldr	r7, [r5, #0]
 800479a:	6a21      	ldr	r1, [r4, #32]
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	d032      	beq.n	8004806 <__sflush_r+0x9a>
 80047a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	075a      	lsls	r2, r3, #29
 80047a6:	d505      	bpl.n	80047b4 <__sflush_r+0x48>
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	1ac0      	subs	r0, r0, r3
 80047ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047ae:	b10b      	cbz	r3, 80047b4 <__sflush_r+0x48>
 80047b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b2:	1ac0      	subs	r0, r0, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	4602      	mov	r2, r0
 80047b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ba:	6a21      	ldr	r1, [r4, #32]
 80047bc:	4628      	mov	r0, r5
 80047be:	47b0      	blx	r6
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	d106      	bne.n	80047d4 <__sflush_r+0x68>
 80047c6:	6829      	ldr	r1, [r5, #0]
 80047c8:	291d      	cmp	r1, #29
 80047ca:	d848      	bhi.n	800485e <__sflush_r+0xf2>
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <__sflush_r+0x108>)
 80047ce:	40ca      	lsrs	r2, r1
 80047d0:	07d6      	lsls	r6, r2, #31
 80047d2:	d544      	bpl.n	800485e <__sflush_r+0xf2>
 80047d4:	2200      	movs	r2, #0
 80047d6:	6062      	str	r2, [r4, #4]
 80047d8:	04d9      	lsls	r1, r3, #19
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	d504      	bpl.n	80047ea <__sflush_r+0x7e>
 80047e0:	1c42      	adds	r2, r0, #1
 80047e2:	d101      	bne.n	80047e8 <__sflush_r+0x7c>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b903      	cbnz	r3, 80047ea <__sflush_r+0x7e>
 80047e8:	6560      	str	r0, [r4, #84]	; 0x54
 80047ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ec:	602f      	str	r7, [r5, #0]
 80047ee:	2900      	cmp	r1, #0
 80047f0:	d0c9      	beq.n	8004786 <__sflush_r+0x1a>
 80047f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f6:	4299      	cmp	r1, r3
 80047f8:	d002      	beq.n	8004800 <__sflush_r+0x94>
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f994 	bl	8004b28 <_free_r>
 8004800:	2000      	movs	r0, #0
 8004802:	6360      	str	r0, [r4, #52]	; 0x34
 8004804:	e7c0      	b.n	8004788 <__sflush_r+0x1c>
 8004806:	2301      	movs	r3, #1
 8004808:	4628      	mov	r0, r5
 800480a:	47b0      	blx	r6
 800480c:	1c41      	adds	r1, r0, #1
 800480e:	d1c8      	bne.n	80047a2 <__sflush_r+0x36>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c5      	beq.n	80047a2 <__sflush_r+0x36>
 8004816:	2b1d      	cmp	r3, #29
 8004818:	d001      	beq.n	800481e <__sflush_r+0xb2>
 800481a:	2b16      	cmp	r3, #22
 800481c:	d101      	bne.n	8004822 <__sflush_r+0xb6>
 800481e:	602f      	str	r7, [r5, #0]
 8004820:	e7b1      	b.n	8004786 <__sflush_r+0x1a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	e7ad      	b.n	8004788 <__sflush_r+0x1c>
 800482c:	690f      	ldr	r7, [r1, #16]
 800482e:	2f00      	cmp	r7, #0
 8004830:	d0a9      	beq.n	8004786 <__sflush_r+0x1a>
 8004832:	0793      	lsls	r3, r2, #30
 8004834:	680e      	ldr	r6, [r1, #0]
 8004836:	bf08      	it	eq
 8004838:	694b      	ldreq	r3, [r1, #20]
 800483a:	600f      	str	r7, [r1, #0]
 800483c:	bf18      	it	ne
 800483e:	2300      	movne	r3, #0
 8004840:	eba6 0807 	sub.w	r8, r6, r7
 8004844:	608b      	str	r3, [r1, #8]
 8004846:	f1b8 0f00 	cmp.w	r8, #0
 800484a:	dd9c      	ble.n	8004786 <__sflush_r+0x1a>
 800484c:	4643      	mov	r3, r8
 800484e:	463a      	mov	r2, r7
 8004850:	6a21      	ldr	r1, [r4, #32]
 8004852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004854:	4628      	mov	r0, r5
 8004856:	47b0      	blx	r6
 8004858:	2800      	cmp	r0, #0
 800485a:	dc06      	bgt.n	800486a <__sflush_r+0xfe>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004862:	81a3      	strh	r3, [r4, #12]
 8004864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004868:	e78e      	b.n	8004788 <__sflush_r+0x1c>
 800486a:	4407      	add	r7, r0
 800486c:	eba8 0800 	sub.w	r8, r8, r0
 8004870:	e7e9      	b.n	8004846 <__sflush_r+0xda>
 8004872:	bf00      	nop
 8004874:	20400001 	.word	0x20400001

08004878 <_fflush_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	4605      	mov	r5, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b1db      	cbz	r3, 80048ba <_fflush_r+0x42>
 8004882:	b118      	cbz	r0, 800488c <_fflush_r+0x14>
 8004884:	6983      	ldr	r3, [r0, #24]
 8004886:	b90b      	cbnz	r3, 800488c <_fflush_r+0x14>
 8004888:	f000 f860 	bl	800494c <__sinit>
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <_fflush_r+0x48>)
 800488e:	429c      	cmp	r4, r3
 8004890:	d109      	bne.n	80048a6 <_fflush_r+0x2e>
 8004892:	686c      	ldr	r4, [r5, #4]
 8004894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004898:	b17b      	cbz	r3, 80048ba <_fflush_r+0x42>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a2:	f7ff bf63 	b.w	800476c <__sflush_r>
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <_fflush_r+0x4c>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d101      	bne.n	80048b0 <_fflush_r+0x38>
 80048ac:	68ac      	ldr	r4, [r5, #8]
 80048ae:	e7f1      	b.n	8004894 <_fflush_r+0x1c>
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <_fflush_r+0x50>)
 80048b2:	429c      	cmp	r4, r3
 80048b4:	bf08      	it	eq
 80048b6:	68ec      	ldreq	r4, [r5, #12]
 80048b8:	e7ec      	b.n	8004894 <_fflush_r+0x1c>
 80048ba:	2000      	movs	r0, #0
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
 80048be:	bf00      	nop
 80048c0:	08004ebc 	.word	0x08004ebc
 80048c4:	08004edc 	.word	0x08004edc
 80048c8:	08004e9c 	.word	0x08004e9c

080048cc <std>:
 80048cc:	2300      	movs	r3, #0
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	e9c0 3300 	strd	r3, r3, [r0]
 80048d6:	6083      	str	r3, [r0, #8]
 80048d8:	8181      	strh	r1, [r0, #12]
 80048da:	6643      	str	r3, [r0, #100]	; 0x64
 80048dc:	81c2      	strh	r2, [r0, #14]
 80048de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048e2:	6183      	str	r3, [r0, #24]
 80048e4:	4619      	mov	r1, r3
 80048e6:	2208      	movs	r2, #8
 80048e8:	305c      	adds	r0, #92	; 0x5c
 80048ea:	f7ff fe12 	bl	8004512 <memset>
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <std+0x38>)
 80048f0:	6263      	str	r3, [r4, #36]	; 0x24
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <std+0x3c>)
 80048f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <std+0x40>)
 80048f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <std+0x44>)
 80048fc:	6224      	str	r4, [r4, #32]
 80048fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004900:	bd10      	pop	{r4, pc}
 8004902:	bf00      	nop
 8004904:	08004c99 	.word	0x08004c99
 8004908:	08004cbb 	.word	0x08004cbb
 800490c:	08004cf3 	.word	0x08004cf3
 8004910:	08004d17 	.word	0x08004d17

08004914 <_cleanup_r>:
 8004914:	4901      	ldr	r1, [pc, #4]	; (800491c <_cleanup_r+0x8>)
 8004916:	f000 b885 	b.w	8004a24 <_fwalk_reent>
 800491a:	bf00      	nop
 800491c:	08004879 	.word	0x08004879

08004920 <__sfmoreglue>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	1e4a      	subs	r2, r1, #1
 8004924:	2568      	movs	r5, #104	; 0x68
 8004926:	4355      	muls	r5, r2
 8004928:	460e      	mov	r6, r1
 800492a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800492e:	f000 f949 	bl	8004bc4 <_malloc_r>
 8004932:	4604      	mov	r4, r0
 8004934:	b140      	cbz	r0, 8004948 <__sfmoreglue+0x28>
 8004936:	2100      	movs	r1, #0
 8004938:	e9c0 1600 	strd	r1, r6, [r0]
 800493c:	300c      	adds	r0, #12
 800493e:	60a0      	str	r0, [r4, #8]
 8004940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004944:	f7ff fde5 	bl	8004512 <memset>
 8004948:	4620      	mov	r0, r4
 800494a:	bd70      	pop	{r4, r5, r6, pc}

0800494c <__sinit>:
 800494c:	6983      	ldr	r3, [r0, #24]
 800494e:	b510      	push	{r4, lr}
 8004950:	4604      	mov	r4, r0
 8004952:	bb33      	cbnz	r3, 80049a2 <__sinit+0x56>
 8004954:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004958:	6503      	str	r3, [r0, #80]	; 0x50
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <__sinit+0x58>)
 800495c:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <__sinit+0x5c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6282      	str	r2, [r0, #40]	; 0x28
 8004962:	4298      	cmp	r0, r3
 8004964:	bf04      	itt	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	6183      	streq	r3, [r0, #24]
 800496a:	f000 f81f 	bl	80049ac <__sfp>
 800496e:	6060      	str	r0, [r4, #4]
 8004970:	4620      	mov	r0, r4
 8004972:	f000 f81b 	bl	80049ac <__sfp>
 8004976:	60a0      	str	r0, [r4, #8]
 8004978:	4620      	mov	r0, r4
 800497a:	f000 f817 	bl	80049ac <__sfp>
 800497e:	2200      	movs	r2, #0
 8004980:	60e0      	str	r0, [r4, #12]
 8004982:	2104      	movs	r1, #4
 8004984:	6860      	ldr	r0, [r4, #4]
 8004986:	f7ff ffa1 	bl	80048cc <std>
 800498a:	2201      	movs	r2, #1
 800498c:	2109      	movs	r1, #9
 800498e:	68a0      	ldr	r0, [r4, #8]
 8004990:	f7ff ff9c 	bl	80048cc <std>
 8004994:	2202      	movs	r2, #2
 8004996:	2112      	movs	r1, #18
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	f7ff ff97 	bl	80048cc <std>
 800499e:	2301      	movs	r3, #1
 80049a0:	61a3      	str	r3, [r4, #24]
 80049a2:	bd10      	pop	{r4, pc}
 80049a4:	08004e98 	.word	0x08004e98
 80049a8:	08004915 	.word	0x08004915

080049ac <__sfp>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <__sfp+0x70>)
 80049b0:	681e      	ldr	r6, [r3, #0]
 80049b2:	69b3      	ldr	r3, [r6, #24]
 80049b4:	4607      	mov	r7, r0
 80049b6:	b913      	cbnz	r3, 80049be <__sfp+0x12>
 80049b8:	4630      	mov	r0, r6
 80049ba:	f7ff ffc7 	bl	800494c <__sinit>
 80049be:	3648      	adds	r6, #72	; 0x48
 80049c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	d503      	bpl.n	80049d0 <__sfp+0x24>
 80049c8:	6833      	ldr	r3, [r6, #0]
 80049ca:	b133      	cbz	r3, 80049da <__sfp+0x2e>
 80049cc:	6836      	ldr	r6, [r6, #0]
 80049ce:	e7f7      	b.n	80049c0 <__sfp+0x14>
 80049d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049d4:	b16d      	cbz	r5, 80049f2 <__sfp+0x46>
 80049d6:	3468      	adds	r4, #104	; 0x68
 80049d8:	e7f4      	b.n	80049c4 <__sfp+0x18>
 80049da:	2104      	movs	r1, #4
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff ff9f 	bl	8004920 <__sfmoreglue>
 80049e2:	6030      	str	r0, [r6, #0]
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d1f1      	bne.n	80049cc <__sfp+0x20>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4604      	mov	r4, r0
 80049ee:	4620      	mov	r0, r4
 80049f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <__sfp+0x74>)
 80049f4:	6665      	str	r5, [r4, #100]	; 0x64
 80049f6:	e9c4 5500 	strd	r5, r5, [r4]
 80049fa:	60a5      	str	r5, [r4, #8]
 80049fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004a00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004a04:	2208      	movs	r2, #8
 8004a06:	4629      	mov	r1, r5
 8004a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a0c:	f7ff fd81 	bl	8004512 <memset>
 8004a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a18:	e7e9      	b.n	80049ee <__sfp+0x42>
 8004a1a:	bf00      	nop
 8004a1c:	08004e98 	.word	0x08004e98
 8004a20:	ffff0001 	.word	0xffff0001

08004a24 <_fwalk_reent>:
 8004a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a28:	4680      	mov	r8, r0
 8004a2a:	4689      	mov	r9, r1
 8004a2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a30:	2600      	movs	r6, #0
 8004a32:	b914      	cbnz	r4, 8004a3a <_fwalk_reent+0x16>
 8004a34:	4630      	mov	r0, r6
 8004a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004a3e:	3f01      	subs	r7, #1
 8004a40:	d501      	bpl.n	8004a46 <_fwalk_reent+0x22>
 8004a42:	6824      	ldr	r4, [r4, #0]
 8004a44:	e7f5      	b.n	8004a32 <_fwalk_reent+0xe>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d907      	bls.n	8004a5c <_fwalk_reent+0x38>
 8004a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a50:	3301      	adds	r3, #1
 8004a52:	d003      	beq.n	8004a5c <_fwalk_reent+0x38>
 8004a54:	4629      	mov	r1, r5
 8004a56:	4640      	mov	r0, r8
 8004a58:	47c8      	blx	r9
 8004a5a:	4306      	orrs	r6, r0
 8004a5c:	3568      	adds	r5, #104	; 0x68
 8004a5e:	e7ee      	b.n	8004a3e <_fwalk_reent+0x1a>

08004a60 <__swhatbuf_r>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	460e      	mov	r6, r1
 8004a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	b096      	sub	sp, #88	; 0x58
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	461d      	mov	r5, r3
 8004a70:	da07      	bge.n	8004a82 <__swhatbuf_r+0x22>
 8004a72:	2300      	movs	r3, #0
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	89b3      	ldrh	r3, [r6, #12]
 8004a78:	061a      	lsls	r2, r3, #24
 8004a7a:	d410      	bmi.n	8004a9e <__swhatbuf_r+0x3e>
 8004a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a80:	e00e      	b.n	8004aa0 <__swhatbuf_r+0x40>
 8004a82:	466a      	mov	r2, sp
 8004a84:	f000 f96e 	bl	8004d64 <_fstat_r>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	dbf2      	blt.n	8004a72 <__swhatbuf_r+0x12>
 8004a8c:	9a01      	ldr	r2, [sp, #4]
 8004a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a96:	425a      	negs	r2, r3
 8004a98:	415a      	adcs	r2, r3
 8004a9a:	602a      	str	r2, [r5, #0]
 8004a9c:	e7ee      	b.n	8004a7c <__swhatbuf_r+0x1c>
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	b016      	add	sp, #88	; 0x58
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffca 	bl	8004a60 <__swhatbuf_r>
 8004acc:	9900      	ldr	r1, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f877 	bl	8004bc4 <_malloc_r>
 8004ad6:	b948      	cbnz	r0, 8004aec <__smakebuf_r+0x44>
 8004ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d4ef      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e7e3      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <__smakebuf_r+0x7c>)
 8004aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	6020      	str	r0, [r4, #0]
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	6163      	str	r3, [r4, #20]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	6120      	str	r0, [r4, #16]
 8004b02:	b15b      	cbz	r3, 8004b1c <__smakebuf_r+0x74>
 8004b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 f93d 	bl	8004d88 <_isatty_r>
 8004b0e:	b128      	cbz	r0, 8004b1c <__smakebuf_r+0x74>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	431d      	orrs	r5, r3
 8004b20:	81a5      	strh	r5, [r4, #12]
 8004b22:	e7cd      	b.n	8004ac0 <__smakebuf_r+0x18>
 8004b24:	08004915 	.word	0x08004915

08004b28 <_free_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	d045      	beq.n	8004bbc <_free_r+0x94>
 8004b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b34:	1f0c      	subs	r4, r1, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfb8      	it	lt
 8004b3a:	18e4      	addlt	r4, r4, r3
 8004b3c:	f000 f946 	bl	8004dcc <__malloc_lock>
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <_free_r+0x98>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	4610      	mov	r0, r2
 8004b46:	b933      	cbnz	r3, 8004b56 <_free_r+0x2e>
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6014      	str	r4, [r2, #0]
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b52:	f000 b93c 	b.w	8004dce <__malloc_unlock>
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d90c      	bls.n	8004b74 <_free_r+0x4c>
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	1862      	adds	r2, r4, r1
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bf04      	itt	eq
 8004b62:	681a      	ldreq	r2, [r3, #0]
 8004b64:	685b      	ldreq	r3, [r3, #4]
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	bf04      	itt	eq
 8004b6a:	1852      	addeq	r2, r2, r1
 8004b6c:	6022      	streq	r2, [r4, #0]
 8004b6e:	6004      	str	r4, [r0, #0]
 8004b70:	e7ec      	b.n	8004b4c <_free_r+0x24>
 8004b72:	4613      	mov	r3, r2
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	b10a      	cbz	r2, 8004b7c <_free_r+0x54>
 8004b78:	42a2      	cmp	r2, r4
 8004b7a:	d9fa      	bls.n	8004b72 <_free_r+0x4a>
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	1858      	adds	r0, r3, r1
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d10b      	bne.n	8004b9c <_free_r+0x74>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	4401      	add	r1, r0
 8004b88:	1858      	adds	r0, r3, r1
 8004b8a:	4282      	cmp	r2, r0
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	d1dd      	bne.n	8004b4c <_free_r+0x24>
 8004b90:	6810      	ldr	r0, [r2, #0]
 8004b92:	6852      	ldr	r2, [r2, #4]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	4401      	add	r1, r0
 8004b98:	6019      	str	r1, [r3, #0]
 8004b9a:	e7d7      	b.n	8004b4c <_free_r+0x24>
 8004b9c:	d902      	bls.n	8004ba4 <_free_r+0x7c>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	602b      	str	r3, [r5, #0]
 8004ba2:	e7d3      	b.n	8004b4c <_free_r+0x24>
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	1821      	adds	r1, r4, r0
 8004ba8:	428a      	cmp	r2, r1
 8004baa:	bf04      	itt	eq
 8004bac:	6811      	ldreq	r1, [r2, #0]
 8004bae:	6852      	ldreq	r2, [r2, #4]
 8004bb0:	6062      	str	r2, [r4, #4]
 8004bb2:	bf04      	itt	eq
 8004bb4:	1809      	addeq	r1, r1, r0
 8004bb6:	6021      	streq	r1, [r4, #0]
 8004bb8:	605c      	str	r4, [r3, #4]
 8004bba:	e7c7      	b.n	8004b4c <_free_r+0x24>
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20012dfc 	.word	0x20012dfc

08004bc4 <_malloc_r>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	1ccd      	adds	r5, r1, #3
 8004bc8:	f025 0503 	bic.w	r5, r5, #3
 8004bcc:	3508      	adds	r5, #8
 8004bce:	2d0c      	cmp	r5, #12
 8004bd0:	bf38      	it	cc
 8004bd2:	250c      	movcc	r5, #12
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	db01      	blt.n	8004bde <_malloc_r+0x1a>
 8004bda:	42a9      	cmp	r1, r5
 8004bdc:	d903      	bls.n	8004be6 <_malloc_r+0x22>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	2000      	movs	r0, #0
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	f000 f8f1 	bl	8004dcc <__malloc_lock>
 8004bea:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <_malloc_r+0xac>)
 8004bec:	6814      	ldr	r4, [r2, #0]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	b991      	cbnz	r1, 8004c18 <_malloc_r+0x54>
 8004bf2:	4c20      	ldr	r4, [pc, #128]	; (8004c74 <_malloc_r+0xb0>)
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	b91b      	cbnz	r3, 8004c00 <_malloc_r+0x3c>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f83d 	bl	8004c78 <_sbrk_r>
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f000 f838 	bl	8004c78 <_sbrk_r>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d124      	bne.n	8004c56 <_malloc_r+0x92>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f8dc 	bl	8004dce <__malloc_unlock>
 8004c16:	e7e4      	b.n	8004be2 <_malloc_r+0x1e>
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	1b5b      	subs	r3, r3, r5
 8004c1c:	d418      	bmi.n	8004c50 <_malloc_r+0x8c>
 8004c1e:	2b0b      	cmp	r3, #11
 8004c20:	d90f      	bls.n	8004c42 <_malloc_r+0x7e>
 8004c22:	600b      	str	r3, [r1, #0]
 8004c24:	50cd      	str	r5, [r1, r3]
 8004c26:	18cc      	adds	r4, r1, r3
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 f8d0 	bl	8004dce <__malloc_unlock>
 8004c2e:	f104 000b 	add.w	r0, r4, #11
 8004c32:	1d23      	adds	r3, r4, #4
 8004c34:	f020 0007 	bic.w	r0, r0, #7
 8004c38:	1ac3      	subs	r3, r0, r3
 8004c3a:	d0d3      	beq.n	8004be4 <_malloc_r+0x20>
 8004c3c:	425a      	negs	r2, r3
 8004c3e:	50e2      	str	r2, [r4, r3]
 8004c40:	e7d0      	b.n	8004be4 <_malloc_r+0x20>
 8004c42:	428c      	cmp	r4, r1
 8004c44:	684b      	ldr	r3, [r1, #4]
 8004c46:	bf16      	itet	ne
 8004c48:	6063      	strne	r3, [r4, #4]
 8004c4a:	6013      	streq	r3, [r2, #0]
 8004c4c:	460c      	movne	r4, r1
 8004c4e:	e7eb      	b.n	8004c28 <_malloc_r+0x64>
 8004c50:	460c      	mov	r4, r1
 8004c52:	6849      	ldr	r1, [r1, #4]
 8004c54:	e7cc      	b.n	8004bf0 <_malloc_r+0x2c>
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d005      	beq.n	8004c6c <_malloc_r+0xa8>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4630      	mov	r0, r6
 8004c64:	f000 f808 	bl	8004c78 <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d0cf      	beq.n	8004c0c <_malloc_r+0x48>
 8004c6c:	6025      	str	r5, [r4, #0]
 8004c6e:	e7db      	b.n	8004c28 <_malloc_r+0x64>
 8004c70:	20012dfc 	.word	0x20012dfc
 8004c74:	20012e00 	.word	0x20012e00

08004c78 <_sbrk_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4c06      	ldr	r4, [pc, #24]	; (8004c94 <_sbrk_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	f000 f8b6 	bl	8004df4 <_sbrk>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_sbrk_r+0x1a>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_sbrk_r+0x1a>
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20012e8c 	.word	0x20012e8c

08004c98 <__sread>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	f000 f896 	bl	8004dd0 <_read_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	bfab      	itete	ge
 8004ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004caa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cac:	181b      	addge	r3, r3, r0
 8004cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cb2:	bfac      	ite	ge
 8004cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cb6:	81a3      	strhlt	r3, [r4, #12]
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <__swrite>:
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	898b      	ldrh	r3, [r1, #12]
 8004cc2:	05db      	lsls	r3, r3, #23
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4616      	mov	r6, r2
 8004cca:	d505      	bpl.n	8004cd8 <__swrite+0x1e>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd4:	f000 f868 	bl	8004da8 <_lseek_r>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_write_r>

08004cf2 <__sseek>:
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfa:	f000 f855 	bl	8004da8 <_lseek_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	bf15      	itete	ne
 8004d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d0e:	81a3      	strheq	r3, [r4, #12]
 8004d10:	bf18      	it	ne
 8004d12:	81a3      	strhne	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__sclose>:
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 b813 	b.w	8004d44 <_close_r>
	...

08004d20 <_write_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4c07      	ldr	r4, [pc, #28]	; (8004d40 <_write_r+0x20>)
 8004d24:	4605      	mov	r5, r0
 8004d26:	4608      	mov	r0, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	6022      	str	r2, [r4, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f7fb ff03 	bl	8000b3a <_write>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_write_r+0x1e>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_write_r+0x1e>
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	20012e8c 	.word	0x20012e8c

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4c06      	ldr	r4, [pc, #24]	; (8004d60 <_close_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	f7fb ff0f 	bl	8000b72 <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20012e8c 	.word	0x20012e8c

08004d64 <_fstat_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4c07      	ldr	r4, [pc, #28]	; (8004d84 <_fstat_r+0x20>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	f7fb ff0a 	bl	8000b8a <_fstat>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d102      	bne.n	8004d80 <_fstat_r+0x1c>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	b103      	cbz	r3, 8004d80 <_fstat_r+0x1c>
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
 8004d82:	bf00      	nop
 8004d84:	20012e8c 	.word	0x20012e8c

08004d88 <_isatty_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4c06      	ldr	r4, [pc, #24]	; (8004da4 <_isatty_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	f7fb ff09 	bl	8000baa <_isatty>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_isatty_r+0x1a>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_isatty_r+0x1a>
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20012e8c 	.word	0x20012e8c

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4c07      	ldr	r4, [pc, #28]	; (8004dc8 <_lseek_r+0x20>)
 8004dac:	4605      	mov	r5, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fb ff02 	bl	8000bc0 <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20012e8c 	.word	0x20012e8c

08004dcc <__malloc_lock>:
 8004dcc:	4770      	bx	lr

08004dce <__malloc_unlock>:
 8004dce:	4770      	bx	lr

08004dd0 <_read_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4c07      	ldr	r4, [pc, #28]	; (8004df0 <_read_r+0x20>)
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	4611      	mov	r1, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f7fb fe8e 	bl	8000b00 <_read>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_read_r+0x1e>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_read_r+0x1e>
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	20012e8c 	.word	0x20012e8c

08004df4 <_sbrk>:
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <_sbrk+0x14>)
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	4602      	mov	r2, r0
 8004dfa:	b909      	cbnz	r1, 8004e00 <_sbrk+0xc>
 8004dfc:	4903      	ldr	r1, [pc, #12]	; (8004e0c <_sbrk+0x18>)
 8004dfe:	6019      	str	r1, [r3, #0]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	4402      	add	r2, r0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	4770      	bx	lr
 8004e08:	20012e04 	.word	0x20012e04
 8004e0c:	20012e90 	.word	0x20012e90

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
